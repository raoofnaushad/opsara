[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2FGokuMohandas%2Ftesting-ml%2F)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)
    * [ Nonprofits ](/solutions/industry/nonprofits)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2FGokuMohandas%2Ftesting-ml%2F)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=GokuMohandas%2Ftesting-ml) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ GokuMohandas ](/GokuMohandas) / **[testing-ml](/GokuMohandas/testing-ml) ** Public

  * [ Notifications ](/login?return_to=%2FGokuMohandas%2Ftesting-ml) You must be signed in to change notification settings
  * [ Fork 13 ](/login?return_to=%2FGokuMohandas%2Ftesting-ml)
  * [ Star  86 ](/login?return_to=%2FGokuMohandas%2Ftesting-ml)




Learn how to create reliable ML systems by testing code, data and models. 

[ 86 stars ](/GokuMohandas/testing-ml/stargazers) [ 13 forks ](/GokuMohandas/testing-ml/forks) [ Branches ](/GokuMohandas/testing-ml/branches) [ Tags ](/GokuMohandas/testing-ml/tags) [ Activity ](/GokuMohandas/testing-ml/activity)

[ Star  ](/login?return_to=%2FGokuMohandas%2Ftesting-ml)

[ Notifications ](/login?return_to=%2FGokuMohandas%2Ftesting-ml) You must be signed in to change notification settings

  * [ Code ](/GokuMohandas/testing-ml)
  * [ Issues 0 ](/GokuMohandas/testing-ml/issues)
  * [ Pull requests 0 ](/GokuMohandas/testing-ml/pulls)
  * [ Actions ](/GokuMohandas/testing-ml/actions)
  * [ Projects 0 ](/GokuMohandas/testing-ml/projects)
  * [ Security ](/GokuMohandas/testing-ml/security)
  * [ Insights ](/GokuMohandas/testing-ml/pulse)



Additional navigation options

  * [ Code  ](/GokuMohandas/testing-ml)
  * [ Issues  ](/GokuMohandas/testing-ml/issues)
  * [ Pull requests  ](/GokuMohandas/testing-ml/pulls)
  * [ Actions  ](/GokuMohandas/testing-ml/actions)
  * [ Projects  ](/GokuMohandas/testing-ml/projects)
  * [ Security  ](/GokuMohandas/testing-ml/security)
  * [ Insights  ](/GokuMohandas/testing-ml/pulse)



# GokuMohandas/testing-ml

main

[Branches](/GokuMohandas/testing-ml/branches)[Tags](/GokuMohandas/testing-ml/tags)

[](/GokuMohandas/testing-ml/branches)[](/GokuMohandas/testing-ml/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

## History

[5 Commits](/GokuMohandas/testing-ml/commits/main/)[](/GokuMohandas/testing-ml/commits/main/)  
[.gitignore](/GokuMohandas/testing-ml/blob/main/.gitignore ".gitignore")| [.gitignore](/GokuMohandas/testing-ml/blob/main/.gitignore ".gitignore")  
[README.md](/GokuMohandas/testing-ml/blob/main/README.md "README.md")| [README.md](/GokuMohandas/testing-ml/blob/main/README.md "README.md")  
[testing.ipynb](/GokuMohandas/testing-ml/blob/main/testing.ipynb "testing.ipynb")| [testing.ipynb](/GokuMohandas/testing-ml/blob/main/testing.ipynb "testing.ipynb")  
View all files  
  
## Repository files navigation

  * [README](#)



# Testing ML

[](#testing-ml)

Learn how to create reliable ML systems by testing code, data and models.

[![](https://camo.githubusercontent.com/1c8877d013d3bce832b494b16e92a58bb0b56d0756071d8d20da475c5ea4d95b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5375627363726962652d34304b2d627269676874677265656e)](https://madewithml.com) [![](https://camo.githubusercontent.com/a9dccbaf0395471a9de4f70c2f883806ec1b335a30ea3c43aa0c62e514e01497/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f476f6b754d6f68616e6461732f4d6164652d576974682d4d4c2e7376673f7374796c653d736f6369616c266c6162656c3d53746172)](https://github.com/GokuMohandas/Made-With-ML) [![](https://camo.githubusercontent.com/fc554d6bdc946c70ad1a2b66fd77c3dad48cb4d7e5d6049ef463738c0aaaf4da/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374796c652d2d3565626130302e7376673f6c6162656c3d4c696e6b6564496e266c6f676f3d6c696e6b6564696e267374796c653d736f6369616c)](https://www.linkedin.com/in/goku) [![](https://camo.githubusercontent.com/1928f043a6430a553dd6b3d8ecf4faea06dbeea5c40660d6de57a9c56edb909a/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f476f6b754d6f68616e6461732e7376673f6c6162656c3d466f6c6c6f77267374796c653d736f6369616c)](https://twitter.com/GokuMohandas)

ðŸ‘‰ This repository contains the [interactive notebook](https://colab.research.google.com/github/GokuMohandas/testing-ml/blob/main/testing.ipynb) that complements the [testing lesson](https://madewithml.com/courses/mlops/testing/), which is a part of the [MLOps course](https://github.com/GokuMohandas/mlops-course). If you haven't already, be sure to check out the [lesson](https://madewithml.com/courses/mlops/testing/) because all the concepts are covered extensively and tied to software engineering best practices for building ML systems.

[![](https://camo.githubusercontent.com/2d36366473e492bfb3cfd8515db7631777116c574d861d83eaee03d2781f3d3a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652ff09f939620526561642d6c6573736f6e2d396366)](https://madewithml.com/courses/mlops/testing/) [![](https://camo.githubusercontent.com/d09e210cec6e79b6b8b18e3ff272570ef547472abfbedfa88e1bfd7fd1b948dc/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d266d6573736167653d566965772532304f6e25323047697448756226636f6c6f723d353836303639266c6f676f3d676974687562266c6162656c436f6c6f723d326633363364)](https://github.com/GokuMohandas/testing-ml/blob/main/testing.ipynb) [![Open In Colab](https://camo.githubusercontent.com/96889048f8a9014fdeba2a891f97150c6aac6e723f5190236b10215a97ed41f3/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667)](https://colab.research.google.com/github/GokuMohandas/testing-ml/blob/main/testing.ipynb)

  * [Data](#data)
    * [Expectations](#expectations)
    * [Production](#production)
  * [Models](#models)
    * [Training](#training)
    * [Behavioral](#behavioral)
    * [Adversarial](#adversarial)
    * [Inference](#inference)



## Data

[](#data)

Tools such as [pytest](https://madewithml.com/courses/mlops/testing/#pytest) allow us to test the functions that interact with our data but not the validity of the data itself. We're going to use the [great expectations](https://github.com/great-expectations/great_expectations) library to create expectations as to what our data should look like in a standardized way.

```
!pip install great-expectations==0.15.15 -q
```

```
import great_expectations as ge import json import pandas as pd from urllib.request import urlopen
```

```
# Load labeled projects projects = pd.read_csv("https://raw.githubusercontent.com/GokuMohandas/Made-With-ML/main/datasets/projects.csv") tags = pd.read_csv("https://raw.githubusercontent.com/GokuMohandas/Made-With-ML/main/datasets/tags.csv") df = ge.dataset.PandasDataset(pd.merge(projects, tags, on="id")) print (f"{len(df)} projects") df.head(5)
```

id | created_on | title | description | tag  
---|---|---|---|---  
0 | 6 | 2020-02-20 06:43:18 | Comparison between YOLO and RCNN on real world... | Bringing theory to experiment is cool. We can ... | computer-vision  
1 | 7 | 2020-02-20 06:47:21 | Show, Infer & Tell: Contextual Inference for C... | The beauty of the work lies in the way it arch... | computer-vision  
2 | 9 | 2020-02-24 16:24:45 | Awesome Graph Classification | A collection of important graph embedding, cla... | graph-learning  
3 | 15 | 2020-02-28 23:55:26 | Awesome Monte Carlo Tree Search | A curated list of Monte Carlo tree search papers... | reinforcement-learning  
4 | 19 | 2020-03-03 13:54:31 | Diffusion to Vector | Reference implementation of Diffusion2Vec (Com... | graph-learning  
  
### Expectations

[](#expectations)

When it comes to creating expectations as to what our data should look like, we want to think about our entire dataset and all the features (columns) within it.

```
# Presence of specific features df.expect_table_columns_to_match_ordered_list( column_list=["id", "created_on", "title", "description", "tag"] )
```

```
# Unique combinations of features (detect data leaks!) df.expect_compound_columns_to_be_unique(column_list=["title", "description"])
```

```
# Missing values df.expect_column_values_to_not_be_null(column="tag")
```

```
# Unique values df.expect_column_values_to_be_unique(column="id")
```

```
# Type adherence df.expect_column_values_to_be_of_type(column="title", type_="str")
```

```
# List (categorical) / range (continuous) of allowed values tags = ["computer-vision", "graph-learning", "reinforcement-learning", "natural-language-processing", "mlops", "time-series"] df.expect_column_values_to_be_in_set(column="tag", value_set=tags)
```

There are just a few of the different expectations that we can create. Be sure to explore all the [expectations](https://greatexpectations.io/expectations/), including [custom expectations](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/overview/). Here are some other popular expectations that don't pertain to our specific dataset but are widely applicable:

  * feature value relationships with other feature values â†’ `expect_column_pair_values_a_to_be_greater_than_b`
  * row count (exact or range) of samples â†’ `expect_table_row_count_to_be_between`
  * value statistics (mean, std, median, max, min, sum, etc.) â†’ `expect_column_mean_to_be_between`



### Production

[](#production)

The advantage of using a library such as great expectations, as opposed to isolated assert statements is that we can:

  * reduce redundant efforts for creating tests across data modalities
  * automatically create testing [checkpoints](https://madewithml.com/courses/mlops/testing#checkpoints) to execute as our dataset grows
  * automatically generate [documentation](https://madewithml.com/courses/mlops/testing#documentation) on expectations and report on runs
  * easily connect with backend data sources such as local file systems, S3, databases, etc.



```
# Run all tests on our DataFrame at once expectation_suite = df.get_expectation_suite(discard_failed_expectations=False) df.validate(expectation_suite=expectation_suite, only_return_failures=True)
```

```
"success": true, "evaluation_parameters": {}, "results": [], "statistics": { "evaluated_expectations": 6, "successful_expectations": 6, "unsuccessful_expectations": 0, "success_percent": 100.0 }
```

Many of these expectations will be executed when the data is extracted, loaded and transformed during our [DataOps workflows](https://madewithml.com/courses/mlops/orchestration#dataops). Typically, the data will be extracted from a source ([database](https://madewithml.com/courses/mlops/data-stack#database), [API](https://madewithml.com/courses/mlops/api), etc.) and loaded into a data system (ex. [data warehouse](https://madewithml.com/courses/mlops/data-stack#data-warehouse)) before being transformed there (ex. using [dbt](https://www.getdbt.com/)) for downstream applications. Throughout these tasks, Great Expectations checkpoint validations can be run to ensure the validity of the data and the changes applied to it.

[![ETL pipelines in production](https://camo.githubusercontent.com/801210afab0c444fbabeb6f87b8686b9fd11907c3e3bc448a9e244be19b1ec4c/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f74657374696e672f70726f64756374696f6e2e706e67)](https://camo.githubusercontent.com/801210afab0c444fbabeb6f87b8686b9fd11907c3e3bc448a9e244be19b1ec4c/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f74657374696e672f70726f64756374696f6e2e706e67)

## Models

[](#models)

Once we've tested our data, we can use it for downstream applications such as training machine learning models. It's important that we also test these model artifacts to ensure reliable behavior in our application.

### Training

[](#training)

Unlike traditional software, ML models can run to completion without throwing any exceptions / errors but can produce incorrect systems. We want to catch errors quickly to save on time and compute.

  * Check shapes and values of model output



```
assert model(inputs).shape == torch.Size([len(inputs), num_classes])
```

  * Check for decreasing loss after one batch of training



```
assert epoch_loss < prev_epoch_loss
```

  * Overfit on a batch



```
accuracy = train(model, inputs=batches[0]) assert accuracy == pytest.approx(0.95, abs=0.05) # 0.95 Â± 0.05
```

  * Train to completion (tests early stopping, saving, etc.)



```
train(model) assert learning_rate >= min_learning_rate assert artifacts
```

  * On different devices



```
assert train(model, device=torch.device("cpu")) assert train(model, device=torch.device("cuda"))
```

### Behavioral

[](#behavioral)

Behavioral testing is the process of testing input data and expected outputs while treating the model as a black box (model agnostic evaluation). A landmark paper on this topic is [Beyond Accuracy: Behavioral Testing of NLP Models with CheckList](https://arxiv.org/abs/2005.04118) which breaks down behavioral testing into three types of tests:

  * `invariance`: Changes should not affect outputs.



```
# INVariance via verb injection (changes should not affect outputs) tokens = ["revolutionized", "disrupted"] texts = [f"Transformers applied to NLP have {token} the ML field." for token in tokens] predict.predict(texts=texts, artifacts=artifacts)
```

```
['natural-language-processing', 'natural-language-processing'] 
```

  * `directional`: Change should affect outputs.



```
# DIRectional expectations (changes with known outputs) tokens = ["text classification", "image classification"] texts = [f"ML applied to {token}." for token in tokens] predict.predict(texts=texts, artifacts=artifacts)
```

```
['natural-language-processing', 'computer-vision'] 
```

  * `minimum functionality`: Simple combination of inputs and expected outputs.



```
# Minimum Functionality Tests (simple input/output pairs) tokens = ["natural language processing", "mlops"] texts = [f"{token} is the next big wave in machine learning." for token in tokens] predict.predict(texts=texts, artifacts=artifacts)
```

```
['natural-language-processing', 'mlops'] 
```

### Adversarial

[](#adversarial)

Behavioral testing can be extended to adversarial testing where we test to see how the model would perform under edge cases, bias, noise, etc.

```
texts = [ "CNNs for text classification.", # CNNs are typically seen in computer-vision projects "This should not produce any relevant topics." # should predict `other` label ] predict.predict(texts=texts, artifacts=artifacts)
```

```
['natural-language-processing', 'other'] 
```

### Inference

[](#inference)

When our model is deployed, most users will be using it for inference (directly / indirectly), so it's very important that we test all aspects of it.

#### Loading artifacts

[](#loading-artifacts)

This is the first time we're not loading our components from in-memory so we want to ensure that the required artifacts (model weights, encoders, config, etc.) are all able to be loaded.

```
artifacts = main.load_artifacts(run_id=run_id) assert isinstance(artifacts["label_encoder"], data.LabelEncoder) ...
```

#### Prediction

[](#prediction)

Once we have our artifacts loaded, we're readying to test our prediction pipelines. We should test samples with just one input, as well as a batch of inputs (ex. padding can have unintended consequences sometimes).

```
# test our API call directly data = { "texts": [ {"text": "Transfer learning with transformers for text classification."}, {"text": "Generative adversarial networks in both PyTorch and TensorFlow."}, ] } response = client.post("/predict", json=data) assert response.status_code == HTTPStatus.OK assert response.request.method == "POST" assert len(response.json()["data"]["predictions"]) == len(data["texts"]) ...
```

## Learn more

[](#learn-more)

While these are the foundational concepts for testing ML systems, there are a lot of software best practices for testing that we cannot show in an isolated repository. Learn a lot more about comprehensively testing code, data and models for ML systems in our [testing lesson](https://madewithml.com/courses/mlops/testing/).

## About

Learn how to create reliable ML systems by testing code, data and models. 

### Topics

[ testing ](/topics/testing "Topic: testing") [ machine-learning ](/topics/machine-learning "Topic: machine-learning") [ pytest ](/topics/pytest "Topic: pytest") [ mlops ](/topics/mlops "Topic: mlops") [ great-expectations ](/topics/great-expectations "Topic: great-expectations")

### Resources

[ Readme ](#readme-ov-file)

[ Activity](/GokuMohandas/testing-ml/activity)

### Stars

[ **86** stars](/GokuMohandas/testing-ml/stargazers)

### Watchers

[ **2** watching](/GokuMohandas/testing-ml/watchers)

### Forks

[ **13** forks](/GokuMohandas/testing-ml/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2FGokuMohandas%2Ftesting-ml&report=GokuMohandas+%28user%29)

##  [Releases](/GokuMohandas/testing-ml/releases)

No releases published

##  [Packages 0](/users/GokuMohandas/packages?repo_name=testing-ml)

No packages published 

## Languages

  * [ Jupyter Notebook 100.0% ](/GokuMohandas/testing-ml/search?l=jupyter-notebook)



## Footer

[ ](https://github.com "GitHub") Â© 2025 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You canâ€™t perform that action at this time. 
