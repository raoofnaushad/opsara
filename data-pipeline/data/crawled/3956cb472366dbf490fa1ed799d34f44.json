{
    "id": "3956cb472366dbf490fa1ed799d34f44",
    "metadata": {
        "id": "3956cb472366dbf490fa1ed799d34f44",
        "url": "https://docs.pydantic.dev/latest/concepts/pydantic_settings/",
        "title": "Settings Management - Pydantic",
        "properties": {
            "description": "Support for loading a settings or config class from environment variables or secrets files.",
            "keywords": null,
            "author": null,
            "og:type": "website",
            "og:title": "Settings Management - Pydantic",
            "og:description": "Support for loading a settings or config class from environment variables or secrets files.",
            "og:image": "https://docs.pydantic.dev/latest/assets/images/social/concepts/pydantic_settings.png",
            "og:image:type": "image/png",
            "og:image:width": "1200",
            "og:image:height": "630",
            "og:url": "https://docs.pydantic.dev/latest/concepts/pydantic_settings/",
            "twitter:card": "summary_large_image",
            "twitter:title": "Settings Management - Pydantic",
            "twitter:description": "Support for loading a settings or config class from environment variables or secrets files.",
            "twitter:image": "https://docs.pydantic.dev/latest/assets/images/social/concepts/pydantic_settings.png"
        }
    },
    "parent_metadata": {
        "id": "5a5a20946bccd6e16abf99cbfca4ac8c",
        "url": "https://www.notion.so/Configuration-Layer-5a5a20946bccd6e16abf99cbfca4ac8c",
        "title": "Configuration Layer",
        "properties": {
            "Type": "Leaf"
        }
    },
    "content": "[ Skip to content ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#settings-management)\n\nWhat's new â€” we've launched [Pydantic Logfire](https://pydantic.dev/articles/logfire-announcement) ![ðŸ”¥](https://cdn.jsdelivr.net/gh/jdecked/twemoji@15.0.3/assets/svg/1f525.svg) to help you monitor and understand your [Pydantic validations.](https://logfire.pydantic.dev/docs/integrations/pydantic/)\n\n[ ![logo](https://docs.pydantic.dev/latest/logo-white.svg) ](https://docs.pydantic.dev/latest/ \"Pydantic\")\n\nPydantic \n\n2.10\n\n  * [dev](https://docs.pydantic.dev/dev/)\n  * [2.10](https://docs.pydantic.dev/2.10/)\n  * [2.9](https://docs.pydantic.dev/2.9/)\n  * [2.8](https://docs.pydantic.dev/2.8/)\n  * [2.7](https://docs.pydantic.dev/2.7/)\n  * [2.6](https://docs.pydantic.dev/2.6/)\n  * [2.5](https://docs.pydantic.dev/2.5/)\n  * [2.4](https://docs.pydantic.dev/2.4/)\n  * [2.3](https://docs.pydantic.dev/2.3/)\n  * [2.2](https://docs.pydantic.dev/2.2/)\n  * [2.1](https://docs.pydantic.dev/2.1/)\n  * [2.0](https://docs.pydantic.dev/2.0/)\n  * [1.10](https://docs.pydantic.dev/1.10/)\n\n\n\nSettings Management \n\nInitializing search \n\n[ pydantic/pydantic  ](https://github.com/pydantic/pydantic \"Go to repository\")\n\n  * [ Get Started ](https://docs.pydantic.dev/latest/)\n  * [ Concepts ](https://docs.pydantic.dev/latest/concepts/models/)\n  * [ API Documentation ](https://docs.pydantic.dev/latest/api/base_model/)\n  * [ Internals ](https://docs.pydantic.dev/latest/internals/architecture/)\n  * [ Examples ](https://docs.pydantic.dev/latest/examples/files/)\n  * [ Error Messages ](https://docs.pydantic.dev/latest/errors/errors/)\n  * [ Integrations ](https://docs.pydantic.dev/latest/integrations/logfire/)\n  * [ Blog ](https://blog.pydantic.dev/)\n  * [ Pydantic People ](https://docs.pydantic.dev/latest/pydantic_people/)\n\n\n\n[ ![logo](https://docs.pydantic.dev/latest/logo-white.svg) ](https://docs.pydantic.dev/latest/ \"Pydantic\") Pydantic \n\n[ pydantic/pydantic  ](https://github.com/pydantic/pydantic \"Go to repository\")\n\n  * Get Started  Get Started \n    * [ Welcome to Pydantic  ](https://docs.pydantic.dev/latest/)\n    * [ Why use Pydantic  ](https://docs.pydantic.dev/latest/why/)\n    * [ Help with Pydantic  ](https://docs.pydantic.dev/latest/help_with_pydantic/)\n    * [ Installation  ](https://docs.pydantic.dev/latest/install/)\n    * [ Migration Guide  ](https://docs.pydantic.dev/latest/migration/)\n    * [ Version Policy  ](https://docs.pydantic.dev/latest/version-policy/)\n    * [ Contributing  ](https://docs.pydantic.dev/latest/contributing/)\n    * [ Changelog  ](https://docs.pydantic.dev/latest/changelog/)\n  * Concepts  Concepts \n    * [ Models  ](https://docs.pydantic.dev/latest/concepts/models/)\n    * [ Fields  ](https://docs.pydantic.dev/latest/concepts/fields/)\n    * [ JSON Schema  ](https://docs.pydantic.dev/latest/concepts/json_schema/)\n    * [ JSON  ](https://docs.pydantic.dev/latest/concepts/json/)\n    * [ Types  ](https://docs.pydantic.dev/latest/concepts/types/)\n    * [ Unions  ](https://docs.pydantic.dev/latest/concepts/unions/)\n    * [ Alias  ](https://docs.pydantic.dev/latest/concepts/alias/)\n    * [ Configuration  ](https://docs.pydantic.dev/latest/concepts/config/)\n    * [ Serialization  ](https://docs.pydantic.dev/latest/concepts/serialization/)\n    * [ Validators  ](https://docs.pydantic.dev/latest/concepts/validators/)\n    * [ Dataclasses  ](https://docs.pydantic.dev/latest/concepts/dataclasses/)\n    * [ Forward Annotations  ](https://docs.pydantic.dev/latest/concepts/forward_annotations/)\n    * [ Strict Mode  ](https://docs.pydantic.dev/latest/concepts/strict_mode/)\n    * [ Type Adapter  ](https://docs.pydantic.dev/latest/concepts/type_adapter/)\n    * [ Validation Decorator  ](https://docs.pydantic.dev/latest/concepts/validation_decorator/)\n    * [ Conversion Table  ](https://docs.pydantic.dev/latest/concepts/conversion_table/)\n    * Settings Management  [ Settings Management  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/) Page contents \n      * [ Installation  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#installation)\n      * [ Usage  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#usage)\n      * [ Validation of default values  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#validation-of-default-values)\n      * [ Environment variable names  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#environment-variable-names)\n        * [ Case-sensitivity  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#case-sensitivity)\n      * [ Parsing environment variable values  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#parsing-environment-variable-values)\n        * [ Disabling JSON parsing  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#disabling-json-parsing)\n      * [ Nested model default partial updates  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#nested-model-default-partial-updates)\n      * [ Dotenv (.env) support  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#dotenv-env-support)\n      * [ Command Line Support  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#command-line-support)\n        * [ The Basics  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#the-basics)\n          * [ Lists  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#lists)\n          * [ Dictionaries  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#dictionaries)\n          * [ Literals and Enums  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#literals-and-enums)\n          * [ Aliases  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#aliases)\n        * [ Subcommands and Positional Arguments  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#subcommands-and-positional-arguments)\n        * [ Creating CLI Applications  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#creating-cli-applications)\n        * [ Mutually Exclusive Groups  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#mutually-exclusive-groups)\n        * [ Customizing the CLI Experience  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#customizing-the-cli-experience)\n          * [ Change the Displayed Program Name  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-the-displayed-program-name)\n          * [ CLI Boolean Flags  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#cli-boolean-flags)\n          * [ Ignore Unknown Arguments  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#ignore-unknown-arguments)\n          * [ CLI Kebab Case for Arguments  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#cli-kebab-case-for-arguments)\n          * [ Change Whether CLI Should Exit on Error  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-whether-cli-should-exit-on-error)\n          * [ Enforce Required Arguments at CLI  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#enforce-required-arguments-at-cli)\n          * [ Change the None Type Parse String  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-the-none-type-parse-string)\n          * [ Hide None Type Values  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#hide-none-type-values)\n          * [ Avoid Adding JSON CLI Options  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#avoid-adding-json-cli-options)\n          * [ Use Class Docstring for Group Help Text  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#use-class-docstring-for-group-help-text)\n          * [ Change the CLI Flag Prefix Character  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-the-cli-flag-prefix-character)\n          * [ Suppressing Fields from CLI Help Text  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#suppressing-fields-from-cli-help-text)\n        * [ Integrating with Existing Parsers  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#integrating-with-existing-parsers)\n      * [ Secrets  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#secrets)\n        * [ Use Case: Docker Secrets  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#use-case-docker-secrets)\n      * [ Azure Key Vault  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#azure-key-vault)\n      * [ Other settings source  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#other-settings-source)\n        * [ pyproject.toml  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#pyprojecttoml)\n      * [ Field value priority  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#field-value-priority)\n      * [ Customise settings sources  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#customise-settings-sources)\n        * [ Changing Priority  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#changing-priority)\n        * [ Adding sources  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#adding-sources)\n          * [ Accesing the result of previous sources  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#accesing-the-result-of-previous-sources)\n        * [ Removing sources  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#removing-sources)\n      * [ In-place reloading  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#in-place-reloading)\n    * [ Performance  ](https://docs.pydantic.dev/latest/concepts/performance/)\n    * [ Experimental  ](https://docs.pydantic.dev/latest/concepts/experimental/)\n  * API Documentation  API Documentation \n    * Pydantic  Pydantic \n      * [ BaseModel  ](https://docs.pydantic.dev/latest/api/base_model/)\n      * [ RootModel  ](https://docs.pydantic.dev/latest/api/root_model/)\n      * [ Pydantic Dataclasses  ](https://docs.pydantic.dev/latest/api/dataclasses/)\n      * [ TypeAdapter  ](https://docs.pydantic.dev/latest/api/type_adapter/)\n      * [ Validate Call  ](https://docs.pydantic.dev/latest/api/validate_call/)\n      * [ Fields  ](https://docs.pydantic.dev/latest/api/fields/)\n      * [ Aliases  ](https://docs.pydantic.dev/latest/api/aliases/)\n      * [ Configuration  ](https://docs.pydantic.dev/latest/api/config/)\n      * [ JSON Schema  ](https://docs.pydantic.dev/latest/api/json_schema/)\n      * [ Errors  ](https://docs.pydantic.dev/latest/api/errors/)\n      * [ Functional Validators  ](https://docs.pydantic.dev/latest/api/functional_validators/)\n      * [ Functional Serializers  ](https://docs.pydantic.dev/latest/api/functional_serializers/)\n      * [ Standard Library Types  ](https://docs.pydantic.dev/latest/api/standard_library_types/)\n      * [ Pydantic Types  ](https://docs.pydantic.dev/latest/api/types/)\n      * [ Network Types  ](https://docs.pydantic.dev/latest/api/networks/)\n      * [ Version Information  ](https://docs.pydantic.dev/latest/api/version/)\n      * [ Annotated Handlers  ](https://docs.pydantic.dev/latest/api/annotated_handlers/)\n      * [ Experimental  ](https://docs.pydantic.dev/latest/api/experimental/)\n    * Pydantic Core  Pydantic Core \n      * [ pydantic_core  ](https://docs.pydantic.dev/latest/api/pydantic_core/)\n      * [ pydantic_core.core_schema  ](https://docs.pydantic.dev/latest/api/pydantic_core_schema/)\n    * [ Pydantic Settings  ](https://docs.pydantic.dev/latest/api/pydantic_settings/)\n    * Pydantic Extra Types  Pydantic Extra Types \n      * [ Color  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_color/)\n      * [ Country  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_country/)\n      * [ Payment  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_payment/)\n      * [ Phone Numbers  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_phone_numbers/)\n      * [ Routing Numbers  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_routing_numbers/)\n      * [ Coordinate  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_coordinate/)\n      * [ Mac Address  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_mac_address/)\n      * [ ISBN  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_isbn/)\n      * [ Pendulum  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_pendulum_dt/)\n      * [ Currency  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_currency_code/)\n      * [ Language  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_language_code/)\n      * [ Script Code  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_script_code/)\n      * [ Semantic Version  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_semantic_version/)\n      * [ Timezone Name  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_timezone_name/)\n      * [ ULID  ](https://docs.pydantic.dev/latest/api/pydantic_extra_types_ulid/)\n  * Internals  Internals \n    * [ Architecture  ](https://docs.pydantic.dev/latest/internals/architecture/)\n    * [ Resolving Annotations  ](https://docs.pydantic.dev/latest/internals/resolving_annotations/)\n  * Examples  Examples \n    * [ Validating File Data  ](https://docs.pydantic.dev/latest/examples/files/)\n    * [ Web and API Requests  ](https://docs.pydantic.dev/latest/examples/requests/)\n    * [ Queues  ](https://docs.pydantic.dev/latest/examples/queues/)\n    * [ Databases  ](https://docs.pydantic.dev/latest/examples/orms/)\n    * [ Custom Validators  ](https://docs.pydantic.dev/latest/examples/custom_validators/)\n  * Error Messages  Error Messages \n    * [ Error Handling  ](https://docs.pydantic.dev/latest/errors/errors/)\n    * [ Validation Errors  ](https://docs.pydantic.dev/latest/errors/validation_errors/)\n    * [ Usage Errors  ](https://docs.pydantic.dev/latest/errors/usage_errors/)\n  * Integrations  Integrations \n    * [ Pydantic Logfire  ](https://docs.pydantic.dev/latest/integrations/logfire/)\n    * Dev Tools  Dev Tools \n      * [ Mypy  ](https://docs.pydantic.dev/latest/integrations/mypy/)\n      * [ PyCharm  ](https://docs.pydantic.dev/latest/integrations/pycharm/)\n      * [ Hypothesis  ](https://docs.pydantic.dev/latest/integrations/hypothesis/)\n      * [ Visual Studio Code  ](https://docs.pydantic.dev/latest/integrations/visual_studio_code/)\n      * [ datamodel-code-generator  ](https://docs.pydantic.dev/latest/integrations/datamodel_code_generator/)\n      * [ devtools  ](https://docs.pydantic.dev/latest/integrations/devtools/)\n      * [ Rich  ](https://docs.pydantic.dev/latest/integrations/rich/)\n      * [ Linting  ](https://docs.pydantic.dev/latest/integrations/linting/)\n    * Production Tools  Production Tools \n      * [ AWS Lambda  ](https://docs.pydantic.dev/latest/integrations/aws_lambda/)\n  * [ Blog  ](https://blog.pydantic.dev/)\n  * [ Pydantic People  ](https://docs.pydantic.dev/latest/pydantic_people/)\n\n\n\nPage contents \n\n  * [ Installation  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#installation)\n  * [ Usage  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#usage)\n  * [ Validation of default values  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#validation-of-default-values)\n  * [ Environment variable names  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#environment-variable-names)\n    * [ Case-sensitivity  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#case-sensitivity)\n  * [ Parsing environment variable values  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#parsing-environment-variable-values)\n    * [ Disabling JSON parsing  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#disabling-json-parsing)\n  * [ Nested model default partial updates  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#nested-model-default-partial-updates)\n  * [ Dotenv (.env) support  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#dotenv-env-support)\n  * [ Command Line Support  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#command-line-support)\n    * [ The Basics  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#the-basics)\n      * [ Lists  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#lists)\n      * [ Dictionaries  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#dictionaries)\n      * [ Literals and Enums  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#literals-and-enums)\n      * [ Aliases  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#aliases)\n    * [ Subcommands and Positional Arguments  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#subcommands-and-positional-arguments)\n    * [ Creating CLI Applications  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#creating-cli-applications)\n    * [ Mutually Exclusive Groups  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#mutually-exclusive-groups)\n    * [ Customizing the CLI Experience  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#customizing-the-cli-experience)\n      * [ Change the Displayed Program Name  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-the-displayed-program-name)\n      * [ CLI Boolean Flags  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#cli-boolean-flags)\n      * [ Ignore Unknown Arguments  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#ignore-unknown-arguments)\n      * [ CLI Kebab Case for Arguments  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#cli-kebab-case-for-arguments)\n      * [ Change Whether CLI Should Exit on Error  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-whether-cli-should-exit-on-error)\n      * [ Enforce Required Arguments at CLI  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#enforce-required-arguments-at-cli)\n      * [ Change the None Type Parse String  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-the-none-type-parse-string)\n      * [ Hide None Type Values  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#hide-none-type-values)\n      * [ Avoid Adding JSON CLI Options  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#avoid-adding-json-cli-options)\n      * [ Use Class Docstring for Group Help Text  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#use-class-docstring-for-group-help-text)\n      * [ Change the CLI Flag Prefix Character  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-the-cli-flag-prefix-character)\n      * [ Suppressing Fields from CLI Help Text  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#suppressing-fields-from-cli-help-text)\n    * [ Integrating with Existing Parsers  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#integrating-with-existing-parsers)\n  * [ Secrets  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#secrets)\n    * [ Use Case: Docker Secrets  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#use-case-docker-secrets)\n  * [ Azure Key Vault  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#azure-key-vault)\n  * [ Other settings source  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#other-settings-source)\n    * [ pyproject.toml  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#pyprojecttoml)\n  * [ Field value priority  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#field-value-priority)\n  * [ Customise settings sources  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#customise-settings-sources)\n    * [ Changing Priority  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#changing-priority)\n    * [ Adding sources  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#adding-sources)\n      * [ Accesing the result of previous sources  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#accesing-the-result-of-previous-sources)\n    * [ Removing sources  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#removing-sources)\n  * [ In-place reloading  ](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#in-place-reloading)\n\n\n\n# Settings Management[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#settings-management \"Permanent link\")\n\n[Pydantic Settings](https://github.com/pydantic/pydantic-settings) provides optional Pydantic features for loading a settings or config class from environment variables or secrets files.\n\n## Installation[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#installation \"Permanent link\")\n\nInstallation is as simple as:\n\n```\n`pipinstallpydantic-settings `\n```\n\n## Usage[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#usage \"Permanent link\")\n\nIf you create a model that inherits from `BaseSettings`, the model initialiser will attempt to determine the values of any fields not passed as keyword arguments by reading from the environment. (Default values will still be used if the matching environment variable is not set.)\n\nThis makes it easy to:\n\n  * Create a clearly-defined, type-hinted application configuration class\n  * Automatically read modifications to the configuration from environment variables\n  * Manually override specific settings in the initialiser where desired (e.g. in unit tests)\n\n\n\nFor example:\n\n```\n`from typing import Any, Callable, Set from pydantic import ( AliasChoices, AmqpDsn, BaseModel, Field, ImportString, PostgresDsn, RedisDsn, ) from pydantic_settings import BaseSettings, SettingsConfigDict class SubModel(BaseModel): foo: str = 'bar' apple: int = 1 class Settings(BaseSettings): auth_key: str = Field(validation_alias='my_auth_key')\n\nThe environment variable name is overridden using `validation_alias`. In this case, the environment variable `my_auth_key` will be read instead of `auth_key`.\n\nCheck the [`Field` documentation](https://docs.pydantic.dev/latest/concepts/fields/) for more information.\n\n[](#__code_1_annotation_1) api_key: str = Field(alias='my_api_key')\n\nThe environment variable name is overridden using `alias`. In this case, the environment variable `my_api_key` will be used for both validation and serialization instead of `api_key`.\n\nCheck the [`Field` documentation](https://docs.pydantic.dev/latest/concepts/fields/#field-aliases) for more information.\n\n[](#__code_1_annotation_2) redis_dsn: RedisDsn = Field( 'redis://user:pass@localhost:6379/1', validation_alias=AliasChoices('service_redis_dsn', 'redis_url'),\n\nThe [`AliasChoices`](https://docs.pydantic.dev/latest/api/aliases/#pydantic.aliases.AliasChoices) class allows to have multiple environment variable names for a single field. The first environment variable that is found will be used.\n\nCheck the [documentation on alias choices](https://docs.pydantic.dev/latest/concepts/alias/#aliaspath-and-aliaschoices) for more information.\n\n[](#__code_1_annotation_3) ) pg_dsn: PostgresDsn = 'postgres://user:pass@localhost:5432/foobar' amqp_dsn: AmqpDsn = 'amqp://user:pass@localhost:5672/' special_function: ImportString[Callable[[Any], Any]] = 'math.cos'\n\nThe [`ImportString`](https://docs.pydantic.dev/latest/api/types/#pydantic.types.ImportString) class allows to import an object from a string. In this case, the environment variable `special_function` will be read and the function [`math.cos`](https://docs.python.org/3/library/math.html#math.cos) will be imported.\n\n[](#__code_1_annotation_4) # to override domains: # export my_prefix_domains='[\"foo.com\", \"bar.com\"]' domains: Set[str] = set() # to override more_settings: # export my_prefix_more_settings='{\"foo\": \"x\", \"apple\": 1}' more_settings: SubModel = SubModel() model_config = SettingsConfigDict(env_prefix='my_prefix_')\n\nThe `env_prefix` config setting allows to set a prefix for all environment variables.\n\nCheck the [Environment variable names documentation](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#environment-variable-names) for more information.\n\n[](#__code_1_annotation_5) print(Settings().model_dump()) \"\"\" { 'auth_key': 'xxx', 'api_key': 'xxx', 'redis_dsn': Url('redis://user:pass@localhost:6379/1'), 'pg_dsn': MultiHostUrl('postgres://user:pass@localhost:5432/foobar'), 'amqp_dsn': Url('amqp://user:pass@localhost:5672/'), 'special_function': math.cos, 'domains': set(), 'more_settings': {'foo': 'bar', 'apple': 1}, } \"\"\" `\n```\n\n## Validation of default values[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#validation-of-default-values \"Permanent link\")\n\nUnlike pydantic `BaseModel`, default values of `BaseSettings` fields are validated by default. You can disable this behaviour by setting `validate_default=False` either in `model_config` or on field level by `Field(validate_default=False)`:\n\n```\n`from pydantic import Field from pydantic_settings import BaseSettings, SettingsConfigDict class Settings(BaseSettings): model_config = SettingsConfigDict(validate_default=False) # default won't be validated foo: int = 'test' print(Settings()) #> foo='test' class Settings1(BaseSettings): # default won't be validated foo: int = Field('test', validate_default=False) print(Settings1()) #> foo='test' `\n```\n\nCheck the [validation of default values](https://docs.pydantic.dev/latest/concepts/fields/#validate-default-values) for more information.\n\n## Environment variable names[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#environment-variable-names \"Permanent link\")\n\nBy default, the environment variable name is the same as the field name.\n\nYou can change the prefix for all environment variables by setting the `env_prefix` config setting, or via the `_env_prefix` keyword argument on instantiation:\n\n```\n`from pydantic_settings import BaseSettings, SettingsConfigDict class Settings(BaseSettings): model_config = SettingsConfigDict(env_prefix='my_prefix_') auth_key: str = 'xxx' # will be read from `my_prefix_auth_key` `\n```\n\nNote\n\nThe default `env_prefix` is `''` (empty string).\n\nIf you want to change the environment variable name for a single field, you can use an alias.\n\nThere are two ways to do this:\n\n  * Using `Field(alias=...)` (see `api_key` above)\n  * Using `Field(validation_alias=...)` (see `auth_key` above)\n\n\n\nCheck the [`Field` aliases documentation](https://docs.pydantic.dev/latest/concepts/fields/#field-aliases) for more information about aliases.\n\n`env_prefix` does not apply to fields with alias. It means the environment variable name is the same as field alias:\n\n```\n`from pydantic import Field from pydantic_settings import BaseSettings, SettingsConfigDict class Settings(BaseSettings): model_config = SettingsConfigDict(env_prefix='my_prefix_') foo: str = Field('xxx', alias='FooAlias')\n\n`env_prefix` will be ignored and the value will be read from `FooAlias` environment variable.\n\n[](#__code_4_annotation_1) `\n```\n\n### Case-sensitivity[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#case-sensitivity \"Permanent link\")\n\nBy default, environment variable names are case-insensitive.\n\nIf you want to make environment variable names case-sensitive, you can set the `case_sensitive` config setting:\n\n```\n`from pydantic_settings import BaseSettings, SettingsConfigDict class Settings(BaseSettings): model_config = SettingsConfigDict(case_sensitive=True) redis_host: str = 'localhost' `\n```\n\nWhen `case_sensitive` is `True`, the environment variable names must match field names (optionally with a prefix), so in this example `redis_host` could only be modified via `export redis_host`. If you want to name environment variables all upper-case, you should name attribute all upper-case too. You can still name environment variables anything you like through `Field(validation_alias=...)`.\n\nCase-sensitivity can also be set via the `_case_sensitive` keyword argument on instantiation.\n\nIn case of nested models, the `case_sensitive` setting will be applied to all nested models.\n\n```\n`import os from pydantic import BaseModel, ValidationError from pydantic_settings import BaseSettings class RedisSettings(BaseModel): host: str port: int class Settings(BaseSettings, case_sensitive=True): redis: RedisSettings os.environ['redis'] = '{\"host\": \"localhost\", \"port\": 6379}' print(Settings().model_dump()) #> {'redis': {'host': 'localhost', 'port': 6379}} os.environ['redis'] = '{\"HOST\": \"localhost\", \"port\": 6379}'\n\nNote that the `host` field is not found because the environment variable name is `HOST` (all upper-case).\n\n[](#__code_6_annotation_1) try: Settings() except ValidationError as e: print(e) \"\"\" 1 validation error for Settings redis.host Field required [type=missing, input_value={'HOST': 'localhost', 'port': 6379}, input_type=dict] For further information visit https://errors.pydantic.dev/2/v/missing \"\"\" `\n```\n\nNote\n\nOn Windows, Python's `os` module always treats environment variables as case-insensitive, so the `case_sensitive` config setting will have no effect - settings will always be updated ignoring case.\n\n## Parsing environment variable values[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#parsing-environment-variable-values \"Permanent link\")\n\nBy default environment variables are parsed verbatim, including if the value is empty. You can choose to ignore empty environment variables by setting the `env_ignore_empty` config setting to `True`. This can be useful if you would prefer to use the default value for a field rather than an empty value from the environment.\n\nFor most simple field types (such as `int`, `float`, `str`, etc.), the environment variable value is parsed the same way it would be if passed directly to the initialiser (as a string).\n\nComplex types like `list`, `set`, `dict`, and sub-models are populated from the environment by treating the environment variable's value as a JSON-encoded string.\n\nAnother way to populate nested complex variables is to configure your model with the `env_nested_delimiter` config setting, then use an environment variable with a name pointing to the nested module fields. What it does is simply explodes your variable into nested models or dicts. So if you define a variable `FOO__BAR__BAZ=123` it will convert it into `FOO={'BAR': {'BAZ': 123}}` If you have multiple variables with the same structure they will be merged.\n\nNote\n\nSub model has to inherit from `pydantic.BaseModel`, Otherwise `pydantic-settings` will initialize sub model, collects values for sub model fields separately, and you may get unexpected results.\n\nAs an example, given the following environment variables: \n\n```\n`# your environment exportV0=0 exportSUB_MODEL='{\"v1\": \"json-1\", \"v2\": \"json-2\"}' exportSUB_MODEL__V2=nested-2 exportSUB_MODEL__V3=3 exportSUB_MODEL__DEEP__V4=v4 `\n```\n\nYou could load them into the following settings model:\n\n```\n`from pydantic import BaseModel from pydantic_settings import BaseSettings, SettingsConfigDict class DeepSubModel(BaseModel):\n\nSub model has to inherit from `pydantic.BaseModel`.\n\n[](#__code_8_annotation_1) v4: str class SubModel(BaseModel):\n\nSub model has to inherit from `pydantic.BaseModel`.\n\n[](#__code_8_annotation_2) v1: str v2: bytes v3: int deep: DeepSubModel class Settings(BaseSettings): model_config = SettingsConfigDict(env_nested_delimiter='__') v0: str sub_model: SubModel print(Settings().model_dump()) \"\"\" { 'v0': '0', 'sub_model': {'v1': 'json-1', 'v2': b'nested-2', 'v3': 3, 'deep': {'v4': 'v4'}}, } \"\"\" `\n```\n\n`env_nested_delimiter` can be configured via the `model_config` as shown above, or via the `_env_nested_delimiter` keyword argument on instantiation.\n\nNested environment variables take precedence over the top-level environment variable JSON (e.g. in the example above, `SUB_MODEL__V2` trumps `SUB_MODEL`).\n\nYou may also populate a complex type by providing your own source class.\n\n```\n`import json import os from typing import Any, List, Tuple, Type from pydantic.fields import FieldInfo from pydantic_settings import ( BaseSettings, EnvSettingsSource, PydanticBaseSettingsSource, ) class MyCustomSource(EnvSettingsSource): def prepare_field_value( self, field_name: str, field: FieldInfo, value: Any, value_is_complex: bool ) -> Any: if field_name == 'numbers': return [int(x) for x in value.split(',')] return json.loads(value) class Settings(BaseSettings): numbers: List[int] @classmethod def settings_customise_sources( cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource, ) -> Tuple[PydanticBaseSettingsSource, ...]: return (MyCustomSource(settings_cls),) os.environ['numbers'] = '1,2,3' print(Settings().model_dump()) #> {'numbers': [1, 2, 3]} `\n```\n\n### Disabling JSON parsing[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#disabling-json-parsing \"Permanent link\")\n\npydantic-settings by default parses complex types from environment variables as JSON strings. If you want to disable this behavior for a field and parse the value in your own validator, you can annotate the field with [`NoDecode`](https://docs.pydantic.dev/latest/api/pydantic_settings/#pydantic_settings.NoDecode):\n\n```\n`import os from typing import List from pydantic import field_validator from typing_extensions import Annotated from pydantic_settings import BaseSettings, NoDecode class Settings(BaseSettings): numbers: Annotated[List[int], NoDecode]\n\nThe `NoDecode` annotation disables JSON parsing for the `numbers` field. The `decode_numbers` field validator will be called to parse the value.\n\n[](#__code_10_annotation_1) @field_validator('numbers', mode='before') @classmethod def decode_numbers(cls, v: str) -> List[int]: return [int(x) for x in v.split(',')] os.environ['numbers'] = '1,2,3' print(Settings().model_dump()) #> {'numbers': [1, 2, 3]} `\n```\n\nYou can also disable JSON parsing for all fields by setting the `enable_decoding` config setting to `False`:\n\n```\n`import os from typing import List from pydantic import field_validator from pydantic_settings import BaseSettings, SettingsConfigDict class Settings(BaseSettings): model_config = SettingsConfigDict(enable_decoding=False) numbers: List[int] @field_validator('numbers', mode='before') @classmethod def decode_numbers(cls, v: str) -> List[int]: return [int(x) for x in v.split(',')] os.environ['numbers'] = '1,2,3' print(Settings().model_dump()) #> {'numbers': [1, 2, 3]} `\n```\n\nYou can force JSON parsing for a field by annotating it with [`ForceDecode`](https://docs.pydantic.dev/latest/api/pydantic_settings/#pydantic_settings.ForceDecode). This will bypass the `enable_decoding` config setting:\n\n```\n`import os from typing import List from pydantic import field_validator from typing_extensions import Annotated from pydantic_settings import BaseSettings, ForceDecode, SettingsConfigDict class Settings(BaseSettings): model_config = SettingsConfigDict(enable_decoding=False) numbers: Annotated[List[int], ForceDecode] numbers1: List[int]\n\nThe `numbers1` field is not annotated with `ForceDecode`, so it will not be parsed as JSON. and we have to provide a custom validator to parse the value.\n\n[](#__code_12_annotation_1) @field_validator('numbers1', mode='before') @classmethod def decode_numbers1(cls, v: str) -> List[int]: return [int(x) for x in v.split(',')] os.environ['numbers'] = '[\"1\",\"2\",\"3\"]' os.environ['numbers1'] = '1,2,3' print(Settings().model_dump()) #> {'numbers': [1, 2, 3], 'numbers1': [1, 2, 3]} `\n```\n\n## Nested model default partial updates[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#nested-model-default-partial-updates \"Permanent link\")\n\nBy default, Pydantic settings does not allow partial updates to nested model default objects. This behavior can be overriden by setting the `nested_model_default_partial_update` flag to `True`, which will allow partial updates on nested model default object fields.\n\n```\n`import os from pydantic import BaseModel from pydantic_settings import BaseSettings, SettingsConfigDict class SubModel(BaseModel): val: int = 0 flag: bool = False class SettingsPartialUpdate(BaseSettings): model_config = SettingsConfigDict( env_nested_delimiter='__', nested_model_default_partial_update=True ) nested_model: SubModel = SubModel(val=1) class SettingsNoPartialUpdate(BaseSettings): model_config = SettingsConfigDict( env_nested_delimiter='__', nested_model_default_partial_update=False ) nested_model: SubModel = SubModel(val=1) # Apply a partial update to the default object using environment variables os.environ['NESTED_MODEL__FLAG'] = 'True' # When partial update is enabled, the existing SubModel instance is updated # with nested_model.flag=True change assert SettingsPartialUpdate().model_dump() == { 'nested_model': {'val': 1, 'flag': True} } # When partial update is disabled, a new SubModel instance is instantiated # with nested_model.flag=True change assert SettingsNoPartialUpdate().model_dump() == { 'nested_model': {'val': 0, 'flag': True} } `\n```\n\n## Dotenv (.env) support[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#dotenv-env-support \"Permanent link\")\n\nDotenv files (generally named `.env`) are a common pattern that make it easy to use environment variables in a platform-independent manner.\n\nA dotenv file follows the same general principles of all environment variables, and it looks like this:\n\n.env```\n`# ignore comment ENVIRONMENT=\"production\" REDIS_ADDRESS=localhost:6379 MEANING_OF_LIFE=42 MY_VAR='Hello world' `\n```\n\nOnce you have your `.env` file filled with variables, _pydantic_ supports loading it in two ways:\n\n  1. Setting the `env_file` (and `env_file_encoding` if you don't want the default encoding of your OS) on `model_config` in the `BaseSettings` class: \n\n```\n`from pydantic_settings import BaseSettings, SettingsConfigDict class Settings(BaseSettings): model_config = SettingsConfigDict(env_file='.env', env_file_encoding='utf-8') `\n```\n\n  2. Instantiating the `BaseSettings` derived class with the `_env_file` keyword argument (and the `_env_file_encoding` if needed): \n\n```\n`from pydantic_settings import BaseSettings, SettingsConfigDict class Settings(BaseSettings): model_config = SettingsConfigDict(env_file='.env', env_file_encoding='utf-8') settings = Settings(_env_file='prod.env', _env_file_encoding='utf-8') `\n```\n\nIn either case, the value of the passed argument can be any valid path or filename, either absolute or relative to the current working directory. From there, _pydantic_ will handle everything for you by loading in your variables and validating them.\n\n\n\nNote\n\nIf a filename is specified for `env_file`, Pydantic will only check the current working directory and won't check any parent directories for the `.env` file.\n\nEven when using a dotenv file, _pydantic_ will still read environment variables as well as the dotenv file, **environment variables will always take priority over values loaded from a dotenv file**.\n\nPassing a file path via the `_env_file` keyword argument on instantiation (method 2) will override the value (if any) set on the `model_config` class. If the above snippets were used in conjunction, `prod.env` would be loaded while `.env` would be ignored.\n\nIf you need to load multiple dotenv files, you can pass multiple file paths as a tuple or list. The files will be loaded in order, with each file overriding the previous one.\n\n```\n`from pydantic_settings import BaseSettings, SettingsConfigDict class Settings(BaseSettings): model_config = SettingsConfigDict( # `.env.prod` takes priority over `.env` env_file=('.env', '.env.prod') ) `\n```\n\nYou can also use the keyword argument override to tell Pydantic not to load any file at all (even if one is set in the `model_config` class) by passing `None` as the instantiation keyword argument, e.g. `settings = Settings(_env_file=None)`.\n\nBecause python-dotenv is used to parse the file, bash-like semantics such as `export` can be used which (depending on your OS and environment) may allow your dotenv file to also be used with `source`, see [python-dotenv's documentation](https://saurabh-kumar.com/python-dotenv/#usages) for more details.\n\nPydantic settings consider `extra` config in case of dotenv file. It means if you set the `extra=forbid` (_default_) on `model_config` and your dotenv file contains an entry for a field that is not defined in settings model, it will raise `ValidationError` in settings construction.\n\nFor compatibility with pydantic 1.x BaseSettings you should use `extra=ignore`: \n\n```\n`from pydantic_settings import BaseSettings, SettingsConfigDict class Settings(BaseSettings): model_config = SettingsConfigDict(env_file='.env', extra='ignore') `\n```\n\nNote\n\nPydantic settings loads all the values from dotenv file and passes it to the model, regardless of the model's `env_prefix`. So if you provide extra values in a dotenv file, whether they start with `env_prefix` or not, a `ValidationError` will be raised.\n\n## Command Line Support[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#command-line-support \"Permanent link\")\n\nPydantic settings provides integrated CLI support, making it easy to quickly define CLI applications using Pydantic models. There are two primary use cases for Pydantic settings CLI:\n\n  1. When using a CLI to override fields in Pydantic models.\n  2. When using Pydantic models to define CLIs.\n\n\n\nBy default, the experience is tailored towards use case #1 and builds on the foundations established in [parsing environment variables](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#parsing-environment-variable-values). If your use case primarily falls into #2, you will likely want to enable most of the defaults outlined at the end of [creating CLI applications](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#creating-cli-applications).\n\n### The Basics[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#the-basics \"Permanent link\")\n\nTo get started, let's revisit the example presented in [parsing environment variables](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#parsing-environment-variable-values) but using a Pydantic settings CLI:\n\n```\n`import sys from pydantic import BaseModel from pydantic_settings import BaseSettings, SettingsConfigDict class DeepSubModel(BaseModel): v4: str class SubModel(BaseModel): v1: str v2: bytes v3: int deep: DeepSubModel class Settings(BaseSettings): model_config = SettingsConfigDict(cli_parse_args=True) v0: str sub_model: SubModel sys.argv = [ 'example.py', '--v0=0', '--sub_model={\"v1\": \"json-1\", \"v2\": \"json-2\"}', '--sub_model.v2=nested-2', '--sub_model.v3=3', '--sub_model.deep.v4=v4', ] print(Settings().model_dump()) \"\"\" { 'v0': '0', 'sub_model': {'v1': 'json-1', 'v2': b'nested-2', 'v3': 3, 'deep': {'v4': 'v4'}}, } \"\"\" `\n```\n\nTo enable CLI parsing, we simply set the `cli_parse_args` flag to a valid value, which retains similar conotations as defined in `argparse`.\n\nNote that a CLI settings source is [**the topmost source**](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#field-value-priority) by default unless its [priority value is customised](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#customise-settings-sources):\n\n```\n`import os import sys from typing import Tuple, Type from pydantic_settings import ( BaseSettings, CliSettingsSource, PydanticBaseSettingsSource, ) class Settings(BaseSettings): my_foo: str @classmethod def settings_customise_sources( cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource, ) -> Tuple[PydanticBaseSettingsSource, ...]: return env_settings, CliSettingsSource(settings_cls, cli_parse_args=True) os.environ['MY_FOO'] = 'from environment' sys.argv = ['example.py', '--my_foo=from cli'] print(Settings().model_dump()) #> {'my_foo': 'from environment'} `\n```\n\n#### Lists[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#lists \"Permanent link\")\n\nCLI argument parsing of lists supports intermixing of any of the below three styles:\n\n  * JSON style `--field='[1,2]'`\n  * Argparse style `--field 1 --field 2`\n  * Lazy style `--field=1,2`\n\n\n\n```\n`import sys from typing import List from pydantic_settings import BaseSettings class Settings(BaseSettings, cli_parse_args=True): my_list: List[int] sys.argv = ['example.py', '--my_list', '[1,2]'] print(Settings().model_dump()) #> {'my_list': [1, 2]} sys.argv = ['example.py', '--my_list', '1', '--my_list', '2'] print(Settings().model_dump()) #> {'my_list': [1, 2]} sys.argv = ['example.py', '--my_list', '1,2'] print(Settings().model_dump()) #> {'my_list': [1, 2]} `\n```\n\n#### Dictionaries[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#dictionaries \"Permanent link\")\n\nCLI argument parsing of dictionaries supports intermixing of any of the below two styles:\n\n  * JSON style `--field='{\"k1\": 1, \"k2\": 2}'`\n  * Environment variable style `--field k1=1 --field k2=2`\n\n\n\nThese can be used in conjunction with list forms as well, e.g:\n\n  * `--field k1=1,k2=2 --field k3=3 --field '{\"k4\": 4}'` etc.\n\n\n\n```\n`import sys from typing import Dict from pydantic_settings import BaseSettings class Settings(BaseSettings, cli_parse_args=True): my_dict: Dict[str, int] sys.argv = ['example.py', '--my_dict', '{\"k1\":1,\"k2\":2}'] print(Settings().model_dump()) #> {'my_dict': {'k1': 1, 'k2': 2}} sys.argv = ['example.py', '--my_dict', 'k1=1', '--my_dict', 'k2=2'] print(Settings().model_dump()) #> {'my_dict': {'k1': 1, 'k2': 2}} `\n```\n\n#### Literals and Enums[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#literals-and-enums \"Permanent link\")\n\nCLI argument parsing of literals and enums are converted into CLI choices.\n\n```\n`import sys from enum import IntEnum from typing import Literal from pydantic_settings import BaseSettings class Fruit(IntEnum): pear = 0 kiwi = 1 lime = 2 class Settings(BaseSettings, cli_parse_args=True): fruit: Fruit pet: Literal['dog', 'cat', 'bird'] sys.argv = ['example.py', '--fruit', 'lime', '--pet', 'cat'] print(Settings().model_dump()) #> {'fruit': <Fruit.lime: 2>, 'pet': 'cat'} `\n```\n\n#### Aliases[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#aliases \"Permanent link\")\n\nPydantic field aliases are added as CLI argument aliases. Aliases of length one are converted into short options.\n\n```\n`import sys from pydantic import AliasChoices, AliasPath, Field from pydantic_settings import BaseSettings class User(BaseSettings, cli_parse_args=True): first_name: str = Field( validation_alias=AliasChoices('f', 'fname', AliasPath('name', 0)) ) last_name: str = Field( validation_alias=AliasChoices('l', 'lname', AliasPath('name', 1)) ) sys.argv = ['example.py', '--fname', 'John', '--lname', 'Doe'] print(User().model_dump()) #> {'first_name': 'John', 'last_name': 'Doe'} sys.argv = ['example.py', '-f', 'John', '-l', 'Doe'] print(User().model_dump()) #> {'first_name': 'John', 'last_name': 'Doe'} sys.argv = ['example.py', '--name', 'John,Doe'] print(User().model_dump()) #> {'first_name': 'John', 'last_name': 'Doe'} sys.argv = ['example.py', '--name', 'John', '--lname', 'Doe'] print(User().model_dump()) #> {'first_name': 'John', 'last_name': 'Doe'} `\n```\n\n### Subcommands and Positional Arguments[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#subcommands-and-positional-arguments \"Permanent link\")\n\nSubcommands and positional arguments are expressed using the `CliSubCommand` and `CliPositionalArg` annotations. These annotations can only be applied to required fields (i.e. fields that do not have a default value). Furthermore, subcommands must be a valid type derived from either a pydantic `BaseModel` or pydantic.dataclasses `dataclass`.\n\nParsed subcommands can be retrieved from model instances using the `get_subcommand` utility function. If a subcommand is not required, set the `is_required` flag to `False` to disable raising an error if no subcommand is found.\n\nNote\n\nCLI settings subcommands are limited to a single subparser per model. In other words, all subcommands for a model are grouped under a single subparser; it does not allow for multiple subparsers with each subparser having its own set of subcommands. For more information on subparsers, see [argparse subcommands](https://docs.python.org/3/library/argparse.html#sub-commands).\n\nNote\n\n`CliSubCommand` and `CliPositionalArg` are always case sensitive.\n\n```\n`import sys from pydantic import BaseModel from pydantic_settings import ( BaseSettings, CliPositionalArg, CliSubCommand, SettingsError, get_subcommand, ) class Init(BaseModel): directory: CliPositionalArg[str] class Clone(BaseModel): repository: CliPositionalArg[str] directory: CliPositionalArg[str] class Git(BaseSettings, cli_parse_args=True, cli_exit_on_error=False): clone: CliSubCommand[Clone] init: CliSubCommand[Init] # Run without subcommands sys.argv = ['example.py'] cmd = Git() assert cmd.model_dump() == {'clone': None, 'init': None} try: # Will raise an error since no subcommand was provided get_subcommand(cmd).model_dump() except SettingsError as err: assert str(err) == 'Error: CLI subcommand is required {clone, init}' # Will not raise an error since subcommand is not required assert get_subcommand(cmd, is_required=False) is None # Run the clone subcommand sys.argv = ['example.py', 'clone', 'repo', 'dest'] cmd = Git() assert cmd.model_dump() == { 'clone': {'repository': 'repo', 'directory': 'dest'}, 'init': None, } # Returns the subcommand model instance (in this case, 'clone') assert get_subcommand(cmd).model_dump() == { 'directory': 'dest', 'repository': 'repo', } `\n```\n\nThe `CliSubCommand` and `CliPositionalArg` annotations also support union operations and aliases. For unions of Pydantic models, it is important to remember the [nuances](https://docs.pydantic.dev/latest/concepts/unions/) that can arise during validation. Specifically, for unions of subcommands that are identical in content, it is recommended to break them out into separate `CliSubCommand` fields to avoid any complications. Lastly, the derived subcommand names from unions will be the names of the Pydantic model classes themselves.\n\nWhen assigning aliases to `CliSubCommand` or `CliPositionalArg` fields, only a single alias can be assigned. For non-union subcommands, aliasing will change the displayed help text and subcommand name. Conversely, for union subcommands, aliasing will have no tangible effect from the perspective of the CLI settings source. Lastly, for positional arguments, aliasing will change the CLI help text displayed for the field.\n\n```\n`import sys from typing import Union from pydantic import BaseModel, Field from pydantic_settings import ( BaseSettings, CliPositionalArg, CliSubCommand, get_subcommand, ) class Alpha(BaseModel): \"\"\"Apha Help\"\"\" cmd_alpha: CliPositionalArg[str] = Field(alias='alpha-cmd') class Beta(BaseModel): \"\"\"Beta Help\"\"\" opt_beta: str = Field(alias='opt-beta') class Gamma(BaseModel): \"\"\"Gamma Help\"\"\" opt_gamma: str = Field(alias='opt-gamma') class Root(BaseSettings, cli_parse_args=True, cli_exit_on_error=False): alpha_or_beta: CliSubCommand[Union[Alpha, Beta]] = Field(alias='alpha-or-beta-cmd') gamma: CliSubCommand[Gamma] = Field(alias='gamma-cmd') sys.argv = ['example.py', 'Alpha', 'hello'] assert get_subcommand(Root()).model_dump() == {'cmd_alpha': 'hello'} sys.argv = ['example.py', 'Beta', '--opt-beta=hey'] assert get_subcommand(Root()).model_dump() == {'opt_beta': 'hey'} sys.argv = ['example.py', 'gamma-cmd', '--opt-gamma=hi'] assert get_subcommand(Root()).model_dump() == {'opt_gamma': 'hi'} `\n```\n\n### Creating CLI Applications[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#creating-cli-applications \"Permanent link\")\n\nThe `CliApp` class provides two utility methods, `CliApp.run` and `CliApp.run_subcommand`, that can be used to run a Pydantic `BaseSettings`, `BaseModel`, or `pydantic.dataclasses.dataclass` as a CLI application. Primarily, the methods provide structure for running `cli_cmd` methods associated with models.\n\n`CliApp.run` can be used in directly providing the `cli_args` to be parsed, and will run the model `cli_cmd` method (if defined) after instantiation:\n\n```\n`from pydantic_settings import BaseSettings, CliApp class Settings(BaseSettings): this_foo: str def cli_cmd(self) -> None: # Print the parsed data print(self.model_dump()) #> {'this_foo': 'is such a foo'} # Update the parsed data showing cli_cmd ran self.this_foo = 'ran the foo cli cmd' s = CliApp.run(Settings, cli_args=['--this_foo', 'is such a foo']) print(s.model_dump()) #> {'this_foo': 'ran the foo cli cmd'} `\n```\n\nSimilarly, the `CliApp.run_subcommand` can be used in recursive fashion to run the `cli_cmd` method of a subcommand:\n\n```\n`from pydantic import BaseModel from pydantic_settings import CliApp, CliPositionalArg, CliSubCommand class Init(BaseModel): directory: CliPositionalArg[str] def cli_cmd(self) -> None: print(f'git init \"{self.directory}\"') #> git init \"dir\" self.directory = 'ran the git init cli cmd' class Clone(BaseModel): repository: CliPositionalArg[str] directory: CliPositionalArg[str] def cli_cmd(self) -> None: print(f'git clone from \"{self.repository}\" into \"{self.directory}\"') self.directory = 'ran the clone cli cmd' class Git(BaseModel): clone: CliSubCommand[Clone] init: CliSubCommand[Init] def cli_cmd(self) -> None: CliApp.run_subcommand(self) cmd = CliApp.run(Git, cli_args=['init', 'dir']) assert cmd.model_dump() == { 'clone': None, 'init': {'directory': 'ran the git init cli cmd'}, } `\n```\n\nNote\n\nUnlike `CliApp.run`, `CliApp.run_subcommand` requires the subcommand model to have a defined `cli_cmd` method.\n\nFor `BaseModel` and `pydantic.dataclasses.dataclass` types, `CliApp.run` will internally use the following `BaseSettings` configuration defaults:\n\n  * `nested_model_default_partial_update=True`\n  * `case_sensitive=True`\n  * `cli_hide_none_type=True`\n  * `cli_avoid_json=True`\n  * `cli_enforce_required=True`\n  * `cli_implicit_flags=True`\n  * `cli_kebab_case=True`\n\n\n\n### Mutually Exclusive Groups[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#mutually-exclusive-groups \"Permanent link\")\n\nCLI mutually exclusive groups can be created by inheriting from the `CliMutuallyExclusiveGroup` class.\n\nNote\n\nA `CliMutuallyExclusiveGroup` cannot be used in a union or contain nested models.\n\n```\n`from typing import Optional from pydantic import BaseModel from pydantic_settings import CliApp, CliMutuallyExclusiveGroup, SettingsError class Circle(CliMutuallyExclusiveGroup): radius: Optional[float] = None diameter: Optional[float] = None perimeter: Optional[float] = None class Settings(BaseModel): circle: Circle try: CliApp.run( Settings, cli_args=['--circle.radius=1', '--circle.diameter=2'], cli_exit_on_error=False, ) except SettingsError as e: print(e) \"\"\" error parsing CLI: argument --circle.diameter: not allowed with argument --circle.radius \"\"\" `\n```\n\n### Customizing the CLI Experience[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#customizing-the-cli-experience \"Permanent link\")\n\nThe below flags can be used to customise the CLI experience to your needs.\n\n#### Change the Displayed Program Name[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-the-displayed-program-name \"Permanent link\")\n\nChange the default program name displayed in the help text usage by setting `cli_prog_name`. By default, it will derive the name of the currently executing program from `sys.argv[0]`, just like argparse.\n\n```\n`import sys from pydantic_settings import BaseSettings class Settings(BaseSettings, cli_parse_args=True, cli_prog_name='appdantic'): pass try: sys.argv = ['example.py', '--help'] Settings() except SystemExit as e: print(e) #> 0 \"\"\" usage: appdantic [-h] options: -h, --help show this help message and exit \"\"\" `\n```\n\n#### CLI Boolean Flags[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#cli-boolean-flags \"Permanent link\")\n\nChange whether boolean fields should be explicit or implicit by default using the `cli_implicit_flags` setting. By default, boolean fields are \"explicit\", meaning a boolean value must be explicitly provided on the CLI, e.g. `--flag=True`. Conversely, boolean fields that are \"implicit\" derive the value from the flag itself, e.g. `--flag,--no-flag`, which removes the need for an explicit value to be passed.\n\nAdditionally, the provided `CliImplicitFlag` and `CliExplicitFlag` annotations can be used for more granular control when necessary.\n\nNote\n\nFor `python < 3.9` the `--no-flag` option is not generated due to an underlying `argparse` limitation.\n\nNote\n\nFor `python < 3.9` the `CliImplicitFlag` and `CliExplicitFlag` annotations can only be applied to optional boolean fields.\n\n```\n`from pydantic_settings import BaseSettings, CliExplicitFlag, CliImplicitFlag class ExplicitSettings(BaseSettings, cli_parse_args=True): \"\"\"Boolean fields are explicit by default.\"\"\" explicit_req: bool \"\"\" --explicit_req bool (required) \"\"\" explicit_opt: bool = False \"\"\" --explicit_opt bool (default: False) \"\"\" # Booleans are explicit by default, so must override implicit flags with annotation implicit_req: CliImplicitFlag[bool] \"\"\" --implicit_req, --no-implicit_req (required) \"\"\" implicit_opt: CliImplicitFlag[bool] = False \"\"\" --implicit_opt, --no-implicit_opt (default: False) \"\"\" class ImplicitSettings(BaseSettings, cli_parse_args=True, cli_implicit_flags=True): \"\"\"With cli_implicit_flags=True, boolean fields are implicit by default.\"\"\" # Booleans are implicit by default, so must override explicit flags with annotation explicit_req: CliExplicitFlag[bool] \"\"\" --explicit_req bool (required) \"\"\" explicit_opt: CliExplicitFlag[bool] = False \"\"\" --explicit_opt bool (default: False) \"\"\" implicit_req: bool \"\"\" --implicit_req, --no-implicit_req (required) \"\"\" implicit_opt: bool = False \"\"\" --implicit_opt, --no-implicit_opt (default: False) \"\"\" `\n```\n\n#### Ignore Unknown Arguments[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#ignore-unknown-arguments \"Permanent link\")\n\nChange whether to ignore unknown CLI arguments and only parse known ones using `cli_ignore_unknown_args`. By default, the CLI does not ignore any args.\n\n```\n`import sys from pydantic_settings import BaseSettings class Settings(BaseSettings, cli_parse_args=True, cli_ignore_unknown_args=True): good_arg: str sys.argv = ['example.py', '--bad-arg=bad', 'ANOTHER_BAD_ARG', '--good_arg=hello world'] print(Settings().model_dump()) #> {'good_arg': 'hello world'} `\n```\n\n#### CLI Kebab Case for Arguments[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#cli-kebab-case-for-arguments \"Permanent link\")\n\nChange whether CLI arguments should use kebab case by enabling `cli_kebab_case`.\n\n```\n`import sys from pydantic import Field from pydantic_settings import BaseSettings class Settings(BaseSettings, cli_parse_args=True, cli_kebab_case=True): my_option: str = Field(description='will show as kebab case on CLI') try: sys.argv = ['example.py', '--help'] Settings() except SystemExit as e: print(e) #> 0 \"\"\" usage: example.py [-h] [--my-option str] options: -h, --help show this help message and exit --my-option str will show as kebab case on CLI (required) \"\"\" `\n```\n\n#### Change Whether CLI Should Exit on Error[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-whether-cli-should-exit-on-error \"Permanent link\")\n\nChange whether the CLI internal parser will exit on error or raise a `SettingsError` exception by using `cli_exit_on_error`. By default, the CLI internal parser will exit on error.\n\n```\n`import sys from pydantic_settings import BaseSettings, SettingsError class Settings(BaseSettings, cli_parse_args=True, cli_exit_on_error=False): ... try: sys.argv = ['example.py', '--bad-arg'] Settings() except SettingsError as e: print(e) #> error parsing CLI: unrecognized arguments: --bad-arg `\n```\n\n#### Enforce Required Arguments at CLI[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#enforce-required-arguments-at-cli \"Permanent link\")\n\nPydantic settings is designed to pull values in from various sources when instantating a model. This means a field that is required is not strictly required from any single source (e.g. the CLI). Instead, all that matters is that one of the sources provides the required value.\n\nHowever, if your use case [aligns more with #2](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#command-line-support), using Pydantic models to define CLIs, you will likely want required fields to be _strictly required at the CLI_. We can enable this behavior by using `cli_enforce_required`.\n\n```\n`import os import sys from pydantic import Field from pydantic_settings import BaseSettings, SettingsError class Settings( BaseSettings, cli_parse_args=True, cli_enforce_required=True, cli_exit_on_error=False, ): my_required_field: str = Field(description='a top level required field') os.environ['MY_REQUIRED_FIELD'] = 'hello from environment' try: sys.argv = ['example.py'] Settings() except SettingsError as e: print(e) #> error parsing CLI: the following arguments are required: --my_required_field `\n```\n\n#### Change the None Type Parse String[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-the-none-type-parse-string \"Permanent link\")\n\nChange the CLI string value that will be parsed (e.g. \"null\", \"void\", \"None\", etc.) into `None` by setting `cli_parse_none_str`. By default it will use the `env_parse_none_str` value if set. Otherwise, it will default to \"null\" if `cli_avoid_json` is `False`, and \"None\" if `cli_avoid_json` is `True`.\n\n```\n`import sys from typing import Optional from pydantic import Field from pydantic_settings import BaseSettings class Settings(BaseSettings, cli_parse_args=True, cli_parse_none_str='void'): v1: Optional[int] = Field(description='the top level v0 option') sys.argv = ['example.py', '--v1', 'void'] print(Settings().model_dump()) #> {'v1': None} `\n```\n\n#### Hide None Type Values[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#hide-none-type-values \"Permanent link\")\n\nHide `None` values from the CLI help text by enabling `cli_hide_none_type`.\n\n```\n`import sys from typing import Optional from pydantic import Field from pydantic_settings import BaseSettings class Settings(BaseSettings, cli_parse_args=True, cli_hide_none_type=True): v0: Optional[str] = Field(description='the top level v0 option') try: sys.argv = ['example.py', '--help'] Settings() except SystemExit as e: print(e) #> 0 \"\"\" usage: example.py [-h] [--v0 str] options: -h, --help show this help message and exit --v0 str the top level v0 option (required) \"\"\" `\n```\n\n#### Avoid Adding JSON CLI Options[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#avoid-adding-json-cli-options \"Permanent link\")\n\nAvoid adding complex fields that result in JSON strings at the CLI by enabling `cli_avoid_json`.\n\n```\n`import sys from pydantic import BaseModel, Field from pydantic_settings import BaseSettings class SubModel(BaseModel): v1: int = Field(description='the sub model v1 option') class Settings(BaseSettings, cli_parse_args=True, cli_avoid_json=True): sub_model: SubModel = Field( description='The help summary for SubModel related options' ) try: sys.argv = ['example.py', '--help'] Settings() except SystemExit as e: print(e) #> 0 \"\"\" usage: example.py [-h] [--sub_model.v1 int] options: -h, --help show this help message and exit sub_model options: The help summary for SubModel related options --sub_model.v1 int the sub model v1 option (required) \"\"\" `\n```\n\n#### Use Class Docstring for Group Help Text[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#use-class-docstring-for-group-help-text \"Permanent link\")\n\nBy default, when populating the group help text for nested models it will pull from the field descriptions. Alternatively, we can also configure CLI settings to pull from the class docstring instead.\n\nNote\n\nIf the field is a union of nested models the group help text will always be pulled from the field description; even if `cli_use_class_docs_for_groups` is set to `True`.\n\n```\n`import sys from pydantic import BaseModel, Field from pydantic_settings import BaseSettings class SubModel(BaseModel): \"\"\"The help text from the class docstring.\"\"\" v1: int = Field(description='the sub model v1 option') class Settings(BaseSettings, cli_parse_args=True, cli_use_class_docs_for_groups=True): \"\"\"My application help text.\"\"\" sub_model: SubModel = Field(description='The help text from the field description') try: sys.argv = ['example.py', '--help'] Settings() except SystemExit as e: print(e) #> 0 \"\"\" usage: example.py [-h] [--sub_model JSON] [--sub_model.v1 int] My application help text. options: -h, --help show this help message and exit sub_model options: The help text from the class docstring. --sub_model JSON set sub_model from JSON string --sub_model.v1 int the sub model v1 option (required) \"\"\" `\n```\n\n#### Change the CLI Flag Prefix Character[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-the-cli-flag-prefix-character \"Permanent link\")\n\nChange The CLI flag prefix character used in CLI optional arguments by settings `cli_flag_prefix_char`.\n\n```\n`import sys from pydantic import AliasChoices, Field from pydantic_settings import BaseSettings class Settings(BaseSettings, cli_parse_args=True, cli_flag_prefix_char='+'): my_arg: str = Field(validation_alias=AliasChoices('m', 'my-arg')) sys.argv = ['example.py', '++my-arg', 'hi'] print(Settings().model_dump()) #> {'my_arg': 'hi'} sys.argv = ['example.py', '+m', 'hi'] print(Settings().model_dump()) #> {'my_arg': 'hi'} `\n```\n\n#### Suppressing Fields from CLI Help Text[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#suppressing-fields-from-cli-help-text \"Permanent link\")\n\nTo suppress a field from the CLI help text, the `CliSuppress` annotation can be used for field types, or the `CLI_SUPPRESS` string constant can be used for field descriptions.\n\n```\n`import sys from pydantic import Field from pydantic_settings import CLI_SUPPRESS, BaseSettings, CliSuppress class Settings(BaseSettings, cli_parse_args=True): \"\"\"Suppress fields from CLI help text.\"\"\" field_a: CliSuppress[int] = 0 field_b: str = Field(default=1, description=CLI_SUPPRESS) try: sys.argv = ['example.py', '--help'] Settings() except SystemExit as e: print(e) #> 0 \"\"\" usage: example.py [-h] Suppress fields from CLI help text. options: -h, --help show this help message and exit \"\"\" `\n```\n\n### Integrating with Existing Parsers[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#integrating-with-existing-parsers \"Permanent link\")\n\nA CLI settings source can be integrated with existing parsers by overriding the default CLI settings source with a user defined one that specifies the `root_parser` object.\n\n```\n`import sys from argparse import ArgumentParser from pydantic_settings import BaseSettings, CliApp, CliSettingsSource parser = ArgumentParser() parser.add_argument('--food', choices=['pear', 'kiwi', 'lime']) class Settings(BaseSettings): name: str = 'Bob' # Set existing `parser` as the `root_parser` object for the user defined settings source cli_settings = CliSettingsSource(Settings, root_parser=parser) # Parse and load CLI settings from the command line into the settings source. sys.argv = ['example.py', '--food', 'kiwi', '--name', 'waldo'] s = CliApp.run(Settings, cli_settings_source=cli_settings) print(s.model_dump()) #> {'name': 'waldo'} # Load CLI settings from pre-parsed arguments. i.e., the parsing occurs elsewhere and we # just need to load the pre-parsed args into the settings source. parsed_args = parser.parse_args(['--food', 'kiwi', '--name', 'ralph']) s = CliApp.run(Settings, cli_args=parsed_args, cli_settings_source=cli_settings) print(s.model_dump()) #> {'name': 'ralph'} `\n```\n\nA `CliSettingsSource` connects with a `root_parser` object by using parser methods to add `settings_cls` fields as command line arguments. The `CliSettingsSource` internal parser representation is based on the `argparse` library, and therefore, requires parser methods that support the same attributes as their `argparse` counterparts. The available parser methods that can be customised, along with their argparse counterparts (the defaults), are listed below:\n\n  * `parse_args_method` - (`argparse.ArgumentParser.parse_args`)\n  * `add_argument_method` - (`argparse.ArgumentParser.add_argument`)\n  * `add_argument_group_method` - (`argparse.ArgumentParser.add_argument_group`)\n  * `add_parser_method` - (`argparse._SubParsersAction.add_parser`)\n  * `add_subparsers_method` - (`argparse.ArgumentParser.add_subparsers`)\n  * `formatter_class` - (`argparse.RawDescriptionHelpFormatter`)\n\n\n\nFor a non-argparse parser the parser methods can be set to `None` if not supported. The CLI settings will only raise an error when connecting to the root parser if a parser method is necessary but set to `None`.\n\nNote\n\nThe `formatter_class` is only applied to subcommands. The `CliSettingsSource` never touches or modifies any of the external parser settings to avoid breaking changes. Since subcommands reside on their own internal parser trees, we can safely apply the `formatter_class` settings without breaking the external parser logic.\n\n## Secrets[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#secrets \"Permanent link\")\n\nPlacing secret values in files is a common pattern to provide sensitive configuration to an application.\n\nA secret file follows the same principal as a dotenv file except it only contains a single value and the file name is used as the key. A secret file will look like the following:\n\n/var/run/database_password```\n`super_secret_database_password `\n```\n\nOnce you have your secret files, _pydantic_ supports loading it in two ways:\n\n  1. Setting the `secrets_dir` on `model_config` in a `BaseSettings` class to the directory where your secret files are stored. \n\n```\n`from pydantic_settings import BaseSettings, SettingsConfigDict class Settings(BaseSettings): model_config = SettingsConfigDict(secrets_dir='/var/run') database_password: str `\n```\n\n  2. Instantiating the `BaseSettings` derived class with the `_secrets_dir` keyword argument: \n\n```\n`settings = Settings(_secrets_dir='/var/run') `\n```\n\n\n\n\nIn either case, the value of the passed argument can be any valid directory, either absolute or relative to the current working directory. **Note that a non existent directory will only generate a warning**. From there, _pydantic_ will handle everything for you by loading in your variables and validating them.\n\nEven when using a secrets directory, _pydantic_ will still read environment variables from a dotenv file or the environment, **a dotenv file and environment variables will always take priority over values loaded from the secrets directory**.\n\nPassing a file path via the `_secrets_dir` keyword argument on instantiation (method 2) will override the value (if any) set on the `model_config` class.\n\nIf you need to load settings from multiple secrets directories, you can pass multiple paths as a tuple or list. Just like for `env_file`, values from subsequent paths override previous ones.\n\n```\n`from pydantic_settings import BaseSettings, SettingsConfigDict class Settings(BaseSettings): # files in '/run/secrets' take priority over '/var/run' model_config = SettingsConfigDict(secrets_dir=('/var/run', '/run/secrets')) database_password: str `\n```\n\nIf any of `secrets_dir` is missing, it is ignored, and warning is shown. If any of `secrets_dir` is a file, error is raised.\n\n### Use Case: Docker Secrets[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#use-case-docker-secrets \"Permanent link\")\n\nDocker Secrets can be used to provide sensitive configuration to an application running in a Docker container. To use these secrets in a _pydantic_ application the process is simple. More information regarding creating, managing and using secrets in Docker see the official [Docker documentation](https://docs.docker.com/engine/reference/commandline/secret/).\n\nFirst, define your `Settings` class with a `SettingsConfigDict` that specifies the secrets directory.\n\n```\n`from pydantic_settings import BaseSettings, SettingsConfigDict class Settings(BaseSettings): model_config = SettingsConfigDict(secrets_dir='/run/secrets') my_secret_data: str `\n```\n\nNote\n\nBy default [Docker uses `/run/secrets`](https://docs.docker.com/engine/swarm/secrets/#how-docker-manages-secrets) as the target mount point. If you want to use a different location, change `Config.secrets_dir` accordingly.\n\nThen, create your secret via the Docker CLI \n\n```\n`printf\"This is a secret\"|dockersecretcreatemy_secret_data- `\n```\n\nLast, run your application inside a Docker container and supply your newly created secret \n\n```\n`dockerservicecreate--namepydantic-with-secrets--secretmy_secret_datapydantic-app:latest `\n```\n\n## Azure Key Vault[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#azure-key-vault \"Permanent link\")\n\nYou must set two parameters:\n\n  * `url`: For example, `https://my-resource.vault.azure.net/`.\n  * `credential`: If you use `DefaultAzureCredential`, in local you can execute `az login` to get your identity credentials. The identity must have a role assignment (the recommended one is `Key Vault Secrets User`), so you can access the secrets.\n\n\n\nYou must have the same naming convention in the field name as in the Key Vault secret name. For example, if the secret is named `SqlServerPassword`, the field name must be the same. You can use an alias too.\n\nIn Key Vault, nested models are supported with the `--` separator. For example, `SqlServer--Password`.\n\nKey Vault arrays (e.g. `MySecret--0`, `MySecret--1`) are not supported.\n\n```\n`import os from typing import Tuple, Type from azure.identity import DefaultAzureCredential from pydantic import BaseModel from pydantic_settings import ( AzureKeyVaultSettingsSource, BaseSettings, PydanticBaseSettingsSource, ) class SubModel(BaseModel): a: str class AzureKeyVaultSettings(BaseSettings): foo: str bar: int sub: SubModel @classmethod def settings_customise_sources( cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource, ) -> Tuple[PydanticBaseSettingsSource, ...]: az_key_vault_settings = AzureKeyVaultSettingsSource( settings_cls, os.environ['AZURE_KEY_VAULT_URL'], DefaultAzureCredential(), ) return ( init_settings, env_settings, dotenv_settings, file_secret_settings, az_key_vault_settings, ) `\n```\n\n## Other settings source[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#other-settings-source \"Permanent link\")\n\nOther settings sources are available for common configuration files:\n\n  * `JsonConfigSettingsSource` using `json_file` and `json_file_encoding` arguments\n  * `PyprojectTomlConfigSettingsSource` using _(optional)_ `pyproject_toml_depth` and _(optional)_ `pyproject_toml_table_header` arguments\n  * `TomlConfigSettingsSource` using `toml_file` argument\n  * `YamlConfigSettingsSource` using `yaml_file` and yaml_file_encoding arguments\n\n\n\nYou can also provide multiple files by providing a list of path: \n\n```\n`toml_file = ['config.default.toml', 'config.custom.toml'] `\n```\n\nTo use them, you can use the same mechanism described [here](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#customise-settings-sources)\n\n```\n`from typing import Tuple, Type from pydantic import BaseModel from pydantic_settings import ( BaseSettings, PydanticBaseSettingsSource, SettingsConfigDict, TomlConfigSettingsSource, ) class Nested(BaseModel): nested_field: str class Settings(BaseSettings): foobar: str nested: Nested model_config = SettingsConfigDict(toml_file='config.toml') @classmethod def settings_customise_sources( cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource, ) -> Tuple[PydanticBaseSettingsSource, ...]: return (TomlConfigSettingsSource(settings_cls),) `\n```\n\nThis will be able to read the following \"config.toml\" file, located in your working directory:\n\n```\n`foobar=\"Hello\" [nested] nested_field=\"world!\" `\n```\n\n### pyproject.toml[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#pyprojecttoml \"Permanent link\")\n\n\"pyproject.toml\" is a standardized file for providing configuration values in Python projects. [PEP 518](https://peps.python.org/pep-0518/#tool-table) defines a `[tool]` table that can be used to provide arbitrary tool configuration. While encouraged to use the `[tool]` table, `PyprojectTomlConfigSettingsSource` can be used to load variables from any location with in \"pyproject.toml\" file.\n\nThis is controlled by providing `SettingsConfigDict(pyproject_toml_table_header=tuple[str, ...])` where the value is a tuple of header parts. By default, `pyproject_toml_table_header=('tool', 'pydantic-settings')` which will load variables from the `[tool.pydantic-settings]` table.\n\n```\n`from typing import Tuple, Type from pydantic_settings import ( BaseSettings, PydanticBaseSettingsSource, PyprojectTomlConfigSettingsSource, SettingsConfigDict, ) class Settings(BaseSettings): \"\"\"Example loading values from the table used by default.\"\"\" field: str @classmethod def settings_customise_sources( cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource, ) -> Tuple[PydanticBaseSettingsSource, ...]: return (PyprojectTomlConfigSettingsSource(settings_cls),) class SomeTableSettings(Settings): \"\"\"Example loading values from a user defined table.\"\"\" model_config = SettingsConfigDict( pyproject_toml_table_header=('tool', 'some-table') ) class RootSettings(Settings): \"\"\"Example loading values from the root of a pyproject.toml file.\"\"\" model_config = SettingsConfigDict(extra='ignore', pyproject_toml_table_header=()) `\n```\n\nThis will be able to read the following \"pyproject.toml\" file, located in your working directory, resulting in `Settings(field='default-table')`, `SomeTableSettings(field='some-table')`, & `RootSettings(field='root')`:\n\n```\n`field=\"root\" [tool.pydantic-settings] field=\"default-table\" [tool.some-table] field=\"some-table\" `\n```\n\nBy default, `PyprojectTomlConfigSettingsSource` will only look for a \"pyproject.toml\" in the your current working directory. However, there are two options to change this behavior.\n\n  * `SettingsConfigDict(pyproject_toml_depth=<int>)` can be provided to check `<int>` number of directories **up** in the directory tree for a \"pyproject.toml\" if one is not found in the current working directory. By default, no parent directories are checked.\n  * An explicit file path can be provided to the source when it is instantiated (e.g. `PyprojectTomlConfigSettingsSource(settings_cls, Path('~/.config').resolve() / 'pyproject.toml')`). If a file path is provided this way, it will be treated as absolute (no other locations are checked).\n\n\n\n```\n`from pathlib import Path from typing import Tuple, Type from pydantic_settings import ( BaseSettings, PydanticBaseSettingsSource, PyprojectTomlConfigSettingsSource, SettingsConfigDict, ) class DiscoverSettings(BaseSettings): \"\"\"Example of discovering a pyproject.toml in parent directories in not in `Path.cwd()`.\"\"\" model_config = SettingsConfigDict(pyproject_toml_depth=2) @classmethod def settings_customise_sources( cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource, ) -> Tuple[PydanticBaseSettingsSource, ...]: return (PyprojectTomlConfigSettingsSource(settings_cls),) class ExplicitFilePathSettings(BaseSettings): \"\"\"Example of explicitly providing the path to the file to load.\"\"\" field: str @classmethod def settings_customise_sources( cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource, ) -> Tuple[PydanticBaseSettingsSource, ...]: return ( PyprojectTomlConfigSettingsSource( settings_cls, Path('~/.config').resolve() / 'pyproject.toml' ), ) `\n```\n\n## Field value priority[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#field-value-priority \"Permanent link\")\n\nIn the case where a value is specified for the same `Settings` field in multiple ways, the selected value is determined as follows (in descending order of priority):\n\n  1. If `cli_parse_args` is enabled, arguments passed in at the CLI.\n  2. Arguments passed to the `Settings` class initialiser.\n  3. Environment variables, e.g. `my_prefix_special_function` as described above.\n  4. Variables loaded from a dotenv (`.env`) file.\n  5. Variables loaded from the secrets directory.\n  6. The default field values for the `Settings` model.\n\n\n\n## Customise settings sources[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#customise-settings-sources \"Permanent link\")\n\nIf the default order of priority doesn't match your needs, it's possible to change it by overriding the `settings_customise_sources` method of your `Settings` .\n\n`settings_customise_sources` takes four callables as arguments and returns any number of callables as a tuple. In turn these callables are called to build the inputs to the fields of the settings class.\n\nEach callable should take an instance of the settings class as its sole argument and return a `dict`.\n\n### Changing Priority[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#changing-priority \"Permanent link\")\n\nThe order of the returned callables decides the priority of inputs; first item is the highest priority.\n\n```\n`from typing import Tuple, Type from pydantic import PostgresDsn from pydantic_settings import BaseSettings, PydanticBaseSettingsSource class Settings(BaseSettings): database_dsn: PostgresDsn @classmethod def settings_customise_sources( cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource, ) -> Tuple[PydanticBaseSettingsSource, ...]: return env_settings, init_settings, file_secret_settings print(Settings(database_dsn='postgres://postgres@localhost:5432/kwargs_db')) #> database_dsn=MultiHostUrl('postgres://postgres@localhost:5432/kwargs_db') `\n```\n\nBy flipping `env_settings` and `init_settings`, environment variables now have precedence over `__init__` kwargs.\n\n### Adding sources[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#adding-sources \"Permanent link\")\n\nAs explained earlier, _pydantic_ ships with multiples built-in settings sources. However, you may occasionally need to add your own custom sources, `settings_customise_sources` makes this very easy:\n\n```\n`import json from pathlib import Path from typing import Any, Dict, Tuple, Type from pydantic.fields import FieldInfo from pydantic_settings import ( BaseSettings, PydanticBaseSettingsSource, SettingsConfigDict, ) class JsonConfigSettingsSource(PydanticBaseSettingsSource): \"\"\" A simple settings source class that loads variables from a JSON file at the project's root. Here we happen to choose to use the `env_file_encoding` from Config when reading `config.json` \"\"\" def get_field_value( self, field: FieldInfo, field_name: str ) -> Tuple[Any, str, bool]: encoding = self.config.get('env_file_encoding') file_content_json = json.loads( Path('tests/example_test_config.json').read_text(encoding) ) field_value = file_content_json.get(field_name) return field_value, field_name, False def prepare_field_value( self, field_name: str, field: FieldInfo, value: Any, value_is_complex: bool ) -> Any: return value def __call__(self) -> Dict[str, Any]: d: Dict[str, Any] = {} for field_name, field in self.settings_cls.model_fields.items(): field_value, field_key, value_is_complex = self.get_field_value( field, field_name ) field_value = self.prepare_field_value( field_name, field, field_value, value_is_complex ) if field_value is not None: d[field_key] = field_value return d class Settings(BaseSettings): model_config = SettingsConfigDict(env_file_encoding='utf-8') foobar: str @classmethod def settings_customise_sources( cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource, ) -> Tuple[PydanticBaseSettingsSource, ...]: return ( init_settings, JsonConfigSettingsSource(settings_cls), env_settings, file_secret_settings, ) print(Settings()) #> foobar='test' `\n```\n\n#### Accesing the result of previous sources[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#accesing-the-result-of-previous-sources \"Permanent link\")\n\nEach source of settings can access the output of the previous ones.\n\n```\n`from typing import Any, Dict, Tuple from pydantic.fields import FieldInfo from pydantic_settings import PydanticBaseSettingsSource class MyCustomSource(PydanticBaseSettingsSource): def get_field_value( self, field: FieldInfo, field_name: str ) -> Tuple[Any, str, bool]: ... def __call__(self) -> Dict[str, Any]: # Retrieve the aggregated settings from previous sources current_state = self.current_state current_state.get('some_setting') # Retrive settings from all sources individually # self.settings_sources_data[\"SettingsSourceName\"]: Dict[str, Any] settings_sources_data = self.settings_sources_data settings_sources_data['SomeSettingsSource'].get('some_setting') # Your code here... `\n```\n\n### Removing sources[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#removing-sources \"Permanent link\")\n\nYou might also want to disable a source:\n\n```\n`from typing import Tuple, Type from pydantic import ValidationError from pydantic_settings import BaseSettings, PydanticBaseSettingsSource class Settings(BaseSettings): my_api_key: str @classmethod def settings_customise_sources( cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource, ) -> Tuple[PydanticBaseSettingsSource, ...]: # here we choose to ignore arguments from init_settings return env_settings, file_secret_settings try: Settings(my_api_key='this is ignored') except ValidationError as exc_info: print(exc_info) \"\"\" 1 validation error for Settings my_api_key Field required [type=missing, input_value={}, input_type=dict] For further information visit https://errors.pydantic.dev/2/v/missing \"\"\" `\n```\n\n## In-place reloading[Â¶](https://docs.pydantic.dev/latest/concepts/pydantic_settings/#in-place-reloading \"Permanent link\")\n\nIn case you want to reload in-place an existing setting, you can do it by using its `__init__` method :\n\n```\n`import os from pydantic import Field from pydantic_settings import BaseSettings class Settings(BaseSettings): foo: str = Field('foo') mutable_settings = Settings() print(mutable_settings.foo) #> foo os.environ['foo'] = 'bar' print(mutable_settings.foo) #> foo mutable_settings.__init__() print(mutable_settings.foo) #> bar os.environ.pop('foo') mutable_settings.__init__() print(mutable_settings.foo) #> foo `\n```\n\nWas this page helpful? \n\nThanks for your feedback! \n\nThanks for your feedback! \n\nBack to top \n\nMade with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)\n",
    "content_quality_score": 0.8,
    "summary": null,
    "child_urls": [
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#settings-management",
        "https://docs.pydantic.dev/latest/",
        "https://docs.pydantic.dev/dev/",
        "https://docs.pydantic.dev/2.10/",
        "https://docs.pydantic.dev/2.9/",
        "https://docs.pydantic.dev/2.8/",
        "https://docs.pydantic.dev/2.7/",
        "https://docs.pydantic.dev/2.6/",
        "https://docs.pydantic.dev/2.5/",
        "https://docs.pydantic.dev/2.4/",
        "https://docs.pydantic.dev/2.3/",
        "https://docs.pydantic.dev/2.2/",
        "https://docs.pydantic.dev/2.1/",
        "https://docs.pydantic.dev/2.0/",
        "https://docs.pydantic.dev/1.10/",
        "https://docs.pydantic.dev/latest/concepts/models/",
        "https://docs.pydantic.dev/latest/api/base_model/",
        "https://docs.pydantic.dev/latest/internals/architecture/",
        "https://docs.pydantic.dev/latest/examples/files/",
        "https://docs.pydantic.dev/latest/errors/errors/",
        "https://docs.pydantic.dev/latest/integrations/logfire/",
        "https://docs.pydantic.dev/latest/pydantic_people/",
        "https://docs.pydantic.dev/latest/why/",
        "https://docs.pydantic.dev/latest/help_with_pydantic/",
        "https://docs.pydantic.dev/latest/install/",
        "https://docs.pydantic.dev/latest/migration/",
        "https://docs.pydantic.dev/latest/version-policy/",
        "https://docs.pydantic.dev/latest/contributing/",
        "https://docs.pydantic.dev/latest/changelog/",
        "https://docs.pydantic.dev/latest/concepts/fields/",
        "https://docs.pydantic.dev/latest/concepts/json_schema/",
        "https://docs.pydantic.dev/latest/concepts/json/",
        "https://docs.pydantic.dev/latest/concepts/types/",
        "https://docs.pydantic.dev/latest/concepts/unions/",
        "https://docs.pydantic.dev/latest/concepts/alias/",
        "https://docs.pydantic.dev/latest/concepts/config/",
        "https://docs.pydantic.dev/latest/concepts/serialization/",
        "https://docs.pydantic.dev/latest/concepts/validators/",
        "https://docs.pydantic.dev/latest/concepts/dataclasses/",
        "https://docs.pydantic.dev/latest/concepts/forward_annotations/",
        "https://docs.pydantic.dev/latest/concepts/strict_mode/",
        "https://docs.pydantic.dev/latest/concepts/type_adapter/",
        "https://docs.pydantic.dev/latest/concepts/validation_decorator/",
        "https://docs.pydantic.dev/latest/concepts/conversion_table/",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#installation",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#usage",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#validation-of-default-values",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#environment-variable-names",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#case-sensitivity",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#parsing-environment-variable-values",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#disabling-json-parsing",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#nested-model-default-partial-updates",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#dotenv-env-support",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#command-line-support",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#the-basics",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#lists",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#dictionaries",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#literals-and-enums",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#aliases",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#subcommands-and-positional-arguments",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#creating-cli-applications",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#mutually-exclusive-groups",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#customizing-the-cli-experience",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-the-displayed-program-name",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#cli-boolean-flags",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#ignore-unknown-arguments",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#cli-kebab-case-for-arguments",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-whether-cli-should-exit-on-error",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#enforce-required-arguments-at-cli",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-the-none-type-parse-string",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#hide-none-type-values",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#avoid-adding-json-cli-options",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#use-class-docstring-for-group-help-text",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#change-the-cli-flag-prefix-character",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#suppressing-fields-from-cli-help-text",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#integrating-with-existing-parsers",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#secrets",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#use-case-docker-secrets",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#azure-key-vault",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#other-settings-source",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#pyprojecttoml",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#field-value-priority",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#customise-settings-sources",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#changing-priority",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#adding-sources",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#accesing-the-result-of-previous-sources",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#removing-sources",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#in-place-reloading",
        "https://docs.pydantic.dev/latest/concepts/performance/",
        "https://docs.pydantic.dev/latest/concepts/experimental/",
        "https://docs.pydantic.dev/latest/api/root_model/",
        "https://docs.pydantic.dev/latest/api/dataclasses/",
        "https://docs.pydantic.dev/latest/api/type_adapter/",
        "https://docs.pydantic.dev/latest/api/validate_call/",
        "https://docs.pydantic.dev/latest/api/fields/",
        "https://docs.pydantic.dev/latest/api/aliases/",
        "https://docs.pydantic.dev/latest/api/config/",
        "https://docs.pydantic.dev/latest/api/json_schema/",
        "https://docs.pydantic.dev/latest/api/errors/",
        "https://docs.pydantic.dev/latest/api/functional_validators/",
        "https://docs.pydantic.dev/latest/api/functional_serializers/",
        "https://docs.pydantic.dev/latest/api/standard_library_types/",
        "https://docs.pydantic.dev/latest/api/types/",
        "https://docs.pydantic.dev/latest/api/networks/",
        "https://docs.pydantic.dev/latest/api/version/",
        "https://docs.pydantic.dev/latest/api/annotated_handlers/",
        "https://docs.pydantic.dev/latest/api/experimental/",
        "https://docs.pydantic.dev/latest/api/pydantic_core/",
        "https://docs.pydantic.dev/latest/api/pydantic_core_schema/",
        "https://docs.pydantic.dev/latest/api/pydantic_settings/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_color/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_country/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_payment/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_phone_numbers/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_routing_numbers/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_coordinate/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_mac_address/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_isbn/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_pendulum_dt/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_currency_code/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_language_code/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_script_code/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_semantic_version/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_timezone_name/",
        "https://docs.pydantic.dev/latest/api/pydantic_extra_types_ulid/",
        "https://docs.pydantic.dev/latest/internals/resolving_annotations/",
        "https://docs.pydantic.dev/latest/examples/requests/",
        "https://docs.pydantic.dev/latest/examples/queues/",
        "https://docs.pydantic.dev/latest/examples/orms/",
        "https://docs.pydantic.dev/latest/examples/custom_validators/",
        "https://docs.pydantic.dev/latest/errors/validation_errors/",
        "https://docs.pydantic.dev/latest/errors/usage_errors/",
        "https://docs.pydantic.dev/latest/integrations/mypy/",
        "https://docs.pydantic.dev/latest/integrations/pycharm/",
        "https://docs.pydantic.dev/latest/integrations/hypothesis/",
        "https://docs.pydantic.dev/latest/integrations/visual_studio_code/",
        "https://docs.pydantic.dev/latest/integrations/datamodel_code_generator/",
        "https://docs.pydantic.dev/latest/integrations/devtools/",
        "https://docs.pydantic.dev/latest/integrations/rich/",
        "https://docs.pydantic.dev/latest/integrations/linting/",
        "https://docs.pydantic.dev/latest/integrations/aws_lambda/",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#__code_1_annotation_1",
        "https://docs.pydantic.dev/latest/concepts/fields/#field-aliases",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#__code_1_annotation_2",
        "https://docs.pydantic.dev/latest/api/aliases/#pydantic.aliases.AliasChoices",
        "https://docs.pydantic.dev/latest/concepts/alias/#aliaspath-and-aliaschoices",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#__code_1_annotation_3",
        "https://docs.pydantic.dev/latest/api/types/#pydantic.types.ImportString",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#__code_1_annotation_4",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#__code_1_annotation_5",
        "https://docs.pydantic.dev/latest/concepts/fields/#validate-default-values",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#__code_4_annotation_1",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#__code_6_annotation_1",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#__code_8_annotation_1",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#__code_8_annotation_2",
        "https://docs.pydantic.dev/latest/api/pydantic_settings/#pydantic_settings.NoDecode",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#__code_10_annotation_1",
        "https://docs.pydantic.dev/latest/api/pydantic_settings/#pydantic_settings.ForceDecode",
        "https://docs.pydantic.dev/latest/concepts/pydantic_settings/#__code_12_annotation_1",
        "https://pydantic.dev/articles/logfire-announcement",
        "https://logfire.pydantic.dev/docs/integrations/pydantic/",
        "https://github.com/pydantic/pydantic",
        "https://blog.pydantic.dev/",
        "https://github.com/pydantic/pydantic-settings",
        "https://docs.python.org/3/library/math.html#math.cos",
        "https://saurabh-kumar.com/python-dotenv/#usages",
        "https://docs.python.org/3/library/argparse.html#sub-commands",
        "https://docs.docker.com/engine/reference/commandline/secret/",
        "https://docs.docker.com/engine/swarm/secrets/#how-docker-manages-secrets",
        "https://peps.python.org/pep-0518/#tool-table",
        "https://squidfunk.github.io/mkdocs-material/"
    ]
}