{
    "id": "da20f4fbfeeee24bf9a1aa600b92ae3b",
    "metadata": {
        "id": "da20f4fbfeeee24bf9a1aa600b92ae3b",
        "url": "https://lilianweng.github.io/",
        "title": "Lil'Log",
        "properties": {
            "description": "Document my learning notes.",
            "keywords": null,
            "author": "Lilian Weng",
            "og:title": "Lil'Log",
            "og:description": "Document my learning notes.",
            "og:type": "website",
            "og:url": "https://lilianweng.github.io/",
            "twitter:card": "summary",
            "twitter:title": "Lil'Log",
            "twitter:description": "Document my learning notes."
        }
    },
    "parent_metadata": {
        "id": "af56f2c8bed78af010988eeb841fdfb9",
        "url": "https://www.notion.so/Sources-af56f2c8bed78af010988eeb841fdfb9",
        "title": "Sources",
        "properties": {
            "Type": "Node"
        }
    },
    "content": "[Lil'Log](https://lilianweng.github.io/ \"Lil'Log \\(Alt + H\\)\")\n\n  * |\n\n\n\n  * [ Posts ](https://lilianweng.github.io/ \"Posts\")\n  * [ Archive ](https://lilianweng.github.io/archives \"Archive\")\n  * [ Search ](https://lilianweng.github.io/search/ \"Search \\(Alt + /\\)\")\n  * [ Tags ](https://lilianweng.github.io/tags/ \"Tags\")\n  * [ FAQ ](https://lilianweng.github.io/faq \"FAQ\")\n  * [ emojisearch.app ](https://www.emojisearch.app/ \"emojisearch.app\")\n\n\n\n# üëã Welcome to Lil‚ÄôLog\n\nHi, this is Lilian. I‚Äôm documenting my learning notes in this blog since 2017. Based on the number of grammar mistakes in my posts, you can tell how much ChatGPT is involved üòâ.\n\n[ ](https://twitter.com/lilianweng/ \"Twitter\") [ ](https://scholar.google.com/citations?user=dCa-pW8AAAAJ&hl=en&oi=ao \"Other\") [ ](index.xml \"Rss\") [ ](https://github.com/lilianweng \"Github\")\n\n## Reward Hacking in Reinforcement Learning \n\nReward hacking occurs when a reinforcement learning (RL) agent exploits flaws or ambiguities in the reward function to achieve high rewards, without genuinely learning or completing the intended task. Reward hacking exists because RL environments are often imperfect, and it is fundamentally challenging to accurately specify a reward function. With the rise of language models generalizing to a broad spectrum of tasks and RLHF becomes a de facto method for alignment training, reward hacking in RL training of language models has become a critical practical challenge. Instances where the model learns to modify unit tests to pass coding tasks, or where responses contain biases that mimic a user‚Äôs preference, are pretty concerning and are likely one of the major blockers for real-world deployment of more autonomous use cases of AI models. ...\n\nDate: November 28, 2024 | Estimated Reading Time: 37 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2024-11-28-reward-hacking/)\n\n## Extrinsic Hallucinations in LLMs \n\nHallucination in large language models usually refers to the model generating unfaithful, fabricated, inconsistent, or nonsensical content. As a term, hallucination has been somewhat generalized to cases when the model makes mistakes. Here, I would like to narrow down the problem of hallucination to cases where the model output is fabricated and not grounded by either the provided context or world knowledge. There are two types of hallucination: In-context hallucination: The model output should be consistent with the source content in context. Extrinsic hallucination: The model output should be grounded by the pre-training dataset. However, given the size of the pre-training dataset, it is too expensive to retrieve and identify conflicts per generation. If we consider the pre-training data corpus as a proxy for world knowledge, we essentially try to ensure the model output is factual and verifiable by external world knowledge. Equally importantly, when the model does not know about a fact, it should say so. This post focuses on extrinsic hallucination. To avoid hallucination, LLMs need to be (1) factual and (2) acknowledge not knowing the answer when applicable. ...\n\nDate: July 7, 2024 | Estimated Reading Time: 30 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2024-07-07-hallucination/)\n\n## Diffusion Models for Video Generation \n\nDiffusion models have demonstrated strong results on image synthesis in past years. Now the research community has started working on a harder task‚Äîusing it for video generation. The task itself is a superset of the image case, since an image is a video of 1 frame, and it is much more challenging because: It has extra requirements on temporal consistency across frames in time, which naturally demands more world knowledge to be encoded into the model. In comparison to text or images, it is more difficult to collect large amounts of high-quality, high-dimensional video data, let along text-video pairs. ü•ë Required Pre-read: Please make sure you have read the previous blog on ‚ÄúWhat are Diffusion Models?‚Äù for image generation before continue here. ...\n\nDate: April 12, 2024 | Estimated Reading Time: 20 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2024-04-12-diffusion-video/)\n\n## Thinking about High-Quality Human Data \n\n[Special thank you to Ian Kivlichan for many useful pointers (E.g. the 100+ year old Nature paper ‚ÄúVox populi‚Äù) and nice feedback. üôè ] High-quality data is the fuel for modern data deep learning model training. Most of the task-specific labeled data comes from human annotation, such as classification task or RLHF labeling (which can be constructed as classification format) for LLM alignment training. Lots of ML techniques in the post can help with data quality, but fundamentally human data collection involves attention to details and careful execution. The community knows the value of high quality data, but somehow we have this subtle impression that ‚ÄúEveryone wants to do the model work, not the data work‚Äù (Sambasivan et al. 2021). ...\n\nDate: February 5, 2024 | Estimated Reading Time: 21 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2024-02-05-human-data-quality/)\n\n## Adversarial Attacks on LLMs \n\nThe use of large language models in the real world has strongly accelerated by the launch of ChatGPT. We (including my team at OpenAI, shoutout to them) have invested a lot of effort to build default safe behavior into the model during the alignment process (e.g. via RLHF). However, adversarial attacks or jailbreak prompts could potentially trigger the model to output something undesired. A large body of ground work on adversarial attacks is on images, and differently it operates in the continuous, high-dimensional space. Attacks for discrete data like text have been considered to be a lot more challenging, due to lack of direct gradient signals. My past post on Controllable Text Generation is quite relevant to this topic, as attacking LLMs is essentially to control the model to output a certain type of (unsafe) content. ...\n\nDate: October 25, 2023 | Estimated Reading Time: 33 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2023-10-25-adv-attack-llm/)\n\n## LLM Powered Autonomous Agents \n\nBuilding agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver. Agent System Overview In a LLM-powered autonomous agent system, LLM functions as the agent‚Äôs brain, complemented by several key components: Planning Subgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks. Reflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results. Memory Short-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn. Long-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval. Tool use The agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more. Fig. 1. Overview of a LLM-powered autonomous agent system. Component One: Planning A complicated task usually involves many steps. An agent needs to know what they are and plan ahead. ...\n\nDate: June 23, 2023 | Estimated Reading Time: 31 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2023-06-23-agent/)\n\n## Prompt Engineering \n\nPrompt Engineering, also known as In-Context Prompting, refers to methods for how to communicate with LLM to steer its behavior for desired outcomes without updating the model weights. It is an empirical science and the effect of prompt engineering methods can vary a lot among models, thus requiring heavy experimentation and heuristics. This post only focuses on prompt engineering for autoregressive language models, so nothing with Cloze tests, image generation or multimodality models. At its core, the goal of prompt engineering is about alignment and model steerability. Check my previous post on controllable text generation. ...\n\nDate: March 15, 2023 | Estimated Reading Time: 21 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/)\n\n## The Transformer Family Version 2.0 \n\nMany new Transformer architecture improvements have been proposed since my last post on ‚ÄúThe Transformer Family‚Äù about three years ago. Here I did a big refactoring and enrichment of that 2020 post ‚Äî restructure the hierarchy of sections and improve many sections with more recent papers. Version 2.0 is a superset of the old version, about twice the length. Notations Symbol Meaning d The model size / hidden state dimension / positional encoding size. h The number of heads in multi-head attention layer. L The segment length of input sequence. N The total number of attention layers in the model; not considering MoE. X‚ààRL√ód The input sequence where each element has been mapped into an embedding vector of shape d, same as the model size. Wk‚ààRd√ódk The key weight matrix. Wq‚ààRd√ódk The query weight matrix. Wv‚ààRd√ódv The value weight matrix. Often we have dk=dv=d. Wik,Wiq‚ààRd√ódk/h;Wiv‚ààRd√ódv/h The weight matrices per head. Wo‚ààRdv√ód The output weight matrix. Q=XWq‚ààRL√ódk The query embedding inputs. K=XWk‚ààRL√ódk The key embedding inputs. V=XWv‚ààRL√ódv The value embedding inputs. qi,ki‚ààRdk,vi‚ààRdv Row vectors in query, key, value matrices, Q, K and V. Si A collection of key positions for the i-th query qi to attend to. A‚ààRL√óL The self-attention matrix between a input sequence of lenght L and itself. A=softmax(QK‚ä§/dk). aij‚ààA The scalar attention score between query qi and key kj. P‚ààRL√ód position encoding matrix, where the i-th row pi is the positional encoding for input xi. Transformer Basics The Transformer (which will be referred to as ‚Äúvanilla Transformer‚Äù to distinguish it from other enhanced versions; Vaswani, et al., 2017) model has an encoder-decoder architecture, as commonly used in many NMT models. Later simplified Transformer was shown to achieve great performance in language modeling tasks, like in encoder-only BERT or decoder-only GPT. ...\n\nDate: January 27, 2023 | Estimated Reading Time: 46 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2023-01-27-the-transformer-family-v2/)\n\n## Large Transformer Model Inference Optimization \n\n[Updated on 2023-01-24: add a small section on Distillation.] Large transformer models are mainstream nowadays, creating SoTA results for a variety of tasks. They are powerful but very expensive to train and use. The extremely high inference cost, in both time and memory, is a big bottleneck for adopting a powerful transformer for solving real-world tasks at scale. Why is it hard to run inference for large transformer models? Besides the increasing size of SoTA models, there are two main factors contributing to the inference challenge (Pope et al. 2022): ...\n\nDate: January 10, 2023 | Estimated Reading Time: 9 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2023-01-10-inference-optimization/)\n\n## Some Math behind Neural Tangent Kernel \n\nNeural networks are well known to be over-parameterized and can often easily fit data with near-zero training loss with decent generalization performance on test dataset. Although all these parameters are initialized at random, the optimization process can consistently lead to similarly good outcomes. And this is true even when the number of model parameters exceeds the number of training data points. Neural tangent kernel (NTK) (Jacot et al. 2018) is a kernel to explain the evolution of neural networks during training via gradient descent. It leads to great insights into why neural networks with enough width can consistently converge to a global minimum when trained to minimize an empirical loss. In the post, we will do a deep dive into the motivation and definition of NTK, as well as the proof of a deterministic convergence at different initializations of neural networks with infinite width by characterizing NTK in such a setting. ...\n\nDate: September 8, 2022 | Estimated Reading Time: 17 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2022-09-08-ntk/)\n\n## Generalized Visual Language Models \n\nProcessing images to generate text, such as image captioning and visual question-answering, has been studied for years. Traditionally such systems rely on an object detection network as a vision encoder to capture visual features and then produce text via a text decoder. Given a large amount of existing literature, in this post, I would like to only focus on one approach for solving vision language tasks, which is to extend pre-trained generalized language models to be capable of consuming visual signals. ...\n\nDate: June 9, 2022 | Estimated Reading Time: 25 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2022-06-09-vlm/)\n\n## Learning with not Enough Data Part 3: Data Generation \n\nHere comes the Part 3 on learning with not enough data (Previous: Part 1 and Part 2). Let‚Äôs consider two approaches for generating synthetic data for training. Augmented data. Given a set of existing training samples, we can apply a variety of augmentation, distortion and transformation to derive new data points without losing the key attributes. We have covered a bunch of augmentation methods on text and images in a previous post on contrastive learning. For the sake of post completeness, I duplicate the section on data augmentation here with some edits. New data. Given few or even no data points, we can rely on powerful pretrained models to generate a number of new data points. This is especially true in recent years given the fast progress in large pretrained language models (LM). Few shot prompting is shown to be effective for LM to learn within context without extra training. Data Augmentation The goal of data augmentation is to modify the input format (e.g. text wording, visual appearance) while the semantic meaning stays unchanged. ...\n\nDate: April 15, 2022 | Estimated Reading Time: 28 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2022-04-15-data-gen/)\n\n## Learning with not Enough Data Part 2: Active Learning \n\nThis is part 2 of what to do when facing a limited amount of labeled data for supervised learning tasks. This time we will get some amount of human labeling work involved, but within a budget limit, and therefore we need to be smart when selecting which samples to label. ...\n\nDate: February 20, 2022 | Estimated Reading Time: 22 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2022-02-20-active-learning/)\n\n## Learning with not Enough Data Part 1: Semi-Supervised Learning \n\nWhen facing a limited amount of labeled data for supervised learning tasks, four approaches are commonly discussed. ...\n\nDate: December 5, 2021 | Estimated Reading Time: 26 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2021-12-05-semi-supervised/)\n\n## How to Train Really Large Models on Many GPUs? \n\n[Updated on 2022-03-13: add expert choice routing.] [Updated on 2022-06-10]: Greg and I wrote a shorted and upgraded version of this post, published on OpenAI Blog: ‚ÄúTechniques for Training Large Neural Networks‚Äù ...\n\nDate: September 24, 2021 | Estimated Reading Time: 21 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2021-09-25-train-large/)\n\n## What are Diffusion Models? \n\n[Updated on 2021-09-19: Highly recommend this blog post on score-based generative modeling by Yang Song (author of several key papers in the references)]. [Updated on 2022-08-27: Added classifier-free guidance, GLIDE, unCLIP and Imagen. [Updated on 2022-08-31: Added latent diffusion model. [Updated on 2024-04-13: Added progressive distillation, consistency models, and the Model Architecture section. ...\n\nDate: July 11, 2021 | Estimated Reading Time: 32 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2021-07-11-diffusion-models/)\n\n## Contrastive Representation Learning \n\nThe goal of contrastive representation learning is to learn such an embedding space in which similar sample pairs stay close to each other while dissimilar ones are far apart. Contrastive learning can be applied to both supervised and unsupervised settings. When working with unsupervised data, contrastive learning is one of the most powerful approaches in self-supervised learning. ...\n\nDate: May 31, 2021 | Estimated Reading Time: 39 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2021-05-31-contrastive/)\n\n## Reducing Toxicity in Language Models \n\nLarge pretrained language models are trained over a sizable collection of online data. They unavoidably acquire certain toxic behavior and biases from the Internet. Pretrained language models are very powerful and have shown great success in many NLP tasks. However, to safely deploy them for practical real-world applications demands a strong safety control over the model generation process. ...\n\nDate: March 21, 2021 | Estimated Reading Time: 23 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2021-03-21-lm-toxicity/)\n\n## Controllable Neural Text Generation \n\n[Updated on 2021-02-01: Updated to version 2.0 with several work added and many typos fixed.] [Updated on 2021-05-26: Add P-tuning and Prompt Tuning in the ‚Äúprompt design‚Äù section.] [Updated on 2021-09-19: Add ‚Äúunlikelihood training‚Äù.] ...\n\nDate: January 2, 2021 | Estimated Reading Time: 42 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2021-01-02-controllable-text-generation/)\n\n## How to Build an Open-Domain Question Answering System? \n\n[Updated on 2020-11-12: add an example on closed-book factual QA using OpenAI API (beta). A model that can answer any question with regard to factual knowledge can lead to many useful and practical applications, such as working as a chatbot or an AI assistantü§ñ. In this post, we will review several common approaches for building such an open-domain question answering system. ...\n\nDate: October 29, 2020 | Estimated Reading Time: 33 min | Author: Lilian Weng [](https://lilianweng.github.io/posts/2020-10-29-odqa/) [ ¬ª](https://lilianweng.github.io/page/2/) ¬© 2024 [Lil'Log](https://lilianweng.github.io/) Powered by [Hugo](https://gohugo.io/) & [PaperMod](https://git.io/hugopapermod) [ ](#top \"Go to Top \\(Alt + G\\)\")\n",
    "content_quality_score": 0.9,
    "summary": null,
    "child_urls": [
        "https://lilianweng.github.io/",
        "https://lilianweng.github.io/archives",
        "https://lilianweng.github.io/search/",
        "https://lilianweng.github.io/tags/",
        "https://lilianweng.github.io/faq",
        "https://lilianweng.github.io/index.xml",
        "https://lilianweng.github.io/posts/2024-11-28-reward-hacking/",
        "https://lilianweng.github.io/posts/2024-07-07-hallucination/",
        "https://lilianweng.github.io/posts/2024-04-12-diffusion-video/",
        "https://lilianweng.github.io/posts/2024-02-05-human-data-quality/",
        "https://lilianweng.github.io/posts/2023-10-25-adv-attack-llm/",
        "https://lilianweng.github.io/posts/2023-06-23-agent/",
        "https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/",
        "https://lilianweng.github.io/posts/2023-01-27-the-transformer-family-v2/",
        "https://lilianweng.github.io/posts/2023-01-10-inference-optimization/",
        "https://lilianweng.github.io/posts/2022-09-08-ntk/",
        "https://lilianweng.github.io/posts/2022-06-09-vlm/",
        "https://lilianweng.github.io/posts/2022-04-15-data-gen/",
        "https://lilianweng.github.io/posts/2022-02-20-active-learning/",
        "https://lilianweng.github.io/posts/2021-12-05-semi-supervised/",
        "https://lilianweng.github.io/posts/2021-09-25-train-large/",
        "https://lilianweng.github.io/posts/2021-07-11-diffusion-models/",
        "https://lilianweng.github.io/posts/2021-05-31-contrastive/",
        "https://lilianweng.github.io/posts/2021-03-21-lm-toxicity/",
        "https://lilianweng.github.io/posts/2021-01-02-controllable-text-generation/",
        "https://lilianweng.github.io/posts/2020-10-29-odqa/",
        "https://lilianweng.github.io/page/2/",
        "https://lilianweng.github.io/#top",
        "https://www.emojisearch.app/",
        "https://twitter.com/lilianweng/",
        "https://scholar.google.com/citations?user=dCa-pW8AAAAJ&hl=en&oi=ao",
        "https://github.com/lilianweng",
        "https://gohugo.io/",
        "https://git.io/hugopapermod"
    ]
}