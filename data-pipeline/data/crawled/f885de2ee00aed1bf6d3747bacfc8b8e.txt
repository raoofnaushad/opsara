[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2FGokuMohandas%2FMade-With-ML%2F)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)
    * [ Nonprofits ](/solutions/industry/nonprofits)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2FGokuMohandas%2FMade-With-ML%2F)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=GokuMohandas%2FMade-With-ML) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ GokuMohandas ](/GokuMohandas) / **[Made-With-ML](/GokuMohandas/Made-With-ML) ** Public

  * [ Notifications ](/login?return_to=%2FGokuMohandas%2FMade-With-ML) You must be signed in to change notification settings
  * [ Fork 6k ](/login?return_to=%2FGokuMohandas%2FMade-With-ML)
  * [ Star  38k ](/login?return_to=%2FGokuMohandas%2FMade-With-ML)




Learn how to design, develop, deploy and iterate on production-grade ML applications. 

[madewithml.com](https://madewithml.com "https://madewithml.com")

### License

[ MIT license ](/GokuMohandas/Made-With-ML/blob/main/LICENSE)

[ 38k stars ](/GokuMohandas/Made-With-ML/stargazers) [ 6k forks ](/GokuMohandas/Made-With-ML/forks) [ Branches ](/GokuMohandas/Made-With-ML/branches) [ Tags ](/GokuMohandas/Made-With-ML/tags) [ Activity ](/GokuMohandas/Made-With-ML/activity)

[ Star  ](/login?return_to=%2FGokuMohandas%2FMade-With-ML)

[ Notifications ](/login?return_to=%2FGokuMohandas%2FMade-With-ML) You must be signed in to change notification settings

  * [ Code ](/GokuMohandas/Made-With-ML)
  * [ Issues 16 ](/GokuMohandas/Made-With-ML/issues)
  * [ Pull requests 5 ](/GokuMohandas/Made-With-ML/pulls)
  * [ Actions ](/GokuMohandas/Made-With-ML/actions)
  * [ Projects 0 ](/GokuMohandas/Made-With-ML/projects)
  * [ Security ](/GokuMohandas/Made-With-ML/security)
  * [ Insights ](/GokuMohandas/Made-With-ML/pulse)



Additional navigation options

  * [ Code  ](/GokuMohandas/Made-With-ML)
  * [ Issues  ](/GokuMohandas/Made-With-ML/issues)
  * [ Pull requests  ](/GokuMohandas/Made-With-ML/pulls)
  * [ Actions  ](/GokuMohandas/Made-With-ML/actions)
  * [ Projects  ](/GokuMohandas/Made-With-ML/projects)
  * [ Security  ](/GokuMohandas/Made-With-ML/security)
  * [ Insights  ](/GokuMohandas/Made-With-ML/pulse)



# GokuMohandas/Made-With-ML

main

[**3** Branches](/GokuMohandas/Made-With-ML/branches)[**0** Tags](/GokuMohandas/Made-With-ML/tags)

[](/GokuMohandas/Made-With-ML/branches)[](/GokuMohandas/Made-With-ML/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[![GokuMohandas](https://avatars.githubusercontent.com/u/8000987?v=4&size=40)](/GokuMohandas)[GokuMohandas](/GokuMohandas/Made-With-ML/commits?author=GokuMohandas)[Merge pull request](/GokuMohandas/Made-With-ML/commit/66e8e437115029422db1a80ff93c308cfcd82648) [#248](https://github.com/GokuMohandas/Made-With-ML/pull/248) [from GokuMohandas/dev](/GokuMohandas/Made-With-ML/commit/66e8e437115029422db1a80ff93c308cfcd82648)Dec 7, 2023[66e8e43](/GokuMohandas/Made-With-ML/commit/66e8e437115029422db1a80ff93c308cfcd82648) Â· Dec 7, 2023

## History

[18 Commits](/GokuMohandas/Made-With-ML/commits/main/)[](/GokuMohandas/Made-With-ML/commits/main/)  
[.github/workflows](/GokuMohandas/Made-With-ML/tree/main/.github/workflows "This path skips through empty directories")| [.github/workflows](/GokuMohandas/Made-With-ML/tree/main/.github/workflows "This path skips through empty directories")| [ML for Developers](/GokuMohandas/Made-With-ML/commit/776a75b010cb96dbdc99302ae24da6764f673486 "ML for Developers")| Jul 26, 2023  
[datasets](/GokuMohandas/Made-With-ML/tree/main/datasets "datasets")| [datasets](/GokuMohandas/Made-With-ML/tree/main/datasets "datasets")| [added other class to datasets](/GokuMohandas/Made-With-ML/commit/030573f1a1dad734a3a7b1bef3a4e0addcd9d92b "added other class to datasets")| Aug 19, 2023  
[deploy](/GokuMohandas/Made-With-ML/tree/main/deploy "deploy")| [deploy](/GokuMohandas/Made-With-ML/tree/main/deploy "deploy")| [updated cluser compute, environment and workloads](/GokuMohandas/Made-With-ML/commit/be3d2732a8f73dd0257e72ca542c748766fbd170 "updated cluser compute, environment and workloads")| Dec 7, 2023  
[docs](/GokuMohandas/Made-With-ML/tree/main/docs "docs")| [docs](/GokuMohandas/Made-With-ML/tree/main/docs "docs")| [ML for Developers](/GokuMohandas/Made-With-ML/commit/776a75b010cb96dbdc99302ae24da6764f673486 "ML for Developers")| Jul 26, 2023  
[madewithml](/GokuMohandas/Made-With-ML/tree/main/madewithml "madewithml")| [madewithml](/GokuMohandas/Made-With-ML/tree/main/madewithml "madewithml")| [added local catch for EFS OS/permissions issues](/GokuMohandas/Made-With-ML/commit/11ab35b251fdfbc0f9e518a5cd7e629580de85ef "added local catch for EFS OS/permissions issues")| Dec 7, 2023  
[notebooks](/GokuMohandas/Made-With-ML/tree/main/notebooks "notebooks")| [notebooks](/GokuMohandas/Made-With-ML/tree/main/notebooks "notebooks")| [added local catch for EFS OS/permissions issues](/GokuMohandas/Made-With-ML/commit/11ab35b251fdfbc0f9e518a5cd7e629580de85ef "added local catch for EFS OS/permissions issues")| Dec 7, 2023  
[tests](/GokuMohandas/Made-With-ML/tree/main/tests "tests")| [tests](/GokuMohandas/Made-With-ML/tree/main/tests "tests")| [updated to Ray 2.7](/GokuMohandas/Made-With-ML/commit/b98bd5b1aeaafced5468041f0072d0ca7ab1f85c "updated to Ray 2.7")| Sep 19, 2023  
[.gitignore](/GokuMohandas/Made-With-ML/blob/main/.gitignore ".gitignore")| [.gitignore](/GokuMohandas/Made-With-ML/blob/main/.gitignore ".gitignore")| [added local catch for EFS OS/permissions issues](/GokuMohandas/Made-With-ML/commit/11ab35b251fdfbc0f9e518a5cd7e629580de85ef "added local catch for EFS OS/permissions issues")| Dec 7, 2023  
[.pre-commit-config.yaml](/GokuMohandas/Made-With-ML/blob/main/.pre-commit-config.yaml ".pre-commit-config.yaml")| [.pre-commit-config.yaml](/GokuMohandas/Made-With-ML/blob/main/.pre-commit-config.yaml ".pre-commit-config.yaml")| [added local catch for EFS OS/permissions issues](/GokuMohandas/Made-With-ML/commit/11ab35b251fdfbc0f9e518a5cd7e629580de85ef "added local catch for EFS OS/permissions issues")| Dec 7, 2023  
[LICENSE](/GokuMohandas/Made-With-ML/blob/main/LICENSE "LICENSE")| [LICENSE](/GokuMohandas/Made-With-ML/blob/main/LICENSE "LICENSE")| [ML for Developers](/GokuMohandas/Made-With-ML/commit/776a75b010cb96dbdc99302ae24da6764f673486 "ML for Developers")| Jul 26, 2023  
[Makefile](/GokuMohandas/Made-With-ML/blob/main/Makefile "Makefile")| [Makefile](/GokuMohandas/Made-With-ML/blob/main/Makefile "Makefile")| [added local catch for EFS OS/permissions issues](/GokuMohandas/Made-With-ML/commit/11ab35b251fdfbc0f9e518a5cd7e629580de85ef "added local catch for EFS OS/permissions issues")| Dec 7, 2023  
[README.md](/GokuMohandas/Made-With-ML/blob/main/README.md "README.md")| [README.md](/GokuMohandas/Made-With-ML/blob/main/README.md "README.md")| [updated cluser compute, environment and workloads](/GokuMohandas/Made-With-ML/commit/be3d2732a8f73dd0257e72ca542c748766fbd170 "updated cluser compute, environment and workloads")| Dec 7, 2023  
[mkdocs.yml](/GokuMohandas/Made-With-ML/blob/main/mkdocs.yml "mkdocs.yml")| [mkdocs.yml](/GokuMohandas/Made-With-ML/blob/main/mkdocs.yml "mkdocs.yml")| [ML for Developers](/GokuMohandas/Made-With-ML/commit/776a75b010cb96dbdc99302ae24da6764f673486 "ML for Developers")| Jul 26, 2023  
[pyproject.toml](/GokuMohandas/Made-With-ML/blob/main/pyproject.toml "pyproject.toml")| [pyproject.toml](/GokuMohandas/Made-With-ML/blob/main/pyproject.toml "pyproject.toml")| [ML for Developers](/GokuMohandas/Made-With-ML/commit/776a75b010cb96dbdc99302ae24da6764f673486 "ML for Developers")| Jul 26, 2023  
[requirements.txt](/GokuMohandas/Made-With-ML/blob/main/requirements.txt "requirements.txt")| [requirements.txt](/GokuMohandas/Made-With-ML/blob/main/requirements.txt "requirements.txt")| [updating to Ray 2.7](/GokuMohandas/Made-With-ML/commit/f682fbffa420dd8a51928f39e742d92e61dfad0f "updating to Ray 2.7")| Sep 19, 2023  
View all files  
  
## Repository files navigation

  * [README](#)
  * [MIT license](#)



# [![](https://camo.githubusercontent.com/bc306f689a14d3d6dc9782a9d6207b1a72bb753d02e24812bc658d334fa57b7e/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f726f756e6465645f6c6f676f2e706e67)](https://camo.githubusercontent.com/bc306f689a14d3d6dc9782a9d6207b1a72bb753d02e24812bc658d334fa57b7e/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f726f756e6465645f6c6f676f2e706e67) [Made With ML](https://madewithml.com/)

[](#made-with-ml)

Design Â· Develop Â· Deploy Â· Iterate Join 40K+ developers in learning how to responsibly deliver value with ML. 

[![](https://camo.githubusercontent.com/1c8877d013d3bce832b494b16e92a58bb0b56d0756071d8d20da475c5ea4d95b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5375627363726962652d34304b2d627269676874677265656e)](https://madewithml.com/) [![](https://camo.githubusercontent.com/a9dccbaf0395471a9de4f70c2f883806ec1b335a30ea3c43aa0c62e514e01497/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f476f6b754d6f68616e6461732f4d6164652d576974682d4d4c2e7376673f7374796c653d736f6369616c266c6162656c3d53746172)](https://github.com/GokuMohandas/Made-With-ML) [![](https://camo.githubusercontent.com/fc554d6bdc946c70ad1a2b66fd77c3dad48cb4d7e5d6049ef463738c0aaaf4da/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374796c652d2d3565626130302e7376673f6c6162656c3d4c696e6b6564496e266c6f676f3d6c696e6b6564696e267374796c653d736f6369616c)](https://www.linkedin.com/in/goku) [![](https://camo.githubusercontent.com/1928f043a6430a553dd6b3d8ecf4faea06dbeea5c40660d6de57a9c56edb909a/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f476f6b754d6f68616e6461732e7376673f6c6162656c3d466f6c6c6f77267374796c653d736f6369616c)](https://twitter.com/GokuMohandas) ð¥ Among the [top ML repositories](https://github.com/GokuMohandas/Made-With-ML) on GitHub 

## Lessons

[](#lessons)

Learn how to combine machine learning with software engineering to design, develop, deploy and iterate on production-grade ML applications.

  * Lessons: <https://madewithml.com/>
  * Code: [GokuMohandas/Made-With-ML](https://github.com/GokuMohandas/Made-With-ML)

[ ![lessons](https://camo.githubusercontent.com/f459b72e73251f4b7792dfe1048867766a8b8d024dae50541b0c16b1b0d0c854/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6c6573736f6e732e706e67) ](https://madewithml.com/#course)

## Overview

[](#overview)

In this course, we'll go from experimentation (design + development) to production (deployment + iteration). We'll do this iteratively by motivating the components that will enable us to build a _reliable_ production system.

> [![](https://camo.githubusercontent.com/986178ecaedccd395a9f79a6e622d5c2594a85781d34df0cc765c0ad22d42e0f/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f302f30392f596f75547562655f66756c6c2d636f6c6f725f69636f6e5f253238323031372532392e7376672f36343070782d596f75547562655f66756c6c2d636f6c6f725f69636f6e5f253238323031372532392e7376672e706e67)](https://camo.githubusercontent.com/986178ecaedccd395a9f79a6e622d5c2594a85781d34df0cc765c0ad22d42e0f/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f302f30392f596f75547562655f66756c6c2d636f6c6f725f69636f6e5f253238323031372532392e7376672f36343070782d596f75547562655f66756c6c2d636f6c6f725f69636f6e5f253238323031372532392e7376672e706e67) Be sure to watch the video below for a quick overview of what we'll be building. 

[![Course overview video](https://camo.githubusercontent.com/bcd05c283ea01abfbe99af338ff8c8818f73b983a606cafea6386c96935618e1/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f4157676b7438483879566f2f302e6a7067)](https://youtu.be/AWgkt8H8yVo)

  * **ð¡ First principles** : before we jump straight into the code, we develop a first principles understanding for every machine learning concept.
  * **ð» Best practices** : implement software engineering best practices as we develop and deploy our machine learning models.
  * **ð Scale** : easily scale ML workloads (data, train, tune, serve) in Python without having to learn completely new languages.
  * **âï¸ MLOps** : connect MLOps components (tracking, testing, serving, orchestration, etc.) as we build an end-to-end machine learning system.
  * **ð Dev to Prod** : learn how to quickly and reliably go from development to production without any changes to our code or infra management.
  * **ð CI/CD** : learn how to create mature CI/CD workflows to continuously train and deploy better models in a modular way that integrates with any stack.



## Audience

[](#audience)

Machine learning is not a separate industry, instead, it's a powerful way of thinking about data that's not reserved for any one type of person.

  * **ð©âð» All developers** : whether software/infra engineer or data scientist, ML is increasingly becoming a key part of the products that you'll be developing.
  * **ð©âð College graduates** : learn the practical skills required for industry and bridge gap between the university curriculum and what industry expects.
  * **ð©âð¼ Product/Leadership** : who want to develop a technical foundation so that they can build amazing (and reliable) products powered by machine learning.



## Set up

[](#set-up)

Be sure to go through the [course](https://madewithml/#course) for a much more detailed walkthrough of the content on this repository. We will have instructions for both local laptop and Anyscale clusters for the sections below, so be sure to toggle the âº dropdown based on what you're using (Anyscale instructions will be toggled on by default). If you do want to run this course with Anyscale, where we'll provide the **structure** , **compute (GPUs)** and **community** to learn everything in one day, join our next upcoming live cohort â [sign up here](https://4190urw86oh.typeform.com/madewithml)!

### Cluster

[](#cluster)

We'll start by setting up our cluster with the environment and compute configurations.

Local Your personal laptop (single machine) will act as the cluster, where one CPU will be the head node and some of the remaining CPU will be the worker nodes. All of the code in this course will work in any personal laptop though it will be slower than executing the same workloads on a larger cluster.  Anyscale

We can create an [Anyscale Workspace](https://docs.anyscale.com/develop/workspaces/get-started) using the [webpage UI](https://console.anyscale.com/o/madewithml/workspaces/add/blank).

```
- Workspace name: `madewithml` - Project: `madewithml` - Cluster environment name: `madewithml-cluster-env` # Toggle `Select from saved configurations` - Compute config: `madewithml-cluster-compute-g5.4xlarge`
```

> Alternatively, we can use the [CLI](https://docs.anyscale.com/reference/anyscale-cli) to create the workspace via `anyscale workspace create ...`

Other (cloud platforms, K8s, on-prem)

If you don't want to do this course locally or via Anyscale, you have the following options:

  * On [AWS and GCP](https://docs.ray.io/en/latest/cluster/vms/index.html#cloud-vm-index). Community-supported Azure and Aliyun integrations also exist.
  * On [Kubernetes](https://docs.ray.io/en/latest/cluster/kubernetes/index.html#kuberay-index), via the officially supported KubeRay project.
  * Deploy Ray manually [on-prem](https://docs.ray.io/en/latest/cluster/vms/user-guides/launching-clusters/on-premises.html#on-prem) or onto platforms [not listed here](https://docs.ray.io/en/latest/cluster/vms/user-guides/community/index.html#ref-cluster-setup).



### Git setup

[](#git-setup)

Create a repository by following these instructions: [Create a new repository](https://github.com/new) â name it `Made-With-ML` â Toggle `Add a README file` (**very important** as this creates a `main` branch) â Click `Create repository` (scroll down)

Now we're ready to clone the repository that has all of our code:

```
git clone https://github.com/GokuMohandas/Made-With-ML.git .
```

### Credentials

[](#credentials)

```
touch .env
```

```
# Inside .env GITHUB_USERNAME="CHANGE_THIS_TO_YOUR_USERNAME" # â CHANGE THIS
```

```
source .env
```

### Virtual environment

[](#virtual-environment)

Local

```
export PYTHONPATH=$PYTHONPATH:$PWD python3 -m venv venv # recommend using Python 3.10 source venv/bin/activate # on Windows: venv\Scripts\activate python3 -m pip install --upgrade pip setuptools wheel python3 -m pip install -r requirements.txt pre-commit install pre-commit autoupdate
```

> Highly recommend using Python `3.10` and using [pyenv](https://github.com/pyenv/pyenv) (mac) or [pyenv-win](https://github.com/pyenv-win/pyenv-win) (windows).

Anyscale

Our environment with the appropriate Python version and libraries is already all set for us through the cluster environment we used when setting up our Anyscale Workspace. So we just need to run these commands:

```
export PYTHONPATH=$PYTHONPATH:$PWD pre-commit install pre-commit autoupdate
```

## Notebook

[](#notebook)

Start by exploring the [jupyter notebook](/GokuMohandas/Made-With-ML/blob/main/notebooks/madewithml.ipynb) to interactively walkthrough the core machine learning workloads.

[![](https://camo.githubusercontent.com/102df90a3988494a936aeef7b28b9f21cd4cd804fdffe52dec4aca17cd76b1db/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f73797374656d732d64657369676e2f776f726b6c6f6164732e706e67)](https://camo.githubusercontent.com/102df90a3988494a936aeef7b28b9f21cd4cd804fdffe52dec4aca17cd76b1db/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f73797374656d732d64657369676e2f776f726b6c6f6164732e706e67)

Local

```
# Start notebook jupyter lab notebooks/madewithml.ipynb
```

Anyscale

Click on the Jupyter icon [![](https://camo.githubusercontent.com/fb6238b3b65a06550fd5caee8cc71b544011fc5b20e748610514ade292f67d7e/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f332f33382f4a7570797465725f6c6f676f2e7376672f3132303070782d4a7570797465725f6c6f676f2e7376672e706e67)](https://camo.githubusercontent.com/fb6238b3b65a06550fd5caee8cc71b544011fc5b20e748610514ade292f67d7e/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f332f33382f4a7570797465725f6c6f676f2e7376672f3132303070782d4a7570797465725f6c6f676f2e7376672e706e67) at the top right corner of our Anyscale Workspace page and this will open up our JupyterLab instance in a new tab. Then navigate to the `notebooks` directory and open up the `madewithml.ipynb` notebook.

## Scripts

[](#scripts)

Now we'll execute the same workloads using the clean Python scripts following software engineering best practices (testing, documentation, logging, serving, versioning, etc.) The code we've implemented in our notebook will be refactored into the following scripts:

```
madewithml âââ config.py âââ data.py âââ evaluate.py âââ models.py âââ predict.py âââ serve.py âââ train.py âââ tune.py âââ utils.py
```

**Note** : Change the `--num-workers`, `--cpu-per-worker`, and `--gpu-per-worker` input argument values below based on your system's resources. For example, if you're on a local laptop, a reasonable configuration would be `--num-workers 6 --cpu-per-worker 1 --gpu-per-worker 0`.

### Training

[](#training)

```
export EXPERIMENT_NAME="llm" export DATASET_LOC="https://raw.githubusercontent.com/GokuMohandas/Made-With-ML/main/datasets/dataset.csv" export TRAIN_LOOP_CONFIG='{"dropout_p": 0.5, "lr": 1e-4, "lr_factor": 0.8, "lr_patience": 3}' python madewithml/train.py \ --experiment-name "$EXPERIMENT_NAME" \ --dataset-loc "$DATASET_LOC" \ --train-loop-config "$TRAIN_LOOP_CONFIG" \ --num-workers 1 \ --cpu-per-worker 3 \ --gpu-per-worker 1 \ --num-epochs 10 \ --batch-size 256 \ --results-fp results/training_results.json
```

### Tuning

[](#tuning)

```
export EXPERIMENT_NAME="llm" export DATASET_LOC="https://raw.githubusercontent.com/GokuMohandas/Made-With-ML/main/datasets/dataset.csv" export TRAIN_LOOP_CONFIG='{"dropout_p": 0.5, "lr": 1e-4, "lr_factor": 0.8, "lr_patience": 3}' export INITIAL_PARAMS="[{\"train_loop_config\": $TRAIN_LOOP_CONFIG}]" python madewithml/tune.py \ --experiment-name "$EXPERIMENT_NAME" \ --dataset-loc "$DATASET_LOC" \ --initial-params "$INITIAL_PARAMS" \ --num-runs 2 \ --num-workers 1 \ --cpu-per-worker 3 \ --gpu-per-worker 1 \ --num-epochs 10 \ --batch-size 256 \ --results-fp results/tuning_results.json
```

### Experiment tracking

[](#experiment-tracking)

We'll use [MLflow](https://mlflow.org/) to track our experiments and store our models and the [MLflow Tracking UI](https://www.mlflow.org/docs/latest/tracking.html#tracking-ui) to view our experiments. We have been saving our experiments to a local directory but note that in an actual production setting, we would have a central location to store all of our experiments. It's easy/inexpensive to spin up your own MLflow server for all of your team members to track their experiments on or use a managed solution like [Weights & Biases](https://wandb.ai/site), [Comet](https://www.comet.ml/), etc.

```
export MODEL_REGISTRY=$(python -c "from madewithml import config; print(config.MODEL_REGISTRY)") mlflow server -h 0.0.0.0 -p 8080 --backend-store-uri $MODEL_REGISTRY
```

Local

If you're running this notebook on your local laptop then head on over to [](http://localhost:8080/)<http://localhost:8080/> to view your MLflow dashboard.

Anyscale

If you're on [Anyscale Workspaces](https://docs.anyscale.com/develop/workspaces/get-started), then we need to first expose the port of the MLflow server. Run the following command on your Anyscale Workspace terminal to generate the public URL to your MLflow server.

```
APP_PORT=8080 echo https://$APP_PORT-port-$ANYSCALE_SESSION_DOMAIN
```

### Evaluation

[](#evaluation)

```
export EXPERIMENT_NAME="llm" export RUN_ID=$(python madewithml/predict.py get-best-run-id --experiment-name $EXPERIMENT_NAME --metric val_loss --mode ASC) export HOLDOUT_LOC="https://raw.githubusercontent.com/GokuMohandas/Made-With-ML/main/datasets/holdout.csv" python madewithml/evaluate.py \ --run-id $RUN_ID \ --dataset-loc $HOLDOUT_LOC \ --results-fp results/evaluation_results.json
```

```
{ "timestamp": "June 09, 2023 09:26:18 AM", "run_id": "6149e3fec8d24f1492d4a4cabd5c06f6", "overall": { "precision": 0.9076136428670714, "recall": 0.9057591623036649, "f1": 0.9046792827719773, "num_samples": 191.0 }, ...
```

### Inference

[](#inference)

```
export EXPERIMENT_NAME="llm" export RUN_ID=$(python madewithml/predict.py get-best-run-id --experiment-name $EXPERIMENT_NAME --metric val_loss --mode ASC) python madewithml/predict.py predict \ --run-id $RUN_ID \ --title "Transfer learning with transformers" \ --description "Using transformers for transfer learning on text classification tasks."
```

```
[{ "prediction": [ "natural-language-processing" ], "probabilities": { "computer-vision": 0.0009767753, "mlops": 0.0008223939, "natural-language-processing": 0.99762577, "other": 0.000575123 } }]
```

### Serving

[](#serving)

Local

```
# Start ray start --head
```

```
# Set up export EXPERIMENT_NAME="llm" export RUN_ID=$(python madewithml/predict.py get-best-run-id --experiment-name $EXPERIMENT_NAME --metric val_loss --mode ASC) python madewithml/serve.py --run_id $RUN_ID
```

Once the application is running, we can use it via cURL, Python, etc.:

```
# via Python import json import requests title = "Transfer learning with transformers" description = "Using transformers for transfer learning on text classification tasks." json_data = json.dumps({"title": title, "description": description}) requests.post("http://127.0.0.1:8000/predict", data=json_data).json()
```

```
ray stop # shutdown
```

Anyscale

In Anyscale Workspaces, Ray is already running so we don't have to manually start/shutdown like we have to do locally.

```
# Set up export EXPERIMENT_NAME="llm" export RUN_ID=$(python madewithml/predict.py get-best-run-id --experiment-name $EXPERIMENT_NAME --metric val_loss --mode ASC) python madewithml/serve.py --run_id $RUN_ID
```

Once the application is running, we can use it via cURL, Python, etc.:

```
# via Python import json import requests title = "Transfer learning with transformers" description = "Using transformers for transfer learning on text classification tasks." json_data = json.dumps({"title": title, "description": description}) requests.post("http://127.0.0.1:8000/predict", data=json_data).json()
```

### Testing

[](#testing)

```
# Code python3 -m pytest tests/code --verbose --disable-warnings # Data export DATASET_LOC="https://raw.githubusercontent.com/GokuMohandas/Made-With-ML/main/datasets/dataset.csv" pytest --dataset-loc=$DATASET_LOC tests/data --verbose --disable-warnings # Model export EXPERIMENT_NAME="llm" export RUN_ID=$(python madewithml/predict.py get-best-run-id --experiment-name $EXPERIMENT_NAME --metric val_loss --mode ASC) pytest --run-id=$RUN_ID tests/model --verbose --disable-warnings # Coverage python3 -m pytest tests/code --cov madewithml --cov-report html --disable-warnings # html report python3 -m pytest tests/code --cov madewithml --cov-report term --disable-warnings # terminal report
```

## Production

[](#production)

From this point onwards, in order to deploy our application into production, we'll need to either be on Anyscale or on a [cloud VM](https://docs.ray.io/en/latest/cluster/vms/index.html#cloud-vm-index) / [on-prem](https://docs.ray.io/en/latest/cluster/vms/user-guides/launching-clusters/on-premises.html#on-prem) cluster you manage yourself (w/ Ray). If not on Anyscale, the commands will be [slightly different](https://docs.ray.io/en/latest/cluster/running-applications/job-submission/index.html) but the concepts will be the same.

> If you don't want to set up all of this yourself, we highly recommend joining our [upcoming live cohort](https://4190urw86oh.typeform.com/madewithml){:target="_blank"} where we'll provide an environment with all of this infrastructure already set up for you so that you just focused on the machine learning.

[![](https://camo.githubusercontent.com/8b57e924766b8fb69d3d10c001c3562a75be929854772c5a1ddba9c280f42153/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f6a6f62735f616e645f73657276696365732f6d616e75616c2e706e67)](https://camo.githubusercontent.com/8b57e924766b8fb69d3d10c001c3562a75be929854772c5a1ddba9c280f42153/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f6a6f62735f616e645f73657276696365732f6d616e75616c2e706e67)

### Authentication

[](#authentication)

These credentials below are **automatically** set for us if we're using Anyscale Workspaces. We **do not** need to set these credentials explicitly on Workspaces but we do if we're running this locally or on a cluster outside of where our Anyscale Jobs and Services are configured to run.

```
export ANYSCALE_HOST=https://console.anyscale.com export ANYSCALE_CLI_TOKEN=$YOUR_CLI_TOKEN # retrieved from Anyscale credentials page
```

### Cluster environment

[](#cluster-environment)

The cluster environment determines **where** our workloads will be executed (OS, dependencies, etc.) We've already created this [cluster environment](/GokuMohandas/Made-With-ML/blob/main/deploy/cluster_env.yaml) for us but this is how we can create/update one ourselves.

```
export CLUSTER_ENV_NAME="madewithml-cluster-env" anyscale cluster-env build deploy/cluster_env.yaml --name $CLUSTER_ENV_NAME
```

### Compute configuration

[](#compute-configuration)

The compute configuration determines **what** resources our workloads will be executes on. We've already created this [compute configuration](/GokuMohandas/Made-With-ML/blob/main/deploy/cluster_compute.yaml) for us but this is how we can create it ourselves.

```
export CLUSTER_COMPUTE_NAME="madewithml-cluster-compute-g5.4xlarge" anyscale cluster-compute create deploy/cluster_compute.yaml --name $CLUSTER_COMPUTE_NAME
```

### Anyscale jobs

[](#anyscale-jobs)

Now we're ready to execute our ML workloads. We've decided to combine them all together into one [job](/GokuMohandas/Made-With-ML/blob/main/deploy/jobs/workloads.yaml) but we could have also created separate jobs for each workload (train, evaluate, etc.) We'll start by editing the `$GITHUB_USERNAME` slots inside our [`workloads.yaml`](/GokuMohandas/Made-With-ML/blob/main/deploy/jobs/workloads.yaml) file:

```
runtime_env: working_dir: . upload_path: s3://madewithml/$GITHUB_USERNAME/jobs # <--- CHANGE USERNAME (case-sensitive) env_vars: GITHUB_USERNAME: $GITHUB_USERNAME # <--- CHANGE USERNAME (case-sensitive)
```

The `runtime_env` here specifies that we should upload our current `working_dir` to an S3 bucket so that all of our workers when we execute an Anyscale Job have access to the code to use. The `GITHUB_USERNAME` is used later to save results from our workloads to S3 so that we can retrieve them later (ex. for serving).

Now we're ready to submit our job to execute our ML workloads:

```
anyscale job submit deploy/jobs/workloads.yaml
```

### Anyscale Services

[](#anyscale-services)

And after our ML workloads have been executed, we're ready to launch our serve our model to production. Similar to our Anyscale Jobs configs, be sure to change the `$GITHUB_USERNAME` in [`serve_model.yaml`](/GokuMohandas/Made-With-ML/blob/main/deploy/services/serve_model.yaml).

```
ray_serve_config: import_path: deploy.services.serve_model:entrypoint runtime_env: working_dir: . upload_path: s3://madewithml/$GITHUB_USERNAME/services # <--- CHANGE USERNAME (case-sensitive) env_vars: GITHUB_USERNAME: $GITHUB_USERNAME # <--- CHANGE USERNAME (case-sensitive)
```

Now we're ready to launch our service:

```
# Rollout service anyscale service rollout -f deploy/services/serve_model.yaml # Query curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $SECRET_TOKEN" -d '{ "title": "Transfer learning with transformers", "description": "Using transformers for transfer learning on text classification tasks." }' $SERVICE_ENDPOINT/predict/ # Rollback (to previous version of the Service) anyscale service rollback -f $SERVICE_CONFIG --name $SERVICE_NAME # Terminate anyscale service terminate --name $SERVICE_NAME
```

### CI/CD

[](#cicd)

We're not going to manually deploy our application every time we make a change. Instead, we'll automate this process using GitHub Actions!

[![](https://camo.githubusercontent.com/cf6e7ce2720bf03a1c9703584f7b84227ee90eb116f208b9925faea6a43d4cda/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f636963642f636963642e706e67)](https://camo.githubusercontent.com/cf6e7ce2720bf03a1c9703584f7b84227ee90eb116f208b9925faea6a43d4cda/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f636963642f636963642e706e67)

  1. Create a new github branch to save our changes to and execute CI/CD workloads:



```
git remote set-url origin https://github.com/$GITHUB_USERNAME/Made-With-ML.git # <-- CHANGE THIS to your username git checkout -b dev
```

  1. We'll start by adding the necessary credentials to the [`/settings/secrets/actions`](https://github.com/GokuMohandas/Made-With-ML/settings/secrets/actions) page of our GitHub repository.



```
export ANYSCALE_HOST=https://console.anyscale.com export ANYSCALE_CLI_TOKEN=$YOUR_CLI_TOKEN # retrieved from https://console.anyscale.com/o/madewithml/credentials
```

  1. Now we can make changes to our code (not on `main` branch) and push them to GitHub. But in order to push our code to GitHub, we'll need to first authenticate with our credentials before pushing to our repository:



```
git config --global user.name $GITHUB_USERNAME # <-- CHANGE THIS to your username git config --global user.email you@example.com # <-- CHANGE THIS to your email git add . git commit -m "" # <-- CHANGE THIS to your message git push origin dev
```

Now you will be prompted to enter your username and password (personal access token). Follow these steps to get personal access token: [New GitHub personal access token](https://github.com/settings/tokens/new) â Add a name â Toggle `repo` and `workflow` â Click `Generate token` (scroll down) â Copy the token and paste it when prompted for your password.

  1. Now we can start a PR from this branch to our `main` branch and this will trigger the [workloads workflow](/GokuMohandas/Made-With-ML/blob/main/.github/workflows/workloads.yaml). If the workflow (Anyscale Jobs) succeeds, this will produce comments with the training and evaluation results directly on the PR.



[![](https://camo.githubusercontent.com/da3c36d291da9d55e1e62dffb4440632672e07f952d4874f9406aafcb819d064/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f636963642f636f6d6d656e74732e706e67)](https://camo.githubusercontent.com/da3c36d291da9d55e1e62dffb4440632672e07f952d4874f9406aafcb819d064/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f636963642f636f6d6d656e74732e706e67)

  1. If we like the results, we can merge the PR into the `main` branch. This will trigger the [serve workflow](/GokuMohandas/Made-With-ML/blob/main/.github/workflows/serve.yaml) which will rollout our new service to production!



### Continual learning

[](#continual-learning)

With our CI/CD workflow in place to deploy our application, we can now focus on continually improving our model. It becomes really easy to extend on this foundation to connect to scheduled runs (cron), [data pipelines](https://madewithml.com/courses/mlops/data-engineering/), drift detected through [monitoring](https://madewithml.com/courses/mlops/monitoring/), [online evaluation](https://madewithml.com/courses/mlops/evaluation/#online-evaluation), etc. And we can easily add additional context such as comparing any experiment with what's currently in production (directly in the PR even), etc.

[![](https://camo.githubusercontent.com/0c6bb2cbfd969b1e053fc3d626fa240409e5c8d723f43fa07b5c3c67640c296e/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f636963642f636f6e74696e75616c2e706e67)](https://camo.githubusercontent.com/0c6bb2cbfd969b1e053fc3d626fa240409e5c8d723f43fa07b5c3c67640c296e/68747470733a2f2f6d616465776974686d6c2e636f6d2f7374617469632f696d616765732f6d6c6f70732f636963642f636f6e74696e75616c2e706e67)

## FAQ

[](#faq)

### Jupyter notebook kernels

[](#jupyter-notebook-kernels)

Issues with configuring the notebooks with jupyter? By default, jupyter will use the kernel with our virtual environment but we can also manually add it to jupyter:

```
python3 -m ipykernel install --user --name=venv
```

Now we can open up a notebook â Kernel (top menu bar) â Change Kernel â `venv`. To ever delete this kernel, we can do the following:

```
jupyter kernelspec list jupyter kernelspec uninstall venv
```

## About

Learn how to design, develop, deploy and iterate on production-grade ML applications. 

[madewithml.com](https://madewithml.com "https://madewithml.com")

### Topics

[ python ](/topics/python "Topic: python") [ data-science ](/topics/data-science "Topic: data-science") [ machine-learning ](/topics/machine-learning "Topic: machine-learning") [ natural-language-processing ](/topics/natural-language-processing "Topic: natural-language-processing") [ deep-learning ](/topics/deep-learning "Topic: deep-learning") [ pytorch ](/topics/pytorch "Topic: pytorch") [ data-engineering ](/topics/data-engineering "Topic: data-engineering") [ ray ](/topics/ray "Topic: ray") [ data-quality ](/topics/data-quality "Topic: data-quality") [ distributed-training ](/topics/distributed-training "Topic: distributed-training") [ mlops ](/topics/mlops "Topic: mlops") [ distributed-ml ](/topics/distributed-ml "Topic: distributed-ml") [ llms ](/topics/llms "Topic: llms")

### Resources

[ Readme ](#readme-ov-file)

### License

[ MIT license ](#MIT-1-ov-file)

[ Activity](/GokuMohandas/Made-With-ML/activity)

### Stars

[ **38k** stars](/GokuMohandas/Made-With-ML/stargazers)

### Watchers

[ **1.2k** watching](/GokuMohandas/Made-With-ML/watchers)

### Forks

[ **6k** forks](/GokuMohandas/Made-With-ML/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2FGokuMohandas%2FMade-With-ML&report=GokuMohandas+%28user%29)

## Languages

  * [ Jupyter Notebook 97.8% ](/GokuMohandas/Made-With-ML/search?l=jupyter-notebook)
  * [ Python 2.1% ](/GokuMohandas/Made-With-ML/search?l=python)
  * Other 0.1%



## Footer

[ ](https://github.com "GitHub") Â© 2025 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You canât perform that action at this time. 
