{
    "id": "e605a35ec16e57c245a3da2fbaa852bc",
    "metadata": {
        "id": "e605a35ec16e57c245a3da2fbaa852bc",
        "url": "https://github.com/huggingface/text-generation-inference/",
        "title": "GitHub - huggingface/text-generation-inference: Large Language Model Text Generation Inference",
        "properties": {
            "description": "Large Language Model Text Generation Inference. Contribute to huggingface/text-generation-inference development by creating an account on GitHub.",
            "keywords": null,
            "author": null,
            "og:image": "https://opengraph.githubassets.com/24b80d9a19c197027f74d2135c802f15284ccf0d7177e1526824745eb2da815a/huggingface/text-generation-inference",
            "og:image:alt": "Large Language Model Text Generation Inference. Contribute to huggingface/text-generation-inference development by creating an account on GitHub.",
            "og:image:width": "1200",
            "og:image:height": "600",
            "og:site_name": "GitHub",
            "og:type": "object",
            "og:title": "GitHub - huggingface/text-generation-inference: Large Language Model Text Generation Inference",
            "og:url": "https://github.com/huggingface/text-generation-inference",
            "og:description": "Large Language Model Text Generation Inference. Contribute to huggingface/text-generation-inference development by creating an account on GitHub.",
            "twitter:image": "https://opengraph.githubassets.com/24b80d9a19c197027f74d2135c802f15284ccf0d7177e1526824745eb2da815a/huggingface/text-generation-inference",
            "twitter:site": "@github",
            "twitter:card": "summary_large_image",
            "twitter:title": "GitHub - huggingface/text-generation-inference: Large Language Model Text Generation Inference",
            "twitter:description": "Large Language Model Text Generation Inference. Contribute to huggingface/text-generation-inference development by creating an account on GitHub."
        }
    },
    "parent_metadata": {
        "id": "9cc6eb6a43b3a104f9fefa2cdabcd9e7",
        "url": "https://www.notion.so/Inference-Engines-9cc6eb6a43b3a104f9fefa2cdabcd9e7",
        "title": "Inference Engines",
        "properties": {
            "Type": "Leaf"
        }
    },
    "content": "[Skip to content](#start-of-content)\n\n## Navigation Menu\n\nToggle navigation\n\n[ ](/)\n\n[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fhuggingface%2Ftext-generation-inference%2F)\n\n  * Product \n\n    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)\n    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)\n    * [ Actions Automate any workflow  ](https://github.com/features/actions)\n    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)\n    * [ Issues Plan and track work  ](https://github.com/features/issues)\n    * [ Code Review Manage code changes  ](https://github.com/features/code-review)\n    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)\n    * [ Code Search Find more, search less  ](https://github.com/features/code-search)\n\nExplore\n    * [ All features ](https://github.com/features)\n    * [ Documentation ](https://docs.github.com)\n    * [ GitHub Skills ](https://skills.github.com)\n    * [ Blog ](https://github.blog)\n\n  * Solutions \n\nBy company size\n    * [ Enterprises ](https://github.com/enterprise)\n    * [ Small and medium teams ](https://github.com/team)\n    * [ Startups ](https://github.com/enterprise/startups)\n    * [ Nonprofits ](/solutions/industry/nonprofits)\n\nBy use case\n    * [ DevSecOps ](/solutions/use-case/devsecops)\n    * [ DevOps ](/solutions/use-case/devops)\n    * [ CI/CD ](/solutions/use-case/ci-cd)\n    * [ View all use cases ](/solutions/use-case)\n\nBy industry\n    * [ Healthcare ](/solutions/industry/healthcare)\n    * [ Financial services ](/solutions/industry/financial-services)\n    * [ Manufacturing ](/solutions/industry/manufacturing)\n    * [ Government ](/solutions/industry/government)\n    * [ View all industries ](/solutions/industry)\n\n[ View all solutions ](/solutions)\n\n  * Resources \n\nTopics\n    * [ AI ](/resources/articles/ai)\n    * [ DevOps ](/resources/articles/devops)\n    * [ Security ](/resources/articles/security)\n    * [ Software Development ](/resources/articles/software-development)\n    * [ View all ](/resources/articles)\n\nExplore\n    * [ Learning Pathways ](https://resources.github.com/learn/pathways)\n    * [ White papers, Ebooks, Webinars ](https://resources.github.com)\n    * [ Customer Stories ](https://github.com/customer-stories)\n    * [ Partners ](https://partner.github.com)\n    * [ Executive Insights ](https://github.com/solutions/executive-insights)\n\n  * Open Source \n\n    * [ GitHub Sponsors Fund open source developers  ](/sponsors)\n\n    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)\n\nRepositories\n    * [ Topics ](https://github.com/topics)\n    * [ Trending ](https://github.com/trending)\n    * [ Collections ](https://github.com/collections)\n\n  * Enterprise \n\n    * [ Enterprise platform AI-powered developer platform  ](/enterprise)\n\nAvailable add-ons\n    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)\n    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)\n    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)\n\n  * [Pricing](https://github.com/pricing)\n\n\n\nSearch or jump to...\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch \n\nClear\n\n[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)\n\n#  Provide feedback \n\nWe read every piece of feedback, and take your input very seriously.\n\nInclude my email address so I can be contacted\n\nCancel  Submit feedback \n\n#  Saved searches \n\n## Use saved searches to filter your results more quickly\n\nName\n\nQuery\n\nTo see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). \n\nCancel  Create saved search \n\n[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fhuggingface%2Ftext-generation-inference%2F)\n\n[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=huggingface%2Ftext-generation-inference) Reseting focus\n\nYou signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert\n\n{{ message }}\n\n[ huggingface ](/huggingface) / **[text-generation-inference](/huggingface/text-generation-inference) ** Public\n\n  * [ Notifications ](/login?return_to=%2Fhuggingface%2Ftext-generation-inference) You must be signed in to change notification settings\n  * [ Fork 1.1k ](/login?return_to=%2Fhuggingface%2Ftext-generation-inference)\n  * [ Star  9.6k ](/login?return_to=%2Fhuggingface%2Ftext-generation-inference)\n\n\n\n\nLarge Language Model Text Generation Inference \n\n[hf.co/docs/text-generation-inference](http://hf.co/docs/text-generation-inference \"http://hf.co/docs/text-generation-inference\")\n\n### License\n\n[ Apache-2.0 license ](/huggingface/text-generation-inference/blob/main/LICENSE)\n\n[ 9.6k stars ](/huggingface/text-generation-inference/stargazers) [ 1.1k forks ](/huggingface/text-generation-inference/forks) [ Branches ](/huggingface/text-generation-inference/branches) [ Tags ](/huggingface/text-generation-inference/tags) [ Activity ](/huggingface/text-generation-inference/activity)\n\n[ Star  ](/login?return_to=%2Fhuggingface%2Ftext-generation-inference)\n\n[ Notifications ](/login?return_to=%2Fhuggingface%2Ftext-generation-inference) You must be signed in to change notification settings\n\n  * [ Code ](/huggingface/text-generation-inference)\n  * [ Issues 180 ](/huggingface/text-generation-inference/issues)\n  * [ Pull requests 12 ](/huggingface/text-generation-inference/pulls)\n  * [ Discussions ](/huggingface/text-generation-inference/discussions)\n  * [ Actions ](/huggingface/text-generation-inference/actions)\n  * [ Security ](/huggingface/text-generation-inference/security)\n  * [ Insights ](/huggingface/text-generation-inference/pulse)\n\n\n\nAdditional navigation options\n\n  * [ Code  ](/huggingface/text-generation-inference)\n  * [ Issues  ](/huggingface/text-generation-inference/issues)\n  * [ Pull requests  ](/huggingface/text-generation-inference/pulls)\n  * [ Discussions  ](/huggingface/text-generation-inference/discussions)\n  * [ Actions  ](/huggingface/text-generation-inference/actions)\n  * [ Security  ](/huggingface/text-generation-inference/security)\n  * [ Insights  ](/huggingface/text-generation-inference/pulse)\n\n\n\n# huggingface/text-generation-inference\n\nmain\n\n[**192** Branches](/huggingface/text-generation-inference/branches)[**52** Tags](/huggingface/text-generation-inference/tags)\n\n[](/huggingface/text-generation-inference/branches)[](/huggingface/text-generation-inference/tags)\n\nGo to file\n\nCode\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\n## History\n\n[1,222 Commits](/huggingface/text-generation-inference/commits/main/)[](/huggingface/text-generation-inference/commits/main/)  \n[.github](/huggingface/text-generation-inference/tree/main/.github \".github\")| [.github](/huggingface/text-generation-inference/tree/main/.github \".github\")  \n[assets](/huggingface/text-generation-inference/tree/main/assets \"assets\")| [assets](/huggingface/text-generation-inference/tree/main/assets \"assets\")  \n[backends](/huggingface/text-generation-inference/tree/main/backends \"backends\")| [backends](/huggingface/text-generation-inference/tree/main/backends \"backends\")  \n[benchmark](/huggingface/text-generation-inference/tree/main/benchmark \"benchmark\")| [benchmark](/huggingface/text-generation-inference/tree/main/benchmark \"benchmark\")  \n[clients/python](/huggingface/text-generation-inference/tree/main/clients/python \"This path skips through empty directories\")| [clients/python](/huggingface/text-generation-inference/tree/main/clients/python \"This path skips through empty directories\")  \n[docs](/huggingface/text-generation-inference/tree/main/docs \"docs\")| [docs](/huggingface/text-generation-inference/tree/main/docs \"docs\")  \n[integration-tests](/huggingface/text-generation-inference/tree/main/integration-tests \"integration-tests\")| [integration-tests](/huggingface/text-generation-inference/tree/main/integration-tests \"integration-tests\")  \n[launcher](/huggingface/text-generation-inference/tree/main/launcher \"launcher\")| [launcher](/huggingface/text-generation-inference/tree/main/launcher \"launcher\")  \n[load_tests](/huggingface/text-generation-inference/tree/main/load_tests \"load_tests\")| [load_tests](/huggingface/text-generation-inference/tree/main/load_tests \"load_tests\")  \n[nix](/huggingface/text-generation-inference/tree/main/nix \"nix\")| [nix](/huggingface/text-generation-inference/tree/main/nix \"nix\")  \n[proto](/huggingface/text-generation-inference/tree/main/proto \"proto\")| [proto](/huggingface/text-generation-inference/tree/main/proto \"proto\")  \n[router](/huggingface/text-generation-inference/tree/main/router \"router\")| [router](/huggingface/text-generation-inference/tree/main/router \"router\")  \n[server](/huggingface/text-generation-inference/tree/main/server \"server\")| [server](/huggingface/text-generation-inference/tree/main/server \"server\")  \n[.dockerignore](/huggingface/text-generation-inference/blob/main/.dockerignore \".dockerignore\")| [.dockerignore](/huggingface/text-generation-inference/blob/main/.dockerignore \".dockerignore\")  \n[.gitignore](/huggingface/text-generation-inference/blob/main/.gitignore \".gitignore\")| [.gitignore](/huggingface/text-generation-inference/blob/main/.gitignore \".gitignore\")  \n[.pre-commit-config.yaml](/huggingface/text-generation-inference/blob/main/.pre-commit-config.yaml \".pre-commit-config.yaml\")| [.pre-commit-config.yaml](/huggingface/text-generation-inference/blob/main/.pre-commit-config.yaml \".pre-commit-config.yaml\")  \n[.redocly.lint-ignore.yaml](/huggingface/text-generation-inference/blob/main/.redocly.lint-ignore.yaml \".redocly.lint-ignore.yaml\")| [.redocly.lint-ignore.yaml](/huggingface/text-generation-inference/blob/main/.redocly.lint-ignore.yaml \".redocly.lint-ignore.yaml\")  \n[CODE_OF_CONDUCT.md](/huggingface/text-generation-inference/blob/main/CODE_OF_CONDUCT.md \"CODE_OF_CONDUCT.md\")| [CODE_OF_CONDUCT.md](/huggingface/text-generation-inference/blob/main/CODE_OF_CONDUCT.md \"CODE_OF_CONDUCT.md\")  \n[CONTRIBUTING.md](/huggingface/text-generation-inference/blob/main/CONTRIBUTING.md \"CONTRIBUTING.md\")| [CONTRIBUTING.md](/huggingface/text-generation-inference/blob/main/CONTRIBUTING.md \"CONTRIBUTING.md\")  \n[Cargo.lock](/huggingface/text-generation-inference/blob/main/Cargo.lock \"Cargo.lock\")| [Cargo.lock](/huggingface/text-generation-inference/blob/main/Cargo.lock \"Cargo.lock\")  \n[Cargo.toml](/huggingface/text-generation-inference/blob/main/Cargo.toml \"Cargo.toml\")| [Cargo.toml](/huggingface/text-generation-inference/blob/main/Cargo.toml \"Cargo.toml\")  \n[Dockerfile](/huggingface/text-generation-inference/blob/main/Dockerfile \"Dockerfile\")| [Dockerfile](/huggingface/text-generation-inference/blob/main/Dockerfile \"Dockerfile\")  \n[Dockerfile.nix](/huggingface/text-generation-inference/blob/main/Dockerfile.nix \"Dockerfile.nix\")| [Dockerfile.nix](/huggingface/text-generation-inference/blob/main/Dockerfile.nix \"Dockerfile.nix\")  \n[Dockerfile_amd](/huggingface/text-generation-inference/blob/main/Dockerfile_amd \"Dockerfile_amd\")| [Dockerfile_amd](/huggingface/text-generation-inference/blob/main/Dockerfile_amd \"Dockerfile_amd\")  \n[Dockerfile_intel](/huggingface/text-generation-inference/blob/main/Dockerfile_intel \"Dockerfile_intel\")| [Dockerfile_intel](/huggingface/text-generation-inference/blob/main/Dockerfile_intel \"Dockerfile_intel\")  \n[Dockerfile_trtllm](/huggingface/text-generation-inference/blob/main/Dockerfile_trtllm \"Dockerfile_trtllm\")| [Dockerfile_trtllm](/huggingface/text-generation-inference/blob/main/Dockerfile_trtllm \"Dockerfile_trtllm\")  \n[LICENSE](/huggingface/text-generation-inference/blob/main/LICENSE \"LICENSE\")| [LICENSE](/huggingface/text-generation-inference/blob/main/LICENSE \"LICENSE\")  \n[Makefile](/huggingface/text-generation-inference/blob/main/Makefile \"Makefile\")| [Makefile](/huggingface/text-generation-inference/blob/main/Makefile \"Makefile\")  \n[README.md](/huggingface/text-generation-inference/blob/main/README.md \"README.md\")| [README.md](/huggingface/text-generation-inference/blob/main/README.md \"README.md\")  \n[crate-hashes.json](/huggingface/text-generation-inference/blob/main/crate-hashes.json \"crate-hashes.json\")| [crate-hashes.json](/huggingface/text-generation-inference/blob/main/crate-hashes.json \"crate-hashes.json\")  \n[flake.lock](/huggingface/text-generation-inference/blob/main/flake.lock \"flake.lock\")| [flake.lock](/huggingface/text-generation-inference/blob/main/flake.lock \"flake.lock\")  \n[flake.nix](/huggingface/text-generation-inference/blob/main/flake.nix \"flake.nix\")| [flake.nix](/huggingface/text-generation-inference/blob/main/flake.nix \"flake.nix\")  \n[rust-toolchain.toml](/huggingface/text-generation-inference/blob/main/rust-toolchain.toml \"rust-toolchain.toml\")| [rust-toolchain.toml](/huggingface/text-generation-inference/blob/main/rust-toolchain.toml \"rust-toolchain.toml\")  \n[sagemaker-entrypoint.sh](/huggingface/text-generation-inference/blob/main/sagemaker-entrypoint.sh \"sagemaker-entrypoint.sh\")| [sagemaker-entrypoint.sh](/huggingface/text-generation-inference/blob/main/sagemaker-entrypoint.sh \"sagemaker-entrypoint.sh\")  \n[tgi-entrypoint.sh](/huggingface/text-generation-inference/blob/main/tgi-entrypoint.sh \"tgi-entrypoint.sh\")| [tgi-entrypoint.sh](/huggingface/text-generation-inference/blob/main/tgi-entrypoint.sh \"tgi-entrypoint.sh\")  \n[update_doc.py](/huggingface/text-generation-inference/blob/main/update_doc.py \"update_doc.py\")| [update_doc.py](/huggingface/text-generation-inference/blob/main/update_doc.py \"update_doc.py\")  \nView all files  \n  \n## Repository files navigation\n\n  * [README](#)\n  * [Code of conduct](#)\n  * [Apache-2.0 license](#)\n\n\n\n[ ![Making TGI deployment optimal](https://camo.githubusercontent.com/816a23feff65e234bf4393d453a7b3c8d24092f8630c2ed131b8b500ddb16dc1/68747470733a2f2f68756767696e67666163652e636f2f64617461736574732f4e617273696c2f7467695f6173736574732f7265736f6c76652f6d61696e2f7468756d626e61696c2e706e67) ](https://www.youtube.com/watch?v=jlMAX2Oaht0)\n\n# Text Generation Inference\n\n[](#text-generation-inference)\n\n[ ![GitHub Repo stars](https://camo.githubusercontent.com/afaad1cd3eb9f616fa5f8764f047603f53587984b922c9198ec1ab2895d9aae1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f68756767696e67666163652f746578742d67656e65726174696f6e2d696e666572656e63653f7374796c653d736f6369616c) ](https://github.com/huggingface/text-generation-inference) [ ![Swagger API documentation](https://camo.githubusercontent.com/f0fe98e6afc151ec5523b758b023431bacb2de779486f7488953b503f5643b88/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4150492d537761676765722d696e666f726d6174696f6e616c) ](https://huggingface.github.io/text-generation-inference)\n\nA Rust, Python and gRPC server for text generation inference. Used in production at [Hugging Face](https://huggingface.co) to power Hugging Chat, the Inference API and Inference Endpoint.\n\n## Table of contents\n\n[](#table-of-contents)\n\n  * [Get Started](#get-started)\n    * [Docker](#docker)\n    * [API documentation](#api-documentation)\n    * [Using a private or gated model](#using-a-private-or-gated-model)\n    * [A note on Shared Memory (shm)](#a-note-on-shared-memory-shm)\n    * [Distributed Tracing](#distributed-tracing)\n    * [Architecture](#architecture)\n    * [Local install](#local-install)\n    * [Local install (Nix)](#local-install-nix)\n  * [Optimized architectures](#optimized-architectures)\n  * [Run locally](#run-locally)\n    * [Run](#run)\n    * [Quantization](#quantization)\n  * [Develop](#develop)\n  * [Testing](#testing)\n\n\n\nText Generation Inference (TGI) is a toolkit for deploying and serving Large Language Models (LLMs). TGI enables high-performance text generation for the most popular open-source LLMs, including Llama, Falcon, StarCoder, BLOOM, GPT-NeoX, and [more](https://huggingface.co/docs/text-generation-inference/supported_models). TGI implements many features, such as:\n\n  * Simple launcher to serve most popular LLMs\n  * Production ready (distributed tracing with Open Telemetry, Prometheus metrics)\n  * Tensor Parallelism for faster inference on multiple GPUs\n  * Token streaming using Server-Sent Events (SSE)\n  * Continuous batching of incoming requests for increased total throughput\n  * [Messages API](https://huggingface.co/docs/text-generation-inference/en/messages_api) compatible with Open AI Chat Completion API\n  * Optimized transformers code for inference using [Flash Attention](https://github.com/HazyResearch/flash-attention) and [Paged Attention](https://github.com/vllm-project/vllm) on the most popular architectures\n  * Quantization with : \n    * [bitsandbytes](https://github.com/TimDettmers/bitsandbytes)\n    * [GPT-Q](https://arxiv.org/abs/2210.17323)\n    * [EETQ](https://github.com/NetEase-FuXi/EETQ)\n    * [AWQ](https://github.com/casper-hansen/AutoAWQ)\n    * [Marlin](https://github.com/IST-DASLab/marlin)\n    * [fp8](https://developer.nvidia.com/blog/nvidia-arm-and-intel-publish-fp8-specification-for-standardization-as-an-interchange-format-for-ai/)\n  * [Safetensors](https://github.com/huggingface/safetensors) weight loading\n  * Watermarking with [A Watermark for Large Language Models](https://arxiv.org/abs/2301.10226)\n  * Logits warper (temperature scaling, top-p, top-k, repetition penalty, more details see [transformers.LogitsProcessor](https://huggingface.co/docs/transformers/internal/generation_utils#transformers.LogitsProcessor))\n  * Stop sequences\n  * Log probabilities\n  * [Speculation](https://huggingface.co/docs/text-generation-inference/conceptual/speculation) ~2x latency\n  * [Guidance/JSON](https://huggingface.co/docs/text-generation-inference/conceptual/guidance). Specify output format to speed up inference and make sure the output is valid according to some specs..\n  * Custom Prompt Generation: Easily generate text by providing custom prompts to guide the model's output\n  * Fine-tuning Support: Utilize fine-tuned models for specific tasks to achieve higher accuracy and performance\n\n\n\n### Hardware support\n\n[](#hardware-support)\n\n  * [Nvidia](https://github.com/huggingface/text-generation-inference/pkgs/container/text-generation-inference)\n  * [AMD](https://github.com/huggingface/text-generation-inference/pkgs/container/text-generation-inference) (-rocm)\n  * [Inferentia](https://github.com/huggingface/optimum-neuron/tree/main/text-generation-inference)\n  * [Intel GPU](https://github.com/huggingface/text-generation-inference/pull/1475)\n  * [Gaudi](https://github.com/huggingface/tgi-gaudi)\n  * [Google TPU](https://huggingface.co/docs/optimum-tpu/howto/serving)\n\n\n\n## Get Started\n\n[](#get-started)\n\n### Docker\n\n[](#docker)\n\nFor a detailed starting guide, please see the [Quick Tour](https://huggingface.co/docs/text-generation-inference/quicktour). The easiest way of getting started is using the official Docker container:\n\n```\nmodel=HuggingFaceH4/zephyr-7b-beta # share a volume with the Docker container to avoid downloading weights every run volume=$PWD/data docker run --gpus all --shm-size 1g -p 8080:80 -v $volume:/data \\ ghcr.io/huggingface/text-generation-inference:3.0.0 --model-id $model\n```\n\nAnd then you can make requests like\n\n```\ncurl 127.0.0.1:8080/generate_stream \\ -X POST \\ -d '{\"inputs\":\"What is Deep Learning?\",\"parameters\":{\"max_new_tokens\":20}}' \\ -H 'Content-Type: application/json'\n```\n\nYou can also use [TGI's Messages API](https://huggingface.co/docs/text-generation-inference/en/messages_api) to obtain Open AI Chat Completion API compatible responses.\n\n```\ncurl localhost:8080/v1/chat/completions \\ -X POST \\ -d '{ \"model\": \"tgi\", \"messages\": [ { \"role\": \"system\", \"content\": \"You are a helpful assistant.\" }, { \"role\": \"user\", \"content\": \"What is deep learning?\" } ], \"stream\": true, \"max_tokens\": 20 }' \\ -H 'Content-Type: application/json'\n```\n\n**Note:** To use NVIDIA GPUs, you need to install the [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html). We also recommend using NVIDIA drivers with CUDA version 12.2 or higher. For running the Docker container on a machine with no GPUs or CUDA support, it is enough to remove the `--gpus all` flag and add `--disable-custom-kernels`, please note CPU is not the intended platform for this project, so performance might be subpar.\n\n**Note:** TGI supports AMD Instinct MI210 and MI250 GPUs. Details can be found in the [Supported Hardware documentation](https://huggingface.co/docs/text-generation-inference/installation_amd#using-tgi-with-amd-gpus). To use AMD GPUs, please use `docker run --device /dev/kfd --device /dev/dri --shm-size 1g -p 8080:80 -v $volume:/data ghcr.io/huggingface/text-generation-inference:3.0.0-rocm --model-id $model` instead of the command above.\n\nTo see all options to serve your models (in the [code](https://github.com/huggingface/text-generation-inference/blob/main/launcher/src/main.rs) or in the cli):\n\n```\n`text-generation-launcher --help `\n```\n\n### API documentation\n\n[](#api-documentation)\n\nYou can consult the OpenAPI documentation of the `text-generation-inference` REST API using the `/docs` route. The Swagger UI is also available at: <https://huggingface.github.io/text-generation-inference>.\n\n### Using a private or gated model\n\n[](#using-a-private-or-gated-model)\n\nYou have the option to utilize the `HF_TOKEN` environment variable for configuring the token employed by `text-generation-inference`. This allows you to gain access to protected resources.\n\nFor example, if you want to serve the gated Llama V2 model variants:\n\n  1. Go to <https://huggingface.co/settings/tokens>\n  2. Copy your CLI READ token\n  3. Export `HF_TOKEN=<your CLI READ token>`\n\n\n\nor with Docker:\n\n```\nmodel=meta-llama/Meta-Llama-3.1-8B-Instruct volume=$PWD/data # share a volume with the Docker container to avoid downloading weights every run token=<your cli READ token> docker run --gpus all --shm-size 1g -e HF_TOKEN=$token -p 8080:80 -v $volume:/data \\ ghcr.io/huggingface/text-generation-inference:3.0.0 --model-id $model\n```\n\n### A note on Shared Memory (shm)\n\n[](#a-note-on-shared-memory-shm)\n\n[`NCCL`](https://docs.nvidia.com/deeplearning/nccl/user-guide/docs/index.html) is a communication framework used by `PyTorch` to do distributed training/inference. `text-generation-inference` makes use of `NCCL` to enable Tensor Parallelism to dramatically speed up inference for large language models.\n\nIn order to share data between the different devices of a `NCCL` group, `NCCL` might fall back to using the host memory if peer-to-peer using NVLink or PCI is not possible.\n\nTo allow the container to use 1G of Shared Memory and support SHM sharing, we add `--shm-size 1g` on the above command.\n\nIf you are running `text-generation-inference` inside `Kubernetes`. You can also add Shared Memory to the container by creating a volume with:\n\n```\n- name: shm emptyDir: medium: Memory sizeLimit: 1Gi\n```\n\nand mounting it to `/dev/shm`.\n\nFinally, you can also disable SHM sharing by using the `NCCL_SHM_DISABLE=1` environment variable. However, note that this will impact performance.\n\n### Distributed Tracing\n\n[](#distributed-tracing)\n\n`text-generation-inference` is instrumented with distributed tracing using OpenTelemetry. You can use this feature by setting the address to an OTLP collector with the `--otlp-endpoint` argument. The default service name can be overridden with the `--otlp-service-name` argument\n\n### Architecture\n\n[](#architecture)\n\n[![TGI architecture](https://camo.githubusercontent.com/865b15b83e926b08c3ce2ad186519ad520bce2241b89095edcf7416d2be91aba/68747470733a2f2f68756767696e67666163652e636f2f64617461736574732f68756767696e67666163652f646f63756d656e746174696f6e2d696d616765732f7265736f6c76652f6d61696e2f5447492e706e67)](https://camo.githubusercontent.com/865b15b83e926b08c3ce2ad186519ad520bce2241b89095edcf7416d2be91aba/68747470733a2f2f68756767696e67666163652e636f2f64617461736574732f68756767696e67666163652f646f63756d656e746174696f6e2d696d616765732f7265736f6c76652f6d61696e2f5447492e706e67)\n\nDetailed blogpost by Adyen on TGI inner workings: [LLM inference at scale with TGI (Martin Iglesias Goyanes - Adyen, 2024)](https://www.adyen.com/knowledge-hub/llm-inference-at-scale-with-tgi)\n\n### Local install\n\n[](#local-install)\n\nYou can also opt to install `text-generation-inference` locally.\n\nFirst clone the repository and change directory into it:\n\n```\ngit clone https://github.com/huggingface/text-generation-inference cd text-generation-inference\n```\n\nThen [install Rust](https://rustup.rs/) and create a Python virtual environment with at least Python 3.9, e.g. using `conda` or `python venv`:\n\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh #using conda conda create -n text-generation-inference python=3.11 conda activate text-generation-inference #using python venv python3 -m venv .venv source .venv/bin/activate\n```\n\nYou may also need to install Protoc.\n\nOn Linux:\n\n```\nPROTOC_ZIP=protoc-21.12-linux-x86_64.zip curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v21.12/$PROTOC_ZIP sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*' rm -f $PROTOC_ZIP\n```\n\nOn MacOS, using Homebrew:\n\n```\nbrew install protobuf\n```\n\nThen run:\n\n```\nBUILD_EXTENSIONS=True make install # Install repository and HF/transformer fork with CUDA kernels text-generation-launcher --model-id mistralai/Mistral-7B-Instruct-v0.2\n```\n\n**Note:** on some machines, you may also need the OpenSSL libraries and gcc. On Linux machines, run:\n\n```\nsudo apt-get install libssl-dev gcc -y\n```\n\n### Local install (Nix)\n\n[](#local-install-nix)\n\nAnother option is to install `text-generation-inference` locally using [Nix](https://nixos.org). Currently, we only support Nix on x86_64 Linux with CUDA GPUs. When using Nix, all dependencies can be pulled from a binary cache, removing the need to build them locally.\n\nFirst follow the instructions to [install Cachix and enable the TGI cache](https://app.cachix.org/cache/text-generation-inference). Setting up the cache is important, otherwise Nix will build many of the dependencies locally, which can take hours.\n\nAfter that you can run TGI with `nix run`:\n\n```\nnix run . -- --model-id meta-llama/Llama-3.1-8B-Instruct\n```\n\n**Note:** when you are using Nix on a non-NixOS system, you have to [make some symlinks](https://danieldk.eu/Nix-CUDA-on-non-NixOS-systems#make-runopengl-driverlib-and-symlink-the-driver-library) to make the CUDA driver libraries visible to Nix packages.\n\nFor TGI development, you can use the `impure` dev shell:\n\n```\nnix develop .#impure # Only needed the first time the devshell is started or after updating the protobuf. ( cd server mkdir text_generation_server/pb || true python -m grpc_tools.protoc -I../proto/v3 --python_out=text_generation_server/pb \\ --grpc_python_out=text_generation_server/pb --mypy_out=text_generation_server/pb ../proto/v3/generate.proto find text_generation_server/pb/ -type f -name \"*.py\" -print0 -exec sed -i -e 's/^\\\\(import.*pb2\\\\)/from . \\1/g' {} \\; touch text_generation_server/pb/__init__.py )\n```\n\nAll development dependencies (cargo, Python, Torch), etc. are available in this dev shell.\n\n## Optimized architectures\n\n[](#optimized-architectures)\n\nTGI works out of the box to serve optimized models for all modern models. They can be found in [this list](https://huggingface.co/docs/text-generation-inference/supported_models).\n\nOther architectures are supported on a best-effort basis using:\n\n`AutoModelForCausalLM.from_pretrained(<model>, device_map=\"auto\")`\n\nor\n\n`AutoModelForSeq2SeqLM.from_pretrained(<model>, device_map=\"auto\")`\n\n## Run locally\n\n[](#run-locally)\n\n### Run\n\n[](#run)\n\n```\ntext-generation-launcher --model-id mistralai/Mistral-7B-Instruct-v0.2\n```\n\n### Quantization\n\n[](#quantization)\n\nYou can also run pre-quantized weights (AWQ, GPTQ, Marlin) or on-the-fly quantize weights with bitsandbytes, EETQ, fp8, to reduce the VRAM requirement:\n\n```\ntext-generation-launcher --model-id mistralai/Mistral-7B-Instruct-v0.2 --quantize\n```\n\n4bit quantization is available using the [NF4 and FP4 data types from bitsandbytes](https://arxiv.org/pdf/2305.14314.pdf). It can be enabled by providing `--quantize bitsandbytes-nf4` or `--quantize bitsandbytes-fp4` as a command line argument to `text-generation-launcher`.\n\nRead more about quantization in the [Quantization documentation](https://huggingface.co/docs/text-generation-inference/en/conceptual/quantization).\n\n## Develop\n\n[](#develop)\n\n```\nmake server-dev make router-dev\n```\n\n## Testing\n\n[](#testing)\n\n```\n# python make python-server-tests make python-client-tests # or both server and client tests make python-tests # rust cargo tests make rust-tests # integration tests make integration-tests\n```\n\n## About\n\nLarge Language Model Text Generation Inference \n\n[hf.co/docs/text-generation-inference](http://hf.co/docs/text-generation-inference \"http://hf.co/docs/text-generation-inference\")\n\n### Topics\n\n[ nlp ](/topics/nlp \"Topic: nlp\") [ bloom ](/topics/bloom \"Topic: bloom\") [ deep-learning ](/topics/deep-learning \"Topic: deep-learning\") [ inference ](/topics/inference \"Topic: inference\") [ pytorch ](/topics/pytorch \"Topic: pytorch\") [ falcon ](/topics/falcon \"Topic: falcon\") [ transformer ](/topics/transformer \"Topic: transformer\") [ gpt ](/topics/gpt \"Topic: gpt\") [ starcoder ](/topics/starcoder \"Topic: starcoder\")\n\n### Resources\n\n[ Readme ](#readme-ov-file)\n\n### License\n\n[ Apache-2.0 license ](#Apache-2.0-1-ov-file)\n\n### Code of conduct\n\n[ Code of conduct ](#coc-ov-file)\n\n[ Activity](/huggingface/text-generation-inference/activity)\n\n[ Custom properties](/huggingface/text-generation-inference/custom-properties)\n\n### Stars\n\n[ **9.6k** stars](/huggingface/text-generation-inference/stargazers)\n\n### Watchers\n\n[ **105** watching](/huggingface/text-generation-inference/watchers)\n\n### Forks\n\n[ **1.1k** forks](/huggingface/text-generation-inference/forks)\n\n[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fhuggingface%2Ftext-generation-inference&report=huggingface+%28user%29)\n\n##  [Releases 52](/huggingface/text-generation-inference/releases)\n\n[ v3.0.1 Latest  Dec 11, 2024 ](/huggingface/text-generation-inference/releases/tag/v3.0.1)\n\n[+ 51 releases](/huggingface/text-generation-inference/releases)\n\n##  [Packages 1](/orgs/huggingface/packages?repo_name=text-generation-inference)\n\n  * [ text-generation-inference ](/orgs/huggingface/packages/container/package/text-generation-inference)\n\n\n\n##  [Contributors 152](/huggingface/text-generation-inference/graphs/contributors)\n\n  * [ ![@OlivierDehaene](https://avatars.githubusercontent.com/u/23298448?s=64&v=4) ](https://github.com/OlivierDehaene)\n  * [ ![@Narsil](https://avatars.githubusercontent.com/u/204321?s=64&v=4) ](https://github.com/Narsil)\n  * [ ![@danieldk](https://avatars.githubusercontent.com/u/49398?s=64&v=4) ](https://github.com/danieldk)\n  * [ ![@drbh](https://avatars.githubusercontent.com/u/9896130?s=64&v=4) ](https://github.com/drbh)\n  * [ ![@sywangyi](https://avatars.githubusercontent.com/u/36058628?s=64&v=4) ](https://github.com/sywangyi)\n  * [ ![@osanseviero](https://avatars.githubusercontent.com/u/7246357?s=64&v=4) ](https://github.com/osanseviero)\n  * [ ![@fxmarty](https://avatars.githubusercontent.com/u/9808326?s=64&v=4) ](https://github.com/fxmarty)\n  * [ ![@njhill](https://avatars.githubusercontent.com/u/16958488?s=64&v=4) ](https://github.com/njhill)\n  * [ ![@merveenoyan](https://avatars.githubusercontent.com/u/53175384?s=64&v=4) ](https://github.com/merveenoyan)\n  * [ ![@Wauplin](https://avatars.githubusercontent.com/u/11801849?s=64&v=4) ](https://github.com/Wauplin)\n  * [ ![@mfuntowicz](https://avatars.githubusercontent.com/u/2241520?s=64&v=4) ](https://github.com/mfuntowicz)\n  * [ ![@ErikKaum](https://avatars.githubusercontent.com/u/24875419?s=64&v=4) ](https://github.com/ErikKaum)\n  * [ ![@oOraph](https://avatars.githubusercontent.com/u/13552058?s=64&v=4) ](https://github.com/oOraph)\n  * [ ![@mht-sharma](https://avatars.githubusercontent.com/u/21088122?s=64&v=4) ](https://github.com/mht-sharma)\n\n\n\n[+ 138 contributors](/huggingface/text-generation-inference/graphs/contributors)\n\n## Languages\n\n  * [ Python 70.5% ](/huggingface/text-generation-inference/search?l=python)\n  * [ Rust 22.2% ](/huggingface/text-generation-inference/search?l=rust)\n  * [ Cuda 4.6% ](/huggingface/text-generation-inference/search?l=cuda)\n  * [ C++ 1.3% ](/huggingface/text-generation-inference/search?l=c%2B%2B)\n  * [ Nix 0.4% ](/huggingface/text-generation-inference/search?l=nix)\n  * [ Dockerfile 0.3% ](/huggingface/text-generation-inference/search?l=dockerfile)\n  * Other 0.7%\n\n\n\n## Footer\n\n[ ](https://github.com \"GitHub\") © 2025 GitHub, Inc. \n\n### Footer navigation\n\n  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)\n  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)\n  * [Security](https://github.com/security)\n  * [Status](https://www.githubstatus.com/)\n  * [Docs](https://docs.github.com/)\n  * [Contact](https://support.github.com?tags=dotcom-footer)\n  * Manage cookies \n  * Do not share my personal information \n\n\n\nYou can’t perform that action at this time. \n",
    "content_quality_score": 0.9,
    "summary": null,
    "child_urls": [
        "https://github.com/huggingface/text-generation-inference/#start-of-content",
        "https://github.com/",
        "https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fhuggingface%2Ftext-generation-inference%2F",
        "https://github.com/features/copilot",
        "https://github.com/features/security",
        "https://github.com/features/actions",
        "https://github.com/features/codespaces",
        "https://github.com/features/issues",
        "https://github.com/features/code-review",
        "https://github.com/features/discussions",
        "https://github.com/features/code-search",
        "https://github.com/features",
        "https://docs.github.com",
        "https://skills.github.com",
        "https://github.com/enterprise",
        "https://github.com/team",
        "https://github.com/enterprise/startups",
        "https://github.com/solutions/industry/nonprofits",
        "https://github.com/solutions/use-case/devsecops",
        "https://github.com/solutions/use-case/devops",
        "https://github.com/solutions/use-case/ci-cd",
        "https://github.com/solutions/use-case",
        "https://github.com/solutions/industry/healthcare",
        "https://github.com/solutions/industry/financial-services",
        "https://github.com/solutions/industry/manufacturing",
        "https://github.com/solutions/industry/government",
        "https://github.com/solutions/industry",
        "https://github.com/solutions",
        "https://github.com/resources/articles/ai",
        "https://github.com/resources/articles/devops",
        "https://github.com/resources/articles/security",
        "https://github.com/resources/articles/software-development",
        "https://github.com/resources/articles",
        "https://resources.github.com/learn/pathways",
        "https://resources.github.com",
        "https://github.com/customer-stories",
        "https://partner.github.com",
        "https://github.com/solutions/executive-insights",
        "https://github.com/sponsors",
        "https://github.com/readme",
        "https://github.com/topics",
        "https://github.com/trending",
        "https://github.com/collections",
        "https://github.com/enterprise/advanced-security",
        "https://github.com/features/copilot#enterprise",
        "https://github.com/premium-support",
        "https://github.com/pricing",
        "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax",
        "https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=huggingface%2Ftext-generation-inference",
        "https://github.com/huggingface",
        "https://github.com/huggingface/text-generation-inference",
        "https://github.com/login?return_to=%2Fhuggingface%2Ftext-generation-inference",
        "https://github.com/huggingface/text-generation-inference/blob/main/LICENSE",
        "https://github.com/huggingface/text-generation-inference/stargazers",
        "https://github.com/huggingface/text-generation-inference/forks",
        "https://github.com/huggingface/text-generation-inference/branches",
        "https://github.com/huggingface/text-generation-inference/tags",
        "https://github.com/huggingface/text-generation-inference/activity",
        "https://github.com/huggingface/text-generation-inference/issues",
        "https://github.com/huggingface/text-generation-inference/pulls",
        "https://github.com/huggingface/text-generation-inference/discussions",
        "https://github.com/huggingface/text-generation-inference/actions",
        "https://github.com/huggingface/text-generation-inference/security",
        "https://github.com/huggingface/text-generation-inference/pulse",
        "https://github.com/huggingface/text-generation-inference/commits/main/",
        "https://github.com/huggingface/text-generation-inference/tree/main/.github",
        "https://github.com/huggingface/text-generation-inference/tree/main/assets",
        "https://github.com/huggingface/text-generation-inference/tree/main/backends",
        "https://github.com/huggingface/text-generation-inference/tree/main/benchmark",
        "https://github.com/huggingface/text-generation-inference/tree/main/clients/python",
        "https://github.com/huggingface/text-generation-inference/tree/main/docs",
        "https://github.com/huggingface/text-generation-inference/tree/main/integration-tests",
        "https://github.com/huggingface/text-generation-inference/tree/main/launcher",
        "https://github.com/huggingface/text-generation-inference/tree/main/load_tests",
        "https://github.com/huggingface/text-generation-inference/tree/main/nix",
        "https://github.com/huggingface/text-generation-inference/tree/main/proto",
        "https://github.com/huggingface/text-generation-inference/tree/main/router",
        "https://github.com/huggingface/text-generation-inference/tree/main/server",
        "https://github.com/huggingface/text-generation-inference/blob/main/.dockerignore",
        "https://github.com/huggingface/text-generation-inference/blob/main/.gitignore",
        "https://github.com/huggingface/text-generation-inference/blob/main/.pre-commit-config.yaml",
        "https://github.com/huggingface/text-generation-inference/blob/main/.redocly.lint-ignore.yaml",
        "https://github.com/huggingface/text-generation-inference/blob/main/CODE_OF_CONDUCT.md",
        "https://github.com/huggingface/text-generation-inference/blob/main/CONTRIBUTING.md",
        "https://github.com/huggingface/text-generation-inference/blob/main/Cargo.lock",
        "https://github.com/huggingface/text-generation-inference/blob/main/Cargo.toml",
        "https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile",
        "https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile.nix",
        "https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_amd",
        "https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_intel",
        "https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile_trtllm",
        "https://github.com/huggingface/text-generation-inference/blob/main/Makefile",
        "https://github.com/huggingface/text-generation-inference/blob/main/README.md",
        "https://github.com/huggingface/text-generation-inference/blob/main/crate-hashes.json",
        "https://github.com/huggingface/text-generation-inference/blob/main/flake.lock",
        "https://github.com/huggingface/text-generation-inference/blob/main/flake.nix",
        "https://github.com/huggingface/text-generation-inference/blob/main/rust-toolchain.toml",
        "https://github.com/huggingface/text-generation-inference/blob/main/sagemaker-entrypoint.sh",
        "https://github.com/huggingface/text-generation-inference/blob/main/tgi-entrypoint.sh",
        "https://github.com/huggingface/text-generation-inference/blob/main/update_doc.py",
        "https://github.com/huggingface/text-generation-inference/",
        "https://github.com/huggingface/text-generation-inference/#text-generation-inference",
        "https://github.com/huggingface/text-generation-inference/#table-of-contents",
        "https://github.com/huggingface/text-generation-inference/#get-started",
        "https://github.com/huggingface/text-generation-inference/#docker",
        "https://github.com/huggingface/text-generation-inference/#api-documentation",
        "https://github.com/huggingface/text-generation-inference/#using-a-private-or-gated-model",
        "https://github.com/huggingface/text-generation-inference/#a-note-on-shared-memory-shm",
        "https://github.com/huggingface/text-generation-inference/#distributed-tracing",
        "https://github.com/huggingface/text-generation-inference/#architecture",
        "https://github.com/huggingface/text-generation-inference/#local-install",
        "https://github.com/huggingface/text-generation-inference/#local-install-nix",
        "https://github.com/huggingface/text-generation-inference/#optimized-architectures",
        "https://github.com/huggingface/text-generation-inference/#run-locally",
        "https://github.com/huggingface/text-generation-inference/#run",
        "https://github.com/huggingface/text-generation-inference/#quantization",
        "https://github.com/huggingface/text-generation-inference/#develop",
        "https://github.com/huggingface/text-generation-inference/#testing",
        "https://github.com/HazyResearch/flash-attention",
        "https://github.com/vllm-project/vllm",
        "https://github.com/TimDettmers/bitsandbytes",
        "https://github.com/NetEase-FuXi/EETQ",
        "https://github.com/casper-hansen/AutoAWQ",
        "https://github.com/IST-DASLab/marlin",
        "https://github.com/huggingface/safetensors",
        "https://github.com/huggingface/text-generation-inference/#hardware-support",
        "https://github.com/huggingface/text-generation-inference/pkgs/container/text-generation-inference",
        "https://github.com/huggingface/optimum-neuron/tree/main/text-generation-inference",
        "https://github.com/huggingface/text-generation-inference/pull/1475",
        "https://github.com/huggingface/tgi-gaudi",
        "https://github.com/huggingface/text-generation-inference/blob/main/launcher/src/main.rs",
        "https://github.com/topics/nlp",
        "https://github.com/topics/bloom",
        "https://github.com/topics/deep-learning",
        "https://github.com/topics/inference",
        "https://github.com/topics/pytorch",
        "https://github.com/topics/falcon",
        "https://github.com/topics/transformer",
        "https://github.com/topics/gpt",
        "https://github.com/topics/starcoder",
        "https://github.com/huggingface/text-generation-inference/#readme-ov-file",
        "https://github.com/huggingface/text-generation-inference/#Apache-2.0-1-ov-file",
        "https://github.com/huggingface/text-generation-inference/#coc-ov-file",
        "https://github.com/huggingface/text-generation-inference/custom-properties",
        "https://github.com/huggingface/text-generation-inference/watchers",
        "https://github.com/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fhuggingface%2Ftext-generation-inference&report=huggingface+%28user%29",
        "https://github.com/huggingface/text-generation-inference/releases",
        "https://github.com/huggingface/text-generation-inference/releases/tag/v3.0.1",
        "https://github.com/orgs/huggingface/packages?repo_name=text-generation-inference",
        "https://github.com/orgs/huggingface/packages/container/package/text-generation-inference",
        "https://github.com/huggingface/text-generation-inference/graphs/contributors",
        "https://github.com/OlivierDehaene",
        "https://github.com/Narsil",
        "https://github.com/danieldk",
        "https://github.com/drbh",
        "https://github.com/sywangyi",
        "https://github.com/osanseviero",
        "https://github.com/fxmarty",
        "https://github.com/njhill",
        "https://github.com/merveenoyan",
        "https://github.com/Wauplin",
        "https://github.com/mfuntowicz",
        "https://github.com/ErikKaum",
        "https://github.com/oOraph",
        "https://github.com/mht-sharma",
        "https://github.com/huggingface/text-generation-inference/search?l=python",
        "https://github.com/huggingface/text-generation-inference/search?l=rust",
        "https://github.com/huggingface/text-generation-inference/search?l=cuda",
        "https://github.com/huggingface/text-generation-inference/search?l=c%2B%2B",
        "https://github.com/huggingface/text-generation-inference/search?l=nix",
        "https://github.com/huggingface/text-generation-inference/search?l=dockerfile",
        "https://github.com",
        "https://docs.github.com/site-policy/github-terms/github-terms-of-service",
        "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement",
        "https://github.com/security",
        "https://docs.github.com/",
        "https://support.github.com?tags=dotcom-footer",
        "https://github.blog",
        "http://hf.co/docs/text-generation-inference",
        "https://www.youtube.com/watch?v=jlMAX2Oaht0",
        "https://huggingface.github.io/text-generation-inference",
        "https://huggingface.co",
        "https://huggingface.co/docs/text-generation-inference/supported_models",
        "https://huggingface.co/docs/text-generation-inference/en/messages_api",
        "https://arxiv.org/abs/2210.17323",
        "https://developer.nvidia.com/blog/nvidia-arm-and-intel-publish-fp8-specification-for-standardization-as-an-interchange-format-for-ai/",
        "https://arxiv.org/abs/2301.10226",
        "https://huggingface.co/docs/transformers/internal/generation_utils#transformers.LogitsProcessor",
        "https://huggingface.co/docs/text-generation-inference/conceptual/speculation",
        "https://huggingface.co/docs/text-generation-inference/conceptual/guidance",
        "https://huggingface.co/docs/optimum-tpu/howto/serving",
        "https://huggingface.co/docs/text-generation-inference/quicktour",
        "https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html",
        "https://huggingface.co/docs/text-generation-inference/installation_amd#using-tgi-with-amd-gpus",
        "https://huggingface.co/settings/tokens",
        "https://docs.nvidia.com/deeplearning/nccl/user-guide/docs/index.html",
        "https://camo.githubusercontent.com/865b15b83e926b08c3ce2ad186519ad520bce2241b89095edcf7416d2be91aba/68747470733a2f2f68756767696e67666163652e636f2f64617461736574732f68756767696e67666163652f646f63756d656e746174696f6e2d696d616765732f7265736f6c76652f6d61696e2f5447492e706e67",
        "https://www.adyen.com/knowledge-hub/llm-inference-at-scale-with-tgi",
        "https://rustup.rs/",
        "https://nixos.org",
        "https://app.cachix.org/cache/text-generation-inference",
        "https://danieldk.eu/Nix-CUDA-on-non-NixOS-systems#make-runopengl-driverlib-and-symlink-the-driver-library",
        "https://arxiv.org/pdf/2305.14314.pdf",
        "https://huggingface.co/docs/text-generation-inference/en/conceptual/quantization",
        "https://www.githubstatus.com/"
    ]
}