Kafka in the Cloud: Why it’s 10x better with Confluent | [Find out more](https://www.confluent.io/10x-apache-kafka/)

[Login](https://confluent.cloud/login) [Contact Us](/en-gb/contact)

[](/en-gb/ "Confluent")

  * Why Confluent
    * [Data Streaming Platform ](/en-gb/data-streaming/)[Confluent vs. OSS Kafka® ](/en-gb/apache-kafka-vs-confluent/)[Reinventing Kafka ](/en-gb/cloud-kafka/)[Streaming Data Pipelines ](/en-gb/streaming-data-pipelines/)[Our Customers ](/en-gb/customers/)[Partners ](/en-gb/partners/)[Analyst Recognition ](/en-gb/recognition/analyst-reports/)

  * Products
    * Choose Your deployment

[Confluent Cloud ](/en-gb/confluent-cloud/)

      * [Pricing](/confluent-cloud/pricing)
      * [Login](https://confluent.cloud/login)

[Software: Confluent Platform ](/en-gb/product/confluent-platform/)

      * [Subscription](/subscription)

    * [Data Streaming Platform ](/en-gb/data-streaming/)[Connectors ](/en-gb/product/confluent-connectors/)[Apache Flink ](/en-gb/product/flink/)[Stream Governance ](/en-gb/product/stream-governance/)[Stream Designer ](/en-gb/product/stream-designer/)

[Confluent vs. Kafka: Why you need Confluent ](/en-gb/apache-kafka-vs-confluent/)[Reinventing Kafka for the Data Streaming Era ](/en-gb/cloud-kafka/)[Streaming Data Pipelines ](/en-gb/streaming-data-pipelines/)

  * Pricing
    * [Confluent Pricing ](/en-gb/confluent-cloud/pricing/)[Cost Estimator ](/en-gb/pricing/cost-estimator/)

    * [Why Serverless Matters ](/en-gb/blog/sizing-scaling-kafka-clusters-with-confluent-cloud/)[Introducing Freight Clusters ](/en-gb/blog/introducing-confluent-cloud-freight-clusters/?utm_campaign=tm.optimization_cd.q2fy24-freight-clusters-early-access&utm_medium=io-banner)

  * Solutions
    * Use cases

[Shift Left ](/en-gb/shift-left/processing-governance/)[Streaming Data Pipelines ](/en-gb/streaming-data-pipelines/)[Generative AI ](/en-gb/generative-ai/)[Use Case Architectures ](/en-gb/use-case/)[See All ](/en-gb/solutions/)

    * Industries

[Financial Services ](/en-gb/industry-solutions/financial-services/)[Retail & eCommerce ](/en-gb/industry-solutions/retail/)[Manufacturing & Automotive ](/en-gb/industry-solutions/manufacturing/)[Public Sector ](/en-gb/industry-solutions/public-sector/)[Telecommunications ](/en-gb/industry-solutions/telco/)[All Industries ](/en-gb/solutions/#industries)

[Read the Builder's Guide to Streaming Data Mesh eBook ](/en-gb/resources/ebook/builders-guide-to-streaming-data-mesh/)

  * Learn
    * [Blog ](/en-gb/blog/)[Resources ](/en-gb/resources/)[Training ](/en-gb/training/)[Professional Services ](/en-gb/services/)[Data Glossary ](/en-gb/learn/)

    * [Careers ](https://careers.confluent.io)[Webinars ](/en-gb/online-talks/)[Meetups ](https://events.confluent.io/meetups)[Data in Motion Tour ](https://events.confluent.io/dimt2024global)[Current 2024: Data Streaming Event ](https://current.confluent.io/)

[Generative AI ](/en-gb/generative-ai/)[Microservices with Confluent ](/en-gb/resources/online-talk/microservices-with-confluent/)

  * Developers
    * [Confluent Developer ](https://developer.confluent.io/)[Docs ](https://docs.confluent.io/)

    * [Apache Kafka Quick Start ](https://developer.confluent.io/quickstart/kafka-on-confluent-cloud)[Ask the Community ](/en-gb/community/ask-the-community/)

  * [Watch Demo](/en-gb/online-talks/confluent-cloud-demo-on-demand/)[Start For Free](/en-gb/get-started/)
  * [](#)
  * UK English




[Watch Demo](/en-gb/online-talks/confluent-cloud-demo-on-demand/)[Start For Free](/en-gb/get-started/)

  * [Watch Demo](/en-gb/online-talks/confluent-cloud-demo-on-demand/)[Start For Free](/en-gb/get-started/)

  * Why Confluent

    * [Data Streaming Platform ](/en-gb/data-streaming/)[Confluent vs. OSS Kafka® ](/en-gb/apache-kafka-vs-confluent/)[Reinventing Kafka ](/en-gb/cloud-kafka/)[Streaming Data Pipelines ](/en-gb/streaming-data-pipelines/)[Our Customers ](/en-gb/customers/)[Partners ](/en-gb/partners/)[Analyst Recognition ](/en-gb/recognition/analyst-reports/)

  * Products

    * Choose Your deployment

[Confluent Cloud ](/en-gb/confluent-cloud/)

      * [Pricing](/confluent-cloud/pricing)
      * [Login](https://confluent.cloud/login)

[Software: Confluent Platform ](/en-gb/product/confluent-platform/)

      * [Subscription](/subscription)

    * [Data Streaming Platform ](/en-gb/data-streaming/)[Connectors ](/en-gb/product/confluent-connectors/)[Apache Flink ](/en-gb/product/flink/)[Stream Governance ](/en-gb/product/stream-governance/)[Stream Designer ](/en-gb/product/stream-designer/)

[Confluent vs. Kafka: Why you need Confluent ](/en-gb/apache-kafka-vs-confluent/)[Reinventing Kafka for the Data Streaming Era ](/en-gb/cloud-kafka/)[Streaming Data Pipelines ](/en-gb/streaming-data-pipelines/)

  * Pricing

    * [Confluent Pricing ](/en-gb/confluent-cloud/pricing/)[Cost Estimator ](/en-gb/pricing/cost-estimator/)

    * [Why Serverless Matters ](/en-gb/blog/sizing-scaling-kafka-clusters-with-confluent-cloud/)[Introducing Freight Clusters ](/en-gb/blog/introducing-confluent-cloud-freight-clusters/?utm_campaign=tm.optimization_cd.q2fy24-freight-clusters-early-access&utm_medium=io-banner)

  * Solutions

    * Use cases

[Shift Left ](/en-gb/shift-left/processing-governance/)[Streaming Data Pipelines ](/en-gb/streaming-data-pipelines/)[Generative AI ](/en-gb/generative-ai/)[Use Case Architectures ](/en-gb/use-case/)[See All ](/en-gb/solutions/)

    * Industries

[Financial Services ](/en-gb/industry-solutions/financial-services/)[Retail & eCommerce ](/en-gb/industry-solutions/retail/)[Manufacturing & Automotive ](/en-gb/industry-solutions/manufacturing/)[Public Sector ](/en-gb/industry-solutions/public-sector/)[Telecommunications ](/en-gb/industry-solutions/telco/)[All Industries ](/en-gb/solutions/#industries)

[Read the Builder's Guide to Streaming Data Mesh eBook ](/en-gb/resources/ebook/builders-guide-to-streaming-data-mesh/)

  * Learn

    * [Blog ](/en-gb/blog/)[Resources ](/en-gb/resources/)[Training ](/en-gb/training/)[Professional Services ](/en-gb/services/)[Data Glossary ](/en-gb/learn/)

    * [Careers ](https://careers.confluent.io)[Webinars ](/en-gb/online-talks/)[Meetups ](https://events.confluent.io/meetups)[Data in Motion Tour ](https://events.confluent.io/dimt2024global)[Current 2024: Data Streaming Event ](https://current.confluent.io/)

[Generative AI ](/en-gb/generative-ai/)[Microservices with Confluent ](/en-gb/resources/online-talk/microservices-with-confluent/)

  * Developers

    * [Confluent Developer ](https://developer.confluent.io/)[Docs ](https://docs.confluent.io/)

    * [Apache Kafka Quick Start ](https://developer.confluent.io/quickstart/kafka-on-confluent-cloud)[Ask the Community ](/en-gb/community/ask-the-community/)

  * [](#)




# What is Change Data Capture?

Change data capture (CDC) refers to the process of tracking all changes in data sources, such as databases and data warehouses, so they can be captured in destination systems. CDC methods like transaction logs and database triggers allow organizations to achieve data integrity and consistency across multiple systems and deployment environments. Additionally, they allow organizations to use the right tool for the right job by moving data from legacy databases to purpose-built data platforms, such as document or search databases, or data warehouses.

[Watch CDC Demo](https://www.confluent.io/resources/online-talk/change-data-capture-demo/)[Start Confluent Cloud for free](/en-gb/get-started/)

[Benefits of CDC](#benefits-of-cdc)[How CDC Works](#how-cdc-works)[CDC Patterns](#cdc-patterns)[Use Cases](#use-cases)[Kafka and CDC](#kafka-and-cdc)

## Why Change Data Capture?

Initially, CDC became popular as an alternative solution to batch data replication for populating data warehouses for [Extract Transform Load (ETL)](https://www.confluent.io/learn/etl-elt-streaming-data-compared/) jobs. In recent years, CDC has become the de facto method for migrating to the cloud.

Here are some of the main benefits of CDC:

  * Eliminates Bulk Load Updates: CDC enables incremental loading or real-time streaming of data changes into the target repository. There is no need for bulk load updates and inconvenient batch windows.
  * Log-Based Efficiency: Log-based CDC minimizes the impact on source systems by capturing changes directly from transaction logs. This reduces system resource usage and maintains source systems performance.
  * Zero-Downtime Migrations: Real-time data movement facilitated by CDC supports zero-downtime database migrations. It ensures up-to-date data availability for real-time analytics and reporting.
  * Synchronization Across Systems: CDC keeps data in multiple systems synchronized, crucial for time-sensitive decisions in high-velocity data environments.
  * Optimized for Cloud and Stream Processing: CDC efficiently moves data across wide area networks, making it ideal for cloud deployments and integrating data with stream processing solutions like Apache Kafka.



![](data:image/svg+xml;charset=utf-8,%3Csvg height='237' width='468' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)

![]()![Diagram depicting change data capture](https://images.ctfassets.net/8vofjvai1hpv/1ZfXCGSQCX4bEXcMrc64Sp/9f6a2dce723e4af053955d51eab7e2b3/1-narrow.png?w=468&h=237&q=100&fm=png&bg=transparent)

### 

Quick Intro to CDC

Data is constantly changing, which can cause databases, data lakes, and data warehouses to be out of sync. Additionally, organizations are increasingly migrating to the cloud, which increases the chances of ending up with data silos. CDC has become a popular solution to [bridge on-premises and cloud environments](https://www.confluent.io/resources/white-paper/hybrid-and-multicloud-reference-architecture/?session_ref=https://www.google.com/), allowing enterprises to migrate to the cloud at their own pace, or continue to operate in a hybrid environment.

See Confluent’s Oracle CDC Premium Connector in action [here](https://youtu.be/0sNXbm7gNjc?t=265).

## How Does Change Data Capture Work?

When data is changed through INSERT, UPDATE, or DELETE in a source database—which is usually a relational database such as MySQL, Microsoft SQL, Oracle, or PostgreSQL—it needs to be propagated to downstream systems such as caches, search indexes, data warehouses, and data lakes. Change data capture (CDC) tracks changes in a source dataset and transfers those changes to a target dataset.

Traditionally, teams used batch processing to sync data, which meant data was not synced right away, production databases were slowed down to allocate resources, and data replication only occurred during specified batch windows. CDC ensures that changes are synced in real-time, which eliminates the delays associated with traditional batch processing. CDC continuously tracks changes and updates target databases immediately, ensuring data is always up to date.

CDC is typically implemented using two main approaches: push and pull: Either the source database pushes the updates to downstream services and applications, or downstream services and applications poll the source database at fixed intervals to pull the updated data. Each approach has its own advantages and disadvantages. It’s important to consider all of these aspects in the context of your own use case.

### 

Push vs. Pull

**Push:** In this approach, the source database does the heavy lifting. It captures changes in the database and sends those updates to target systems so they can take appropriate action.

The advantage of this method is that target systems are updated with the latest data in near real-time. However, if the target systems are unreachable or offline, the changed data can be lost.

To mitigate these risks, a messaging system is typically implemented between the source and target systems to buffer changes until they can be committed to their final destinations.

**Pull:** In this method, the source database’s job is lighter than the push method. Instead of actively sending updates, the source database logs data changes in a specific column on each table. It is the target systems’ responsibility to continuously poll the source database to retrieve the changes and take the right actions on them.

Like in the push method, a messaging system is required between the source and target systems, in order to ensure that the changed data isn’t lost when the target systems are unavailable.

The disadvantage of the pull approach is that target systems won’t be immediately notified if the data changes. Since the changes are batched between pull requests, there is a lag before the target systems will learn about these changes.

If your application needs real-time data, you should use the push method: it ensures the immediate propagation of changes. However, it requires robust messaging systems to handle the potential downtime of target systems.

If you want to continuously transfer big batches of data, and your applications don’t need real-time data, you should opt for the pull method. However, there will be a lag due to batch processing.

## Change Data Capture Patterns and Methods

CDC detects changes in data using different methods. Following are the most commonly used methods:

![](data:image/svg+xml;charset=utf-8,%3Csvg height='219' width='468' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)

![]()![Timestamp-based capture patterns](https://images.ctfassets.net/8vofjvai1hpv/4hsX26v3WuACeBNnbKdKxM/573102f28f00aa318b84c022c73ee106/2-narrow.png?w=468&h=219&q=100&fm=png&bg=transparent)

**Timestamp-based:** e most recent change. This column can be called LAST_MODIFIED, LAST_UPDATED, etc. Downstream applications or systems can query this field and get the records that have been updated since the last execution time.

**Pros:**

  * Simple to use and implement.
  * Provides a straighforward way to track changes over time.



**Cons:**

  * Can only process soft deletes and not DELETE operations.
  * Adds computational overhead to the source system, since target systems have to scan each row in the table to identify the last updated values.
  * Requires changes to the existing database schema.



An example is shown of a snapshot of the table when a new record is created and a snapshot of the table when the record with ID=101 is updated.

![](data:image/svg+xml;charset=utf-8,%3Csvg height='232.99999999999997' width='468' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)

![]()![Trigger-based capture patterns](https://images.ctfassets.net/8vofjvai1hpv/enZIyIbnHlHV48dYbMMY8/90a5465eba60b2d40c43d35c434e03cb/3-narrow.png?w=468&h=233&q=100&fm=png&bg=transparent)

**Trigger-based:** Most databases support trigger functions. These are stored procedures that are automatically executed once a specific event—such as to INSERT, UPDATE, or DELETE a record—occurs on a table. One trigger for each operation per table is needed to capture any data changes. These data changes are stored in a separate table (commonly referred to as a “shadow table” or “event table”) in the same database. Additionally, developers can include messaging systems so that these data changes can be published to queues, where relevant target systems subscribe to them.

**Pros:**

  * Can detect and capture all types of changes (INSERT, UPDATE, and DELETE) to records.
  * Triggers are widely used and are supported by the majority of databases.
  * Enables real-time data capture without polling.



**Cons:**

  * Negatively impacts source database performance, since updating records requires multiple writes.
  * Requires changes to the source database schema.
  * Can become complex to manage with a large number of triggers.



![](data:image/svg+xml;charset=utf-8,%3Csvg height='287' width='468' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E)

![]()![Log-based capture patterns](https://images.ctfassets.net/8vofjvai1hpv/eKf4vBIsvnaYFXk68krBc/f676862214e70de59fc60320d9c9c29d/4-narrow.png?w=468&h=287&q=100&fm=png&bg=transparent)

**Log-based:** Transactional databases log all changes—INSERT, UPDATE, and DELETE— committed against the database and their corresponding timestamps into files called transaction logs. These logs are primarily used for backup and disaster-recovery purposes, but they can also be used to propagate changes to target systems. Data changes are captured in real time. Since target systems can read from transaction logs, this method doesn’t impose computational overhead on source databases.

**Pros:**

  * Doesn’t add computational overhead to source databases.
  * Can detect and capture all types of changes (INSERT, UPDATE, and DELETE) to records.
  * No need to change the schema of the source databases.



**Cons:**

  * There isn’t standardization around the format of transaction logs. This means that each vendor opts to implement their own methodology, which could change in future releases.
  * Target systems have to identify and eliminate any changes that were written to source databases but then rolled back.



## Change Data Capture Use Cases

Change Data Capture (CDC) is used across modern data integration systems to ensure compliance and enable real-time analytics. By continuously capturing and replicating data changes, CDC supports seamless data migration, integration with microservices, and cloud adoption.

There are many use cases for CDC. Let’s review a few examples below.

### 

Continuous Data Replication

When copying an entire source database to a destination system in batch mode, the source database cannot accept new writes, including schema changes, until the process is complete. The longer the copying process, the greater the risk of delaying important changes to the source. There is also a greater potential for further delays in passing the changes to the target.

Neither of these scenarios is acceptable, because consumers demand real-time experiences from modern applications. CDC addresses these challenges by continuously replicating changed data (a subset of the entire database) to downstream consumers.

### 

Integration with Microservices Architecture

As organizations continue to break down their monolithic architectures and adopt microservices, they need to transfer data from source databases, and possibly direct it to more than one destination system. Since these transitions take time, CDC can be used to keep both source and target data stores synchronized during this process.

### 

Cloud Adoption

Organizations are increasingly migrating to the cloud to [reduce TCO](https://www.confluent.io/blog/confluent-can-save-2-5-million-vs-open-source-apache-kafka/) and improve agility and elasticity. By leveraging cloud-native services, companies can focus on building new digital experiences rather than spending time and resources configuring, maintaining, and managing their databases and infrastructure.

CDC supports this migration and ensures that data remains consistent and up-to-date across on-premises and cloud environments. This seamless data integration helps businesses fully leverage cloud capabilities without disruption.

## Change Data Capture and Apache Kafka

CDC allows you to capture data changes in source databases, but you still need to communicate and propagate these changes to downstream systems. This is where [Apache Kafka](https://www.confluent.io/what-is-apache-kafka/) and [Kafka Connect](https://developer.confluent.io/learn-kafka/kafka-connect/intro/) shine. Apache Kafka is an open-source event streaming platform that can durably write and store [streams of events](https://developer.confluent.io/patterns/), and process them in real-time or retrospectively. Kafka is a distributed system of servers and clients that provides reliable and scalable performance.

The [Kafka Connect API](https://www.confluent.io/blog/announcing-kafka-connect-building-large-scale-low-latency-data-pipelines/) is a core component of Apache Kafka, introduced in version 0.9. Kafka Connect provides scalable and resilient integration for Kafka with other systems, both sending to and receiving data from them. Kafka Connect is configuration-driven, meaning that you don’t need to write any code to use it. It is driven purely by configuration files and provides an easy integration point for developers.

One of the popular use cases for Kafka Connect is database change data capture. You can leverage Confluent’s JDBC or Debezium CDC [connectors](https://www.confluent.io/product/confluent-connectors/) to integrate Kafka with your database, and easily stream your data into Confluent.

The JDBC connector polls source databases for new or changed data based on update timestamp columns. Confluent Cloud offers fully-managed source connectors for [Microsoft SQL Server](https://docs.confluent.io/cloud/current/connectors/cc-microsoft-sql-server-source.html), [PostgreSQL](https://docs.confluent.io/cloud/current/connectors/cc-postgresql-source.html?session_ref=https://www.google.com/#cc-postgresql-source), [MySQL](https://docs.confluent.io/cloud/current/connectors/cc-mysql-source.html?session_ref=https://www.google.com/#cc-mysql-source), and [Oracle](https://docs.confluent.io/cloud/current/connectors/cc-oracle-db-source.html?session_ref=https://www.google.com/).

Additionally, Confluent offers log-based CDC source connectors for [Microsoft SQL Server](https://docs.confluent.io/cloud/current/connectors/cc-microsoft-sql-server-source.html?session_ref=https://www.google.com/#cc-microsoft-sql-server-source), [PostgreSQL](https://docs.confluent.io/cloud/current/connectors/cc-postgresql-source.html?session_ref=https://www.google.com/#cc-postgresql-source), [MySQL](https://docs.confluent.io/cloud/current/connectors/cc-mysql-source.html?session_ref=https://www.google.com/#cc-mysql-source), and [Oracle](https://docs.confluent.io/cloud/current/connectors/cc-oracle-db-source.html?session_ref=https://www.google.com/). These connectors obtain a snapshot of existing data at startup time, and then monitor and record all subsequent row-level changes.

Learn how to build streaming data pipelines with Apache Kafka and Confluent with this [free on-demand course](https://developer.confluent.io/learn-kafka/data-pipelines/intro/?session_ref=https://www.google.com/).

## Why Confluent?

Confluent’s fully-managed CDC source connectors for [MySQL](https://docs.confluent.io/cloud/current/connectors/cc-mysql-source-cdc-debezium.html#cc-mysql-source-cdc-debezium), [Oracle](https://docs.confluent.io/cloud/current/connectors/cc-oracle-cdc-source/index.html#cc-oracle-cdc-source), [Microsoft SQL Server](https://docs.confluent.io/cloud/current/connectors/cc-microsoft-sql-server-source-cdc-debezium.html#cc-microsoft-sql-server-source-cdc-debezium), and [PostgreSQL](https://docs.confluent.io/cloud/current/connectors/cc-postgresql-cdc-source-debezium.html#cc-postgresql-cdc-source-debezium) simplify streaming data pipelines. These connectors help you easily migrate data across different environments, meeting you everywhere your data systems live. Our rich ecosystem of 120+ pre-built source and sink connectors makes it easy to connect multiple data systems, and keep them in sync throughout the migration. Furthermore, you can reduce your total cost of ownership using our fully managed, cloud-native services with no operational overhead or prohibitive licensing costs.

[Get Started for Free](https://www.confluent.io/get-started/)[See All Confluent Solutions](https://www.confluent.io/solutions/)

## Learn More About CDC

### 

Stream to cloud databases with Confluent

[Learn More](https://www.confluent.io/use-case/database/)

### 

Try the CDC demo from our GitHub repo

[View Repo](https://github.com/confluentinc/demo-database-modernization)

### 

Stream from on-premises Oracle to cloud-based MongoDB

[Watch Demo](https://www.confluent.io/resources/demo/demo-how-to-use-confluent-for-streaming-data-pipelines/)

### 

Build streaming data pipelines to cloud data warehouses

[Learn More](https://www.confluent.io/use-case/data-warehouse/)

### 

Streaming data pipelines course by Confluent developers

[View Course](https://developer.confluent.io/learn-kafka/data-pipelines/intro/)

### 

Learn how Confluent Cloud can help reduce TCO by up to 60%

[Read White Paper](https://www.confluent.io/resources/cost-effectiveness-confluent-cloud/)

### 

Streaming data pipelines

[Learn More](https://www.confluent.io/streaming-data-pipelines/)

  * [Product](/en-gb/product/confluent-platform/)
  * [Confluent Cloud](/en-gb/confluent-cloud/)
  * [Confluent Platform](/en-gb/product/confluent-platform/)
  * [Connectors](/en-gb/product/confluent-connectors/)
  * [Flink](/en-gb/product/flink/)
  * [Stream Governance](/en-gb/product/stream-governance/)
  * [Confluent Hub](https://www.confluent.io/hub/)
  * [Subscription](/en-gb/subscription/)
  * [Professional Services](/en-gb/services/)
  * [Training](/en-gb/training/)
  * [Customers](/en-gb/customers/)


  * [Cloud](/en-gb/confluent-cloud/)
  * [Confluent Cloud](/en-gb/confluent-cloud/)
  * [Support](/en-gb/confluent-cloud/support/)
  * [Sign Up](/en-gb/confluent-cloud/tryfree/)
  * [Log In](https://confluent.cloud/login/)
  * [Cloud FAQ](/en-gb/confluent-cloud-faqs/)


  * [Solutions](/en-gb/industry-solutions/)
  * [Financial Services](/en-gb/industry-solutions/financial-services/)
  * [Insurance](/en-gb/industry-solutions/insurance/)
  * [Retail and eCommerce](/en-gb/industry-solutions/retail/)
  * [Automotive](/en-gb/industry-solutions/automotive/)
  * [Government](/en-gb/industry-solutions/government/)
  * [Gaming](/en-gb/industry-solutions/gaming/)
  * [Communication Service Providers](/en-gb/industry-solutions/telco/)
  * [Technology](/en-gb/industry-solutions/technology/)
  * [Manufacturing](/en-gb/industry-solutions/manufacturing/)
  * [Fraud Detection](/en-gb/use-case/fraud-detection/)
  * [Customer 360](/en-gb/use-case/real-time-customer-experiences/)
  * [Messaging Modernization](/en-gb/use-case/messaging-modernization/)
  * [Streaming Data Pipelines](/en-gb/use-case/data-integration/)
  * [Event-driven Microservices](/en-gb/use-case/event-driven-microservices-communication/)
  * [Mainframe Integration](/en-gb/use-case/mainframe/)
  * [SIEM Optimization](/en-gb/use-case/siem/)
  * [Hybrid and Multicloud](/en-gb/use-case/hybrid-and-multicloud/)
  * [Internet of Things](/en-gb/use-case/internet-of-things-iot/)
  * [Data Warehouse](/en-gb/use-case/data-warehouse/)
  * [Database](/en-gb/use-case/database/)


  * [Developers](https://developer.confluent.io/)
  * [Confluent Developer](https://developer.confluent.io/)
  * [What is Kafka?](/en-gb/what-is-apache-kafka/)
  * [Resources](/en-gb/resources/)
  * [Events](https://events.confluent.io/)
  * [Webinars](/en-gb/online-talks/)
  * [Meetups](https://developer.confluent.io/community/)
  * [Current: Data Streaming Event](/en-gb/events/current/)
  * [Tutorials](https://developer.confluent.io/tutorials)
  * [Docs](https://docs.confluent.io/)
  * [Blog](/en-gb/blog/)


  * [About](/en-gb/about/)
  * [Investor Relations](https://investors.confluent.io/)
  * [Startups](/en-gb/startups/)
  * [Company](/en-gb/about/)
  * [Careers](https://careers.confluent.io)
  * [Partners](/en-gb/partners/)
  * [News](/en-gb/in-the-news/)
  * [Contact](/en-gb/contact/)
  * [Trust and Security](/en-gb/trust-and-security/)



[](https://www.facebook.com/confluentinc/)[](https://github.com/confluentinc)[](https://www.instagram.com/confluent_inc/)[](https://www.linkedin.com/company/confluent)[](https://www.slideshare.net/ConfluentInc)[](https://twitter.com/ConfluentInc)[](https://www.youtube.com/confluent)

[](https://www.facebook.com/confluentinc/)[](https://github.com/confluentinc)[](https://www.instagram.com/confluent_inc/)[](https://www.linkedin.com/company/confluent)[](https://www.slideshare.net/ConfluentInc)[](https://twitter.com/ConfluentInc)[](https://www.youtube.com/confluent)

[Terms & Conditions](https://www.confluent.io/terms-of-use/) | [Privacy Policy](https://www.confluent.io/legal/confluent-privacy-statement/) | [Do Not Sell My Information](https://www.confluent.io/legal/confluent-privacy-statement/#california-privacy-rights) | [Modern Slavery Policy](https://www.confluent.io/modern-slavery-policy/) | Cookie Settings

Copyright © Confluent, Inc. 2014-2025. Apache®, Apache Kafka®, Kafka®, Apache Flink®, Flink®, and associated open source project names are trademarks of the [Apache Software Foundation](https://www.apache.org/)

By clicking “Accept All Cookies”, you agree to the storing of cookies on your device to enhance site navigation, analyze site usage, and assist in our marketing efforts.[Cookie Notice](https://www.confluent.io/cookies/)

Accept All Cookies

Reject All

Cookies Settings
