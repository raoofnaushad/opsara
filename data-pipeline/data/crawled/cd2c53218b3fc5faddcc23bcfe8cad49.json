{
    "id": "cd2c53218b3fc5faddcc23bcfe8cad49",
    "metadata": {
        "id": "cd2c53218b3fc5faddcc23bcfe8cad49",
        "url": "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/",
        "title": "Optimizing LLMs for Speed and Memory",
        "properties": {
            "description": "We‚Äôre on a journey to advance and democratize artificial intelligence through open source and open science.",
            "keywords": null,
            "author": null,
            "og:title": "Optimizing LLMs for Speed and Memory",
            "og:type": "website",
            "og:url": "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization",
            "og:image": "https://huggingface.co/front/thumbnails/docs/transformers.png",
            "twitter:card": "summary_large_image",
            "twitter:site": "@huggingface",
            "twitter:image": "https://huggingface.co/front/thumbnails/docs/transformers.png"
        }
    },
    "parent_metadata": {
        "id": "d4ab48bb988e44139c1fbaa4fbdcbf36",
        "url": "https://www.notion.so/LLM-Inference-Optimization-Other-Techniques-d4ab48bb988e44139c1fbaa4fbdcbf36",
        "title": "LLM Inference Optimization & Other Techniques",
        "properties": {
            "Type": "Leaf"
        }
    },
    "content": "[![Hugging Face's logo](/front/assets/huggingface_logo-noborder.svg) Hugging Face](/)\n\n  * [ Models](/models)\n  * [ Datasets](/datasets)\n  * [ Spaces](/spaces)\n  * [ Posts](/posts)\n  * [ Docs](/docs)\n  * [ Enterprise](/enterprise)\n  * [Pricing](/pricing)\n  * [Log In](/login)\n  * [Sign Up](/join)\n\n\n\nTransformers documentation\n\nOptimizing LLMs for Speed and Memory\n\n# Transformers\n\nüè° View all docsAWS Trainium & InferentiaAccelerateAmazon SageMakerArgillaAutoTrainBitsandbytesChat UICompetitionsDataset viewerDatasetsDiffusersDistilabelEvaluateGoogle CloudGoogle TPUsGradioHubHub Python LibraryHugging Face Generative AI Services (HUGS)Huggingface.jsInference API (serverless)Inference Endpoints (dedicated)LeaderboardsLightevalOptimumPEFTSafetensorsSentence TransformersTRLTasksText Embeddings InferenceText Generation InferenceTokenizersTransformersTransformers.jssmolagentstimm\n\nSearch documentation\n\n`‚åòK`\n\nmainv4.48.0v4.47.1v4.46.3v4.45.2v4.44.2v4.43.4v4.42.4v4.41.2v4.40.2v4.39.3v4.38.2v4.37.2v4.36.1v4.35.2v4.34.1v4.33.3v4.32.1v4.31.0v4.30.0v4.29.1v4.28.1v4.27.2v4.26.1v4.25.1v4.24.0v4.23.1v4.22.2v4.21.3v4.20.1v4.19.4v4.18.0v4.17.0v4.16.2v4.15.0v4.14.1v4.13.0v4.12.5v4.11.3v4.10.1v4.9.2v4.8.2v4.7.0v4.6.0v4.5.1v4.4.2v4.3.3v4.2.2v4.1.1v4.0.1v3.5.1v3.4.0v3.3.1v3.2.0v3.1.0v3.0.2v2.11.0v2.10.0v2.9.1v2.8.0v2.7.0v2.6.0v2.5.1v2.4.1v2.3.0v2.2.2v2.1.1v2.0.0v1.2.0v1.1.0v1.0.0doc-builder-html ARDEENESFRHIITJAKOPTTETRZH [ 137,863](https://github.com/huggingface/transformers)\n\nGet started\n\n[ü§ó Transformers ](/docs/transformers/en/index)[Quick tour ](/docs/transformers/en/quicktour)[Installation ](/docs/transformers/en/installation)[Adding a new model to `transformers` ](/docs/transformers/en/add_new_model)\n\nTutorials\n\n[Run inference with pipelines ](/docs/transformers/en/pipeline_tutorial)[Write portable code with AutoClass ](/docs/transformers/en/autoclass_tutorial)[Preprocess data ](/docs/transformers/en/preprocessing)[Fine-tune a pretrained model ](/docs/transformers/en/training)[Train with a script ](/docs/transformers/en/run_scripts)[Set up distributed training with ü§ó Accelerate ](/docs/transformers/en/accelerate)[Load and train adapters with ü§ó PEFT ](/docs/transformers/en/peft)[Share your model ](/docs/transformers/en/model_sharing)[Agents 101 ](/docs/transformers/en/agents)[Agents, supercharged - Multi-agents, External tools, and more ](/docs/transformers/en/agents_advanced)[Generation with LLMs ](/docs/transformers/en/llm_tutorial)[Chatting with Transformers ](/docs/transformers/en/conversations)\n\nTask Guides\n\nNatural Language Processing\n\nAudio\n\nComputer Vision\n\nMultimodal\n\nGeneration\n\nPrompting\n\nDeveloper guides\n\n[Use fast tokenizers from ü§ó Tokenizers ](/docs/transformers/en/fast_tokenizers)[Run inference with multilingual models ](/docs/transformers/en/multilingual)[Use model-specific APIs ](/docs/transformers/en/create_a_model)[Share a custom model ](/docs/transformers/en/custom_models)[Chat templates ](/docs/transformers/en/chat_templating)[Trainer ](/docs/transformers/en/trainer)[Run training on Amazon SageMaker ](/docs/transformers/en/sagemaker)[Export to ONNX ](/docs/transformers/en/serialization)[Export to TFLite ](/docs/transformers/en/tflite)[Export to TorchScript ](/docs/transformers/en/torchscript)[Benchmarks ](/docs/transformers/en/benchmarks)[Notebooks with examples ](/docs/transformers/en/notebooks)[Community resources ](/docs/transformers/en/community)[Troubleshoot ](/docs/transformers/en/troubleshooting)[Interoperability with GGUF files ](/docs/transformers/en/gguf)[Interoperability with TikToken files ](/docs/transformers/en/tiktoken)[Modularity in `transformers` ](/docs/transformers/en/modular_transformers)[Model Hacking (overwriting a class to your usage) ](/docs/transformers/en/how_to_hack_models)\n\nQuantization Methods\n\n[Getting started ](/docs/transformers/en/quantization/overview)[bitsandbytes ](/docs/transformers/en/quantization/bitsandbytes)[GPTQ ](/docs/transformers/en/quantization/gptq)[AWQ ](/docs/transformers/en/quantization/awq)[AQLM ](/docs/transformers/en/quantization/aqlm)[VPTQ ](/docs/transformers/en/quantization/vptq)[Quanto ](/docs/transformers/en/quantization/quanto)[EETQ ](/docs/transformers/en/quantization/eetq)[HIGGS ](/docs/transformers/en/quantization/higgs)[HQQ ](/docs/transformers/en/quantization/hqq)[FBGEMM_FP8 ](/docs/transformers/en/quantization/fbgemm_fp8)[Optimum ](/docs/transformers/en/quantization/optimum)[TorchAO ](/docs/transformers/en/quantization/torchao)[BitNet ](/docs/transformers/en/quantization/bitnet)[compressed-tensors ](/docs/transformers/en/quantization/compressed_tensors)[Contribute new quantization method ](/docs/transformers/en/quantization/contribute)\n\nPerformance and scalability\n\n[Overview ](/docs/transformers/en/performance)[LLM inference optimization ](/docs/transformers/en/llm_optims)\n\nEfficient training techniques\n\n[Methods and tools for efficient training on a single GPU ](/docs/transformers/en/perf_train_gpu_one)[Multiple GPUs and parallelism ](/docs/transformers/en/perf_train_gpu_many)[Fully Sharded Data Parallel ](/docs/transformers/en/fsdp)[DeepSpeed ](/docs/transformers/en/deepspeed)[Efficient training on CPU ](/docs/transformers/en/perf_train_cpu)[Distributed CPU training ](/docs/transformers/en/perf_train_cpu_many)[Training on TPU with TensorFlow ](/docs/transformers/en/perf_train_tpu_tf)[PyTorch training on Apple silicon ](/docs/transformers/en/perf_train_special)[Custom hardware for training ](/docs/transformers/en/perf_hardware)[Hyperparameter Search using Trainer API ](/docs/transformers/en/hpo_train)\n\nOptimizing inference\n\n[CPU inference ](/docs/transformers/en/perf_infer_cpu)[GPU inference ](/docs/transformers/en/perf_infer_gpu_one)[Multi-GPU inference ](/docs/transformers/en/perf_infer_gpu_multi)\n\n[Instantiate a big model ](/docs/transformers/en/big_models)[Debugging ](/docs/transformers/en/debugging)[XLA Integration for TensorFlow Models ](/docs/transformers/en/tf_xla)[Optimize inference using `torch.compile()` ](/docs/transformers/en/perf_torch_compile)\n\nContribute\n\n[How to contribute to ü§ó Transformers? ](/docs/transformers/en/contributing)[How to add a model to ü§ó Transformers? ](/docs/transformers/en/add_new_model)[How to add a pipeline to ü§ó Transformers? ](/docs/transformers/en/add_new_pipeline)[Testing ](/docs/transformers/en/testing)[Checks on a Pull Request ](/docs/transformers/en/pr_checks)\n\nConceptual guides\n\n[Philosophy ](/docs/transformers/en/philosophy)[Glossary ](/docs/transformers/en/glossary)[What ü§ó Transformers can do ](/docs/transformers/en/task_summary)[How ü§ó Transformers solve tasks ](/docs/transformers/en/tasks_explained)[The Transformer model family ](/docs/transformers/en/model_summary)[Summary of the tokenizers ](/docs/transformers/en/tokenizer_summary)[Attention mechanisms ](/docs/transformers/en/attention)[Padding and truncation ](/docs/transformers/en/pad_truncation)[BERTology ](/docs/transformers/en/bertology)[Perplexity of fixed-length models ](/docs/transformers/en/perplexity)[Pipelines for webserver inference ](/docs/transformers/en/pipeline_webserver)[Model training anatomy ](/docs/transformers/en/model_memory_anatomy)[Getting the most out of LLMs ](/docs/transformers/en/llm_tutorial_optimization)\n\nAPI\n\nMain Classes\n\n[Agents and Tools ](/docs/transformers/en/main_classes/agent)[Auto Classes ](/docs/transformers/en/model_doc/auto)[Backbones ](/docs/transformers/en/main_classes/backbones)[Callbacks ](/docs/transformers/en/main_classes/callback)[Configuration ](/docs/transformers/en/main_classes/configuration)[Data Collator ](/docs/transformers/en/main_classes/data_collator)[Keras callbacks ](/docs/transformers/en/main_classes/keras_callbacks)[Logging ](/docs/transformers/en/main_classes/logging)[Models ](/docs/transformers/en/main_classes/model)[Text Generation ](/docs/transformers/en/main_classes/text_generation)[ONNX ](/docs/transformers/en/main_classes/onnx)[Optimization ](/docs/transformers/en/main_classes/optimizer_schedules)[Model outputs ](/docs/transformers/en/main_classes/output)[Pipelines ](/docs/transformers/en/main_classes/pipelines)[Processors ](/docs/transformers/en/main_classes/processors)[Quantization ](/docs/transformers/en/main_classes/quantization)[Tokenizer ](/docs/transformers/en/main_classes/tokenizer)[Trainer ](/docs/transformers/en/main_classes/trainer)[DeepSpeed ](/docs/transformers/en/main_classes/deepspeed)[ExecuTorch ](/docs/transformers/en/main_classes/executorch)[Feature Extractor ](/docs/transformers/en/main_classes/feature_extractor)[Image Processor ](/docs/transformers/en/main_classes/image_processor)\n\nModels\n\nText models\n\nVision models\n\nAudio models\n\nVideo models\n\nMultimodal models\n\nReinforcement learning models\n\nTime series models\n\nGraph models\n\nInternal Helpers\n\n[Custom Layers and Utilities ](/docs/transformers/en/internal/modeling_utils)[Utilities for pipelines ](/docs/transformers/en/internal/pipelines_utils)[Utilities for Tokenizers ](/docs/transformers/en/internal/tokenization_utils)[Utilities for Trainer ](/docs/transformers/en/internal/trainer_utils)[Utilities for Generation ](/docs/transformers/en/internal/generation_utils)[Utilities for Image Processors ](/docs/transformers/en/internal/image_processing_utils)[Utilities for Audio processing ](/docs/transformers/en/internal/audio_utils)[General Utilities ](/docs/transformers/en/internal/file_utils)[Utilities for Time Series ](/docs/transformers/en/internal/time_series_utils)\n\n![Hugging Face's logo](/front/assets/huggingface_logo-noborder.svg)\n\nJoin the Hugging Face community\n\nand get access to the augmented documentation experience \n\nCollaborate on models, datasets and Spaces \n\nFaster examples with accelerated inference \n\nSwitch between documentation themes \n\n[Sign Up](/join)\n\nto get started\n\n# [](#optimizing-llms-for-speed-and-memory) Optimizing LLMs for Speed and Memory\n\n![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)\n\n![Open In Studio Lab](https://studiolab.sagemaker.aws/studiolab.svg)\n\nLarge Language Models (LLMs) such as GPT3/4, [Falcon](https://huggingface.co/tiiuae/falcon-40b), and [Llama](https://huggingface.co/meta-llama/Llama-2-70b-hf) are rapidly advancing in their ability to tackle human-centric tasks, establishing themselves as essential tools in modern knowledge-based industries. Deploying these models in real-world tasks remains challenging, however:\n\n  * To exhibit near-human text understanding and generation capabilities, LLMs currently require to be composed of billions of parameters (see [Kaplan et al](https://arxiv.org/abs/2001.08361), [Wei et. al](https://arxiv.org/abs/2206.07682)). This consequently amplifies the memory demands for inference.\n  * In many real-world tasks, LLMs need to be given extensive contextual information. This necessitates the model‚Äôs capability to manage very long input sequences during inference.\n\n\n\nThe crux of these challenges lies in augmenting the computational and memory capabilities of LLMs, especially when handling expansive input sequences.\n\nIn this guide, we will go over the effective techniques for efficient LLM deployment:\n\n  1. **Lower Precision:** Research has shown that operating at reduced numerical precision, namely [8-bit and 4-bit](./main_classes/quantization.md) can achieve computational advantages without a considerable decline in model performance.\n\n  2. **Flash Attention:** Flash Attention is a variation of the attention algorithm that not only provides a more memory-efficient approach but also realizes increased efficiency due to optimized GPU memory utilization.\n\n  3. **Architectural Innovations:** Considering that LLMs are always deployed in the same way during inference, namely autoregressive text generation with a long input context, specialized model architectures have been proposed that allow for more efficient inference. The most important advancement in model architectures hereby are [Alibi](https://arxiv.org/abs/2108.12409), [Rotary embeddings](https://arxiv.org/abs/2104.09864), [Multi-Query Attention (MQA)](https://arxiv.org/abs/1911.02150) and [Grouped-Query-Attention (GQA)](\\(https://arxiv.org/abs/2305.13245\\)).\n\n\n\n\nThroughout this guide, we will offer an analysis of auto-regressive generation from a tensor‚Äôs perspective. We delve into the pros and cons of adopting lower precision, provide a comprehensive exploration of the latest attention algorithms, and discuss improved LLM architectures. While doing so, we run practical examples showcasing each of the feature improvements.\n\n## [](#1-lower-precision) 1. Lower Precision\n\nMemory requirements of LLMs can be best understood by seeing the LLM as a set of weight matrices and vectors and the text inputs as a sequence of vectors. In the following, the definition _weights_ will be used to signify all model weight matrices and vectors.\n\nAt the time of writing this guide, LLMs consist of at least a couple billion parameters. Each parameter thereby is made of a decimal number, e.g. `4.5689` which is usually stored in either [float32](https://en.wikipedia.org/wiki/Single-precision_floating-point_format), [bfloat16](https://en.wikipedia.org/wiki/Bfloat16_floating-point_format), or [float16](https://en.wikipedia.org/wiki/Half-precision_floating-point_format) format. This allows us to easily compute the memory requirement to load the LLM into memory:\n\n> _Loading the weights of a model having X billion parameters requires roughly 4_ X GB of VRAM in float32 precision*\n\nNowadays, models are however rarely trained in full float32 precision, but usually in bfloat16 precision or less frequently in float16 precision. Therefore the rule of thumb becomes:\n\n> _Loading the weights of a model having X billion parameters requires roughly 2_ X GB of VRAM in bfloat16/float16 precision*\n\nFor shorter text inputs (less than 1024 tokens), the memory requirement for inference is very much dominated by the memory requirement to load the weights. Therefore, for now, let‚Äôs assume that the memory requirement for inference is equal to the memory requirement to load the model into the GPU VRAM.\n\nTo give some examples of how much VRAM it roughly takes to load a model in bfloat16:\n\n  * **GPT3** requires 2 * 175 GB = **350 GB** VRAM\n  * [**Bloom**](https://huggingface.co/bigscience/bloom) requires 2 * 176 GB = **352 GB** VRAM\n  * [**Llama-2-70b**](https://huggingface.co/meta-llama/Llama-2-70b-hf) requires 2 * 70 GB = **140 GB** VRAM\n  * [**Falcon-40b**](https://huggingface.co/tiiuae/falcon-40b) requires 2 * 40 GB = **80 GB** VRAM\n  * [**MPT-30b**](https://huggingface.co/mosaicml/mpt-30b) requires 2 * 30 GB = **60 GB** VRAM\n  * [**bigcode/starcoder**](https://huggingface.co/bigcode/starcoder) requires 2 * 15.5 = **31 GB** VRAM\n\n\n\nAs of writing this document, the largest GPU chip on the market is the A100 & H100 offering 80GB of VRAM. Most of the models listed before require more than 80GB just to be loaded and therefore necessarily require [tensor parallelism](https://huggingface.co/docs/transformers/perf_train_gpu_many#tensor-parallelism) and/or [pipeline parallelism](https://huggingface.co/docs/transformers/perf_train_gpu_many#naive-model-parallelism-vertical-and-pipeline-parallelism).\n\nü§ó Transformers does not support tensor parallelism out of the box as it requires the model architecture to be written in a specific way. If you‚Äôre interested in writing models in a tensor-parallelism-friendly way, feel free to have a look at [the text-generation-inference library](https://github.com/huggingface/text-generation-inference/tree/main/server/text_generation_server/models/custom_modeling).\n\nNaive pipeline parallelism is supported out of the box. For this, simply load the model with `device=\"auto\"` which will automatically place the different layers on the available GPUs as explained [here](https://huggingface.co/docs/accelerate/v0.22.0/en/concept_guides/big_model_inference). Note, however that while very effective, this naive pipeline parallelism does not tackle the issues of GPU idling. For this more advanced pipeline parallelism is required as explained [here](https://huggingface.co/docs/transformers/en/perf_train_gpu_many#naive-model-parallelism-vertical-and-pipeline-parallelism).\n\nIf you have access to an 8 x 80GB A100 node, you could load BLOOM as follows\n\nCopied\n\n```\n!pip install transformers accelerate bitsandbytes optimum\n```\n\nCopied\n\n```\nfrom transformers import AutoModelForCausalLM model = AutoModelForCausalLM.from_pretrained(\"bigscience/bloom\", device_map=\"auto\", pad_token_id=0)\n```\n\nBy using `device_map=\"auto\"` the attention layers would be equally distributed over all available GPUs.\n\nIn this guide, we will use [bigcode/octocoder](https://huggingface.co/bigcode/octocoder) as it can be run on a single 40 GB A100 GPU device chip. Note that all memory and speed optimizations that we will apply going forward, are equally applicable to models that require model or tensor parallelism.\n\nSince the model is loaded in bfloat16 precision, using our rule of thumb above, we would expect the memory requirement to run inference with `bigcode/octocoder` to be around 31 GB VRAM. Let‚Äôs give it a try.\n\nWe first load the model and tokenizer and then pass both to Transformers‚Äô [pipeline](https://huggingface.co/docs/transformers/main_classes/pipelines) object.\n\nCopied\n\n```\nfrom transformers import AutoModelForCausalLM, AutoTokenizer, pipeline import torch model = AutoModelForCausalLM.from_pretrained(\"bigcode/octocoder\", torch_dtype=torch.bfloat16, device_map=\"auto\", pad_token_id=0) tokenizer = AutoTokenizer.from_pretrained(\"bigcode/octocoder\") pipe = pipeline(\"text-generation\", model=model, tokenizer=tokenizer)\n```\n\nCopied\n\n```\nprompt = \"Question: Please write a function in Python that transforms bytes to Giga bytes.\\n\\nAnswer:\" result = pipe(prompt, max_new_tokens=60)[0][\"generated_text\"][len(prompt):] result\n```\n\n**Output** :\n\nCopied\n\n```\nHere is a Python function that transforms bytes to Giga bytes:\\n\\n```python\\ndef bytes_to_giga_bytes(bytes):\\n return bytes / 1024 / 1024 / 1024\\n```\\n\\nThis function takes a single\n```\n\nNice, we can now directly use the result to convert bytes into Gigabytes.\n\nCopied\n\n```\ndef bytes_to_giga_bytes(bytes): return bytes / 1024 / 1024 / 1024\n```\n\nLet‚Äôs call [`torch.cuda.max_memory_allocated`](https://pytorch.org/docs/stable/generated/torch.cuda.max_memory_allocated.html) to measure the peak GPU memory allocation.\n\nCopied\n\n```\nbytes_to_giga_bytes(torch.cuda.max_memory_allocated())\n```\n\n**Output** :\n\nCopied\n\n```\n29.0260648727417\n```\n\nClose enough to our back-of-the-envelope computation! We can see the number is not exactly correct as going from bytes to kilobytes requires a multiplication of 1024 instead of 1000. Therefore the back-of-the-envelope formula can also be understood as an ‚Äúat most X GB‚Äù computation. Note that if we had tried to run the model in full float32 precision, a whopping 64 GB of VRAM would have been required.\n\n> Almost all models are trained in bfloat16 nowadays, there is no reason to run the model in full float32 precision if [your GPU supports bfloat16](https://discuss.pytorch.org/t/bfloat16-native-support/117155/5). Float32 won‚Äôt give better inference results than the precision that was used to train the model.\n\nIf you are unsure in which format the model weights are stored on the Hub, you can always look into the checkpoint‚Äôs config under `\"torch_dtype\"`, _e.g._ [here](https://huggingface.co/meta-llama/Llama-2-7b-hf/blob/6fdf2e60f86ff2481f2241aaee459f85b5b0bbb9/config.json#L21). It is recommended to set the model to the same precision type as written in the config when loading with `from_pretrained(..., torch_dtype=...)` except when the original type is float32 in which case one can use both `float16` or `bfloat16` for inference.\n\nLet‚Äôs define a `flush(...)` function to free all allocated memory so that we can accurately measure the peak allocated GPU memory.\n\nCopied\n\n```\ndel pipe del model import gc import torch def flush(): gc.collect() torch.cuda.empty_cache() torch.cuda.reset_peak_memory_stats()\n```\n\nLet‚Äôs call it now for the next experiment.\n\nCopied\n\n```\nflush()\n```\n\nFrom the Accelerate library, you can also use a device-agnostic utility method called [release_memory](https://github.com/huggingface/accelerate/blob/29be4788629b772a3b722076e433b5b3b5c85da3/src/accelerate/utils/memory.py#L63), which takes various hardware backends like XPU, MLU, NPU, MPS, and more into account.\n\nCopied\n\n```\nfrom accelerate.utils import release_memory # ... release_memory(model)\n```\n\nNow what if your GPU does not have 32 GB of VRAM? It has been found that model weights can be quantized to 8-bit or 4-bits without a significant loss in performance (see [Dettmers et al.](https://arxiv.org/abs/2208.07339)). Model can be quantized to even 3 or 2 bits with an acceptable loss in performance as shown in the recent [GPTQ paper](https://arxiv.org/abs/2210.17323) ü§Ø.\n\nWithout going into too many details, quantization schemes aim at reducing the precision of weights while trying to keep the model‚Äôs inference results as accurate as possible (_a.k.a_ as close as possible to bfloat16). Note that quantization works especially well for text generation since all we care about is choosing the _set of most likely next tokens_ and don‚Äôt really care about the exact values of the next token _logit_ distribution. All that matters is that the next token _logit_ distribution stays roughly the same so that an `argmax` or `topk` operation gives the same results.\n\nThere are various quantization techniques, which we won‚Äôt discuss in detail here, but in general, all quantization techniques work as follows:\n\n  *     1. Quantize all weights to the target precision\n  *     1. Load the quantized weights, and pass the input sequence of vectors in bfloat16 precision\n  *     1. Dynamically dequantize weights to bfloat16 to perform the computation with their input vectors in bfloat16 precision\n\n\n\nIn a nutshell, this means that _inputs-weight matrix_ multiplications, withX X X being the _inputs_ ,W W W being a weight matrix andY Y Y being the output: Y=X‚àóW Y = X * W Y=X‚àóW\n\nare changed to Y=X‚àódequantize(W) Y = X * \\text{dequantize}(W) Y=X‚àódequantize(W)\n\nfor every matrix multiplication. Dequantization and re-quantization is performed sequentially for all weight matrices as the inputs run through the network graph.\n\nTherefore, inference time is often **not** reduced when using quantized weights, but rather increases. Enough theory, let‚Äôs give it a try! To quantize the weights with Transformers, you need to make sure that the [`bitsandbytes`](https://github.com/bitsandbytes-foundation/bitsandbytes) library is installed.\n\nCopied\n\n```\n!pip install bitsandbytes\n```\n\nWe can then load models in 8-bit quantization by simply adding a `load_in_8bit=True` flag to `from_pretrained`.\n\nCopied\n\n```\nmodel = AutoModelForCausalLM.from_pretrained(\"bigcode/octocoder\", load_in_8bit=True, pad_token_id=0)\n```\n\nNow, let‚Äôs run our example again and measure the memory usage.\n\nCopied\n\n```\npipe = pipeline(\"text-generation\", model=model, tokenizer=tokenizer) result = pipe(prompt, max_new_tokens=60)[0][\"generated_text\"][len(prompt):] result\n```\n\n**Output** :\n\nCopied\n\n```\nHere is a Python function that transforms bytes to Giga bytes:\\n\\n```python\\ndef bytes_to_giga_bytes(bytes):\\n return bytes / 1024 / 1024 / 1024\\n```\\n\\nThis function takes a single\n```\n\nNice, we‚Äôre getting the same result as before, so no loss in accuracy! Let‚Äôs look at how much memory was used this time.\n\nCopied\n\n```\nbytes_to_giga_bytes(torch.cuda.max_memory_allocated())\n```\n\n**Output** :\n\nCopied\n\n```\n15.219234466552734\n```\n\nSignificantly less! We‚Äôre down to just a bit over 15 GBs and could therefore run this model on consumer GPUs like the 4090. We‚Äôre seeing a very nice gain in memory efficiency and more or less no degradation to the model‚Äôs output. However, we can also notice a slight slow-down during inference.\n\nWe delete the models and flush the memory again.\n\nCopied\n\n```\ndel model del pipe\n```\n\nCopied\n\n```\nflush()\n```\n\nLet‚Äôs see what peak GPU memory consumption 4-bit quantization gives. Quantizing the model to 4-bit can be done with the same API as before - this time by passing `load_in_4bit=True` instead of `load_in_8bit=True`.\n\nCopied\n\n```\nmodel = AutoModelForCausalLM.from_pretrained(\"bigcode/octocoder\", load_in_4bit=True, low_cpu_mem_usage=True, pad_token_id=0) pipe = pipeline(\"text-generation\", model=model, tokenizer=tokenizer) result = pipe(prompt, max_new_tokens=60)[0][\"generated_text\"][len(prompt):] result\n```\n\n**Output** :\n\nCopied\n\n```\nHere is a Python function that transforms bytes to Giga bytes:\\n\\n```\\ndef bytes_to_gigabytes(bytes):\\n return bytes / 1024 / 1024 / 1024\\n```\\n\\nThis function takes a single argument\n```\n\nWe‚Äôre almost seeing the same output text as before - just the `python` is missing just before the code snippet. Let‚Äôs see how much memory was required.\n\nCopied\n\n```\nbytes_to_giga_bytes(torch.cuda.max_memory_allocated())\n```\n\n**Output** :\n\nCopied\n\n```\n9.543574333190918\n```\n\nJust 9.5GB! That‚Äôs really not a lot for a >15 billion parameter model.\n\nWhile we see very little degradation in accuracy for our model here, 4-bit quantization can in practice often lead to different results compared to 8-bit quantization or full `bfloat16` inference. It is up to the user to try it out.\n\nAlso note that inference here was again a bit slower compared to 8-bit quantization which is due to the more aggressive quantization method used for 4-bit quantization leading toquantize \\text{quantize} quantize anddequantize \\text{dequantize} dequantize taking longer during inference.\n\nCopied\n\n```\ndel model del pipe\n```\n\nCopied\n\n```\nflush()\n```\n\nOverall, we saw that running OctoCoder in 8-bit precision reduced the required GPU VRAM from 32G GPU VRAM to only 15GB and running the model in 4-bit precision further reduces the required GPU VRAM to just a bit over 9GB.\n\n4-bit quantization allows the model to be run on GPUs such as RTX3090, V100, and T4 which are quite accessible for most people.\n\nFor more information on quantization and to see how one can quantize models to require even less GPU VRAM memory than 4-bit, we recommend looking into the [`AutoGPTQ`](https://huggingface.co/docs/transformers/main/en/main_classes/quantization#autogptq-integration%60) implementation.\n\n> As a conclusion, it is important to remember that model quantization trades improved memory efficiency against accuracy and in some cases inference time.\n\nIf GPU memory is not a constraint for your use case, there is often no need to look into quantization. However many GPUs simply can‚Äôt run LLMs without quantization methods and in this case, 4-bit and 8-bit quantization schemes are extremely useful tools.\n\nFor more in-detail usage information, we strongly recommend taking a look at the [Transformers Quantization Docs](https://huggingface.co/docs/transformers/main_classes/quantization#general-usage). Next, let‚Äôs look into how we can improve computational and memory efficiency by using better algorithms and an improved model architecture.\n\n## [](#2-flash-attention) 2. Flash Attention\n\nToday‚Äôs top-performing LLMs share more or less the same fundamental architecture that consists of feed-forward layers, activation layers, layer normalization layers, and most crucially, self-attention layers.\n\nSelf-attention layers are central to Large Language Models (LLMs) in that they enable the model to understand the contextual relationships between input tokens. However, the peak GPU memory consumption for self-attention layers grows _quadratically_ both in compute and memory complexity with number of input tokens (also called _sequence length_) that we denote in the following byN N N . While this is not really noticeable for shorter input sequences (of up to 1000 input tokens), it becomes a serious problem for longer input sequences (at around 16000 input tokens).\n\nLet‚Äôs take a closer look. The formula to compute the outputO \\mathbf{O} O of a self-attention layer for an inputX \\mathbf{X} X of lengthN N N is: O=Attn(X)=V√óSoftmax(QKT) with Q=WqX,V=WvX,K=WkX \\textbf{O} = \\text{Attn}(\\mathbf{X}) = \\mathbf{V} \\times \\text{Softmax}(\\mathbf{QK}^T) \\text{ with } \\mathbf{Q} = \\mathbf{W}_q \\mathbf{X}, \\mathbf{V} = \\mathbf{W}_v \\mathbf{X}, \\mathbf{K} = \\mathbf{W}_k \\mathbf{X} O=Attn(X)=V√óSoftmax(QKT) with Q=Wq‚ÄãX,V=Wv‚ÄãX,K=Wk‚ÄãX X=(x1,...xN) \\mathbf{X} = (\\mathbf{x}_1, ... \\mathbf{x}_{N}) X=(x1‚Äã,...xN‚Äã) is thereby the input sequence to the attention layer. The projectionsQ \\mathbf{Q} Q andK \\mathbf{K} K will each consist ofN N N vectors resulting in theQKT \\mathbf{QK}^T QKT being of sizeN2 N^2 N2 .\n\nLLMs usually have multiple attention heads, thus doing multiple self-attention computations in parallel. Assuming, the LLM has 40 attention heads and runs in bfloat16 precision, we can calculate the memory requirement to store theQKT \\mathbf{QK^T} QKT matrices to be40‚àó2‚àóN2 40 * 2 * N^2 40‚àó2‚àóN2 bytes. ForN=1000 N=1000 N=1000 only around 50 MB of VRAM are needed, however, forN=16000 N=16000 N=16000 we would need 19 GB of VRAM, and forN=100,000 N=100,000 N=100,000 we would need almost 1TB just to store theQKT \\mathbf{QK}^T QKT matrices.\n\nLong story short, the default self-attention algorithm quickly becomes prohibitively memory-expensive for large input contexts.\n\nAs LLMs improve in text comprehension and generation, they are applied to increasingly complex tasks. While models once handled the translation or summarization of a few sentences, they now manage entire pages, demanding the capability to process extensive input lengths.\n\nHow can we get rid of the exorbitant memory requirements for large input lengths? We need a new way to compute the self-attention mechanism that gets rid of theQKT QK^T QKT matrix. [Tri Dao et al.](https://arxiv.org/abs/2205.14135) developed exactly such a new algorithm and called it **Flash Attention**.\n\nIn a nutshell, Flash Attention breaks the V√óSoftmax(QKT\\mathbf{V} \\times \\text{Softmax}(\\mathbf{QK}^TV√óSoftmax(QKT) computation apart and instead computes smaller chunks of the output by iterating over multiple softmax computation steps: Oi‚Üêsija‚àóOi+sijb‚àóVj√óSoftmax(QKi,jT) for multiple i,j iterations \\textbf{O}_i \\leftarrow s^a_{ij} * \\textbf{O}_i + s^b_{ij} * \\mathbf{V}_{j} \\times \\text{Softmax}(\\mathbf{QK}^T_{i,j}) \\text{ for multiple } i, j \\text{ iterations} Oi‚Äã‚Üêsija‚Äã‚àóOi‚Äã+sijb‚Äã‚àóVj‚Äã√óSoftmax(QKi,jT‚Äã) for multiple i,j iterations\n\nwithsija s^a_{ij} sija‚Äã andsijb s^b_{ij} sijb‚Äã being some softmax normalization statistics that need to be recomputed for everyi i i andj j j .\n\nPlease note that the whole Flash Attention is a bit more complex and is greatly simplified here as going in too much depth is out of scope for this guide. The reader is invited to take a look at the well-written [Flash Attention paper](https://arxiv.org/abs/2205.14135) for more details.\n\nThe main takeaway here is:\n\n> By keeping track of softmax normalization statistics and by using some smart mathematics, Flash Attention gives **numerical identical** outputs compared to the default self-attention layer at a memory cost that only increases linearly withN N N .\n\nLooking at the formula, one would intuitively say that Flash Attention must be much slower compared to the default self-attention formula as more computation needs to be done. Indeed Flash Attention requires more FLOPs compared to normal attention as the softmax normalization statistics have to constantly be recomputed (see [paper](https://arxiv.org/abs/2205.14135) for more details if interested)\n\n> However, Flash Attention is much faster in inference compared to default attention which comes from its ability to significantly reduce the demands on the slower, high-bandwidth memory of the GPU (VRAM), focusing instead on the faster on-chip memory (SRAM).\n\nEssentially, Flash Attention makes sure that all intermediate write and read operations can be done using the fast _on-chip_ SRAM memory instead of having to access the slower VRAM memory to compute the output vectorO \\mathbf{O} O .\n\nIn practice, there is currently absolutely no reason to **not** use Flash Attention if available. The algorithm gives mathematically the same outputs, and is both faster and more memory-efficient.\n\nLet‚Äôs look at a practical example.\n\nOur OctoCoder model now gets a significantly longer input prompt which includes a so-called _system prompt_. System prompts are used to steer the LLM into a better assistant that is tailored to the users‚Äô task. In the following, we use a system prompt that will make OctoCoder a better coding assistant.\n\nCopied\n\n```\nsystem_prompt = \"\"\"Below are a series of dialogues between various people and an AI technical assistant. The assistant tries to be helpful, polite, honest, sophisticated, emotionally aware, and humble but knowledgeable. The assistant is happy to help with code questions and will do their best to understand exactly what is needed. It also tries to avoid giving false or misleading information, and it caveats when it isn't entirely sure about the right answer. That said, the assistant is practical really does its best, and doesn't let caution get too much in the way of being useful. The Starcoder models are a series of 15.5B parameter models trained on 80+ programming languages from The Stack (v1.2) (excluding opt-out requests). The model uses Multi Query Attention, was trained using the Fill-in-the-Middle objective, and with 8,192 tokens context window for a trillion tokens of heavily deduplicated data. ----- Question: Write a function that takes two lists and returns a list that has alternating elements from each input list. Answer: Sure. Here is a function that does that. def alternating(list1, list2): results = [] for i in range(len(list1)): results.append(list1[i]) results.append(list2[i]) return results Question: Can you write some test cases for this function? Answer: Sure, here are some tests. assert alternating([10, 20, 30], [1, 2, 3]) == [10, 1, 20, 2, 30, 3] assert alternating([True, False], [4, 5]) == [True, 4, False, 5] assert alternating([], []) == [] Question: Modify the function so that it returns all input elements when the lists have uneven length. The elements from the longer list should be at the end. Answer: Here is the modified function. def alternating(list1, list2): results = [] for i in range(min(len(list1), len(list2))): results.append(list1[i]) results.append(list2[i]) if len(list1) > len(list2): results.extend(list1[i+1:]) else: results.extend(list2[i+1:]) return results ----- \"\"\"\n```\n\nFor demonstration purposes, we duplicate the system prompt by ten so that the input length is long enough to observe Flash Attention‚Äôs memory savings. We append the original text prompt `\"Question: Please write a function in Python that transforms bytes to Giga bytes.\\n\\nAnswer: Here\"`\n\nCopied\n\n```\nlong_prompt = 10 * system_prompt + prompt\n```\n\nWe instantiate our model again in bfloat16 precision.\n\nCopied\n\n```\nmodel = AutoModelForCausalLM.from_pretrained(\"bigcode/octocoder\", torch_dtype=torch.bfloat16, device_map=\"auto\") tokenizer = AutoTokenizer.from_pretrained(\"bigcode/octocoder\") pipe = pipeline(\"text-generation\", model=model, tokenizer=tokenizer)\n```\n\nLet‚Äôs now run the model just like before _without Flash Attention_ and measure the peak GPU memory requirement and inference time.\n\nCopied\n\n```\nimport time start_time = time.time() result = pipe(long_prompt, max_new_tokens=60)[0][\"generated_text\"][len(long_prompt):] print(f\"Generated in {time.time() - start_time} seconds.\") result\n```\n\n**Output** :\n\nCopied\n\n```\nGenerated in 10.96854019165039 seconds. Sure. Here is a function that does that.\\n\\ndef bytes_to_giga(bytes):\\n return bytes / 1024 / 1024 / 1024\\n\\nAnswer: Sure. Here is a function that does that.\\n\\ndef\n```\n\nWe‚Äôre getting the same output as before, however this time, the model repeats the answer multiple times until it‚Äôs 60 tokens cut-off. This is not surprising as we‚Äôve repeated the system prompt ten times for demonstration purposes and thus cued the model to repeat itself.\n\n**Note** that the system prompt should not be repeated ten times in real-world applications - one time is enough!\n\nLet‚Äôs measure the peak GPU memory requirement.\n\nCopied\n\n```\nbytes_to_giga_bytes(torch.cuda.max_memory_allocated())\n```\n\n**Output** :\n\nCopied\n\n```\n37.668193340301514\n```\n\nAs we can see the peak GPU memory requirement is now significantly higher than in the beginning, which is largely due to the longer input sequence. Also the generation takes a little over a minute now.\n\nWe call `flush()` to free GPU memory for our next experiment.\n\nCopied\n\n```\nflush()\n```\n\nFor comparison, let‚Äôs run the same function, but enable Flash Attention instead. To do so, we convert the model to [BetterTransformer](https://huggingface.co/docs/optimum/bettertransformer/overview) and by doing so enabling PyTorch‚Äôs [SDPA self-attention](https://pytorch.org/docs/master/generated/torch.nn.functional.scaled_dot_product_attention) which in turn is able to use Flash Attention.\n\nCopied\n\n```\nmodel.to_bettertransformer()\n```\n\nNow we run the exact same code snippet as before and under the hood Transformers will make use of Flash Attention.\n\nCopied\n\n```\nstart_time = time.time() with torch.backends.cuda.sdp_kernel(enable_flash=True, enable_math=False, enable_mem_efficient=False): result = pipe(long_prompt, max_new_tokens=60)[0][\"generated_text\"][len(long_prompt):] print(f\"Generated in {time.time() - start_time} seconds.\") result\n```\n\n**Output** :\n\nCopied\n\n```\nGenerated in 3.0211617946624756 seconds. Sure. Here is a function that does that.\\n\\ndef bytes_to_giga(bytes):\\n return bytes / 1024 / 1024 / 1024\\n\\nAnswer: Sure. Here is a function that does that.\\n\\ndef\n```\n\nWe‚Äôre getting the exact same result as before, but can observe a very significant speed-up thanks to Flash Attention.\n\nLet‚Äôs measure the memory consumption one last time.\n\nCopied\n\n```\nbytes_to_giga_bytes(torch.cuda.max_memory_allocated())\n```\n\n**Output** :\n\nCopied\n\n```\n32.617331981658936\n```\n\nAnd we‚Äôre almost back to our original 29GB peak GPU memory from the beginning.\n\nWe can observe that we only use roughly 100MB more GPU memory when passing a very long input sequence with Flash Attention compared to passing a short input sequence as done in the beginning.\n\nCopied\n\n```\nflush()\n```\n\nFor more information on how to use Flash Attention, please have a look at [this doc page](https://huggingface.co/docs/transformers/en/perf_infer_gpu_one#flashattention-2).\n\n## [](#3-architectural-innovations) 3. Architectural Innovations\n\nSo far we have looked into improving computational and memory efficiency by:\n\n  * Casting the weights to a lower precision format\n  * Replacing the self-attention algorithm with a more memory- and compute efficient version\n\n\n\nLet‚Äôs now look into how we can change the architecture of an LLM so that it is most effective and efficient for task that require long text inputs, _e.g._ :\n\n  * Retrieval augmented Questions Answering,\n  * Summarization,\n  * Chat\n\n\n\nNote that _chat_ not only requires the LLM to handle long text inputs, but it also necessitates that the LLM is able to efficiently handle the back-and-forth dialogue between user and assistant (such as ChatGPT).\n\nOnce trained, the fundamental LLM architecture is difficult to change, so it is important to make considerations about the LLM‚Äôs tasks beforehand and accordingly optimize the model‚Äôs architecture. There are two important components of the model architecture that quickly become memory and/or performance bottlenecks for large input sequences.\n\n  * The positional embeddings\n  * The key-value cache\n\n\n\nLet‚Äôs go over each component in more detail\n\n### [](#31-improving-positional-embeddings-of-llms) 3.1 Improving positional embeddings of LLMs\n\nSelf-attention puts each token in relation to each other‚Äôs tokens. As an example, theSoftmax(QKT) \\text{Softmax}(\\mathbf{QK}^T) Softmax(QKT) matrix of the text input sequence _‚ÄúHello‚Äù, ‚ÄúI‚Äù, ‚Äúlove‚Äù, ‚Äúyou‚Äù_ could look as follows:\n\n![](/blog/assets/163_optimize_llm/self_attn_tokens.png)\n\nEach word token is given a probability mass at which it attends all other word tokens and, therefore is put into relation with all other word tokens. E.g. the word _‚Äúlove‚Äù_ attends to the word _‚ÄúHello‚Äù_ with 5%, to _‚ÄúI‚Äù_ with 30%, and to itself with 65%.\n\nA LLM based on self-attention, but without position embeddings would have great difficulties in understanding the positions of the text inputs to each other. This is because the probability score computed byQKT \\mathbf{QK}^T QKT relates each word token to each other word token inO(1) O(1) O(1) computations regardless of their relative positional distance to each other. Therefore, for the LLM without position embeddings each token appears to have the same distance to all other tokens, _e.g._ differentiating between _‚ÄúHello I love you‚Äù_ and _‚ÄúYou love I hello‚Äù_ would be very challenging.\n\nFor the LLM to understand sentence order, an additional _cue_ is needed and is usually applied in the form of _positional encodings_ (or also called _positional embeddings_). Positional encodings, encode the position of each token into a numerical presentation that the LLM can leverage to better understand sentence order.\n\nThe authors of the [_Attention Is All You Need_](https://arxiv.org/abs/1706.03762) paper introduced sinusoidal positional embeddingsP=p1,‚Ä¶,pN \\mathbf{P} = \\mathbf{p}_1, \\ldots, \\mathbf{p}_N P=p1‚Äã,‚Ä¶,pN‚Äã . where each vectorpi \\mathbf{p}_i pi‚Äã is computed as a sinusoidal function of its positioni i i . The positional encodings are then simply added to the input sequence vectorsX^=x^1,‚Ä¶,x^N \\mathbf{\\hat{X}} = \\mathbf{\\hat{x}}_1, \\ldots, \\mathbf{\\hat{x}}_N X^=x^1‚Äã,‚Ä¶,x^N‚Äã =x1+p1,‚Ä¶,xN+pN \\mathbf{x}_1 + \\mathbf{p}_1, \\ldots, \\mathbf{x}_N + \\mathbf{p}_N x1‚Äã+p1‚Äã,‚Ä¶,xN‚Äã+pN‚Äã thereby cueing the model to better learn sentence order.\n\nInstead of using fixed position embeddings, others (such as [Devlin et al.](https://arxiv.org/abs/1810.04805)) used learned positional encodings for which the positional embeddingsP \\mathbf{P} P are learned during training.\n\nSinusoidal and learned position embeddings used to be the predominant methods to encode sentence order into LLMs, but a couple of problems related to these positional encodings were found:\n\n  1. Sinusoidal and learned position embeddings are both absolute positional embeddings, _i.e._ encoding a unique embedding for each position id:0,‚Ä¶,N 0, \\ldots, N 0,‚Ä¶,N . As shown by [Huang et al.](https://arxiv.org/abs/2009.13658) and [Su et al.](https://arxiv.org/abs/2104.09864), absolute positional embeddings lead to poor LLM performance for long text inputs. For long text inputs, it is advantageous if the model learns the relative positional distance input tokens have to each other instead of their absolute position.\n  2. When using learned position embeddings, the LLM has to be trained on a fixed input lengthN N N, which makes it difficult to extrapolate to an input length longer than what it was trained on.\n\n\n\nRecently, relative positional embeddings that can tackle the above mentioned problems have become more popular, most notably:\n\n  * [Rotary Position Embedding (RoPE)](https://arxiv.org/abs/2104.09864)\n  * [ALiBi](https://arxiv.org/abs/2108.12409)\n\n\n\nBoth _RoPE_ and _ALiBi_ argue that it‚Äôs best to cue the LLM about sentence order directly in the self-attention algorithm as it‚Äôs there that word tokens are put into relation with each other. More specifically, sentence order should be cued by modifying theQKT \\mathbf{QK}^T QKT computation.\n\nWithout going into too many details, _RoPE_ notes that positional information can be encoded into query-key pairs, _e.g._ qi \\mathbf{q}_i qi‚Äã andxj \\mathbf{x}_j xj‚Äã by rotating each vector by an angleŒ∏‚àói \\theta * i Œ∏‚àói andŒ∏‚àój \\theta * j Œ∏‚àój respectively withi,j i, j i,j describing each vectors sentence position: q^iTx^j=qiTRŒ∏,i‚àíjxj. \\mathbf{\\hat{q}}_i^T \\mathbf{\\hat{x}}_j = \\mathbf{{q}}_i^T \\mathbf{R}_{\\theta, i -j} \\mathbf{{x}}_j. q^‚ÄãiT‚Äãx^j‚Äã=qiT‚ÄãRŒ∏,i‚àíj‚Äãxj‚Äã. RŒ∏,i‚àíj \\mathbf{R}_{\\theta, i - j} RŒ∏,i‚àíj‚Äã thereby represents a rotational matrix.Œ∏ \\theta Œ∏ is _not_ learned during training, but instead set to a pre-defined value that depends on the maximum input sequence length during training.\n\n> By doing so, the propability score betweenqi \\mathbf{q}_i qi‚Äã andqj \\mathbf{q}_j qj‚Äã is only affected ifi‚â†j i \\ne j iÓÄ†=j and solely depends on the relative distancei‚àíj i - j i‚àíj regardless of each vector‚Äôs specific positionsi i i andj j j .\n\n_RoPE_ is used in multiple of today‚Äôs most important LLMs, such as:\n\n  * [**Falcon**](https://huggingface.co/tiiuae/falcon-40b)\n  * [**Llama**](https://arxiv.org/abs/2302.13971)\n  * [**PaLM**](https://arxiv.org/abs/2204.02311)\n\n\n\nAs an alternative, _ALiBi_ proposes a much simpler relative position encoding scheme. The relative distance that input tokens have to each other is added as a negative integer scaled by a pre-defined value `m` to each query-key entry of theQKT \\mathbf{QK}^T QKT matrix right before the softmax computation.\n\n![](/blog/assets/163_optimize_llm/alibi.png)\n\nAs shown in the [ALiBi](https://arxiv.org/abs/2108.12409) paper, this simple relative positional encoding allows the model to retain a high performance even at very long text input sequences.\n\n_ALiBi_ is used in multiple of today‚Äôs most important LLMs, such as:\n\n  * [**MPT**](https://huggingface.co/mosaicml/mpt-30b)\n  * [**BLOOM**](https://huggingface.co/bigscience/bloom)\n\n\n\nBoth _RoPE_ and _ALiBi_ position encodings can extrapolate to input lengths not seen during training whereas it has been shown that extrapolation works much better out-of-the-box for _ALiBi_ as compared to _RoPE_. For ALiBi, one simply increases the values of the lower triangular position matrix to match the length of the input sequence. For _RoPE_ , keeping the sameŒ∏ \\theta Œ∏ that was used during training leads to poor results when passing text inputs much longer than those seen during training, _c.f_ [Press et al.](https://arxiv.org/abs/2108.12409). However, the community has found a couple of effective tricks that adaptŒ∏ \\theta Œ∏, thereby allowing _RoPE_ position embeddings to work well for extrapolated text input sequences (see [here](https://github.com/huggingface/transformers/pull/24653)).\n\n> Both RoPE and ALiBi are relative positional embeddings that are _not_ learned during training, but instead are based on the following intuitions:\n> \n>   * Positional cues about the text inputs should be given directly to theQKT QK^T QKT matrix of the self-attention layer\n>   * The LLM should be incentivized to learn a constant _relative_ distance positional encodings have to each other\n>   * The further text input tokens are from each other, the lower the probability of their query-value probability. Both RoPE and ALiBi lower the query-key probability of tokens far away from each other. RoPE by decreasing their vector product by increasing the angle between the query-key vectors. ALiBi by adding large negative numbers to the vector product\n> \n\n\nIn conclusion, LLMs that are intended to be deployed in tasks that require handling large text inputs are better trained with relative positional embeddings, such as RoPE and ALiBi. Also note that even if an LLM with RoPE and ALiBi has been trained only on a fixed length of sayN1=2048 N_1 = 2048 N1‚Äã=2048 it can still be used in practice with text inputs much larger thanN1 N_1 N1‚Äã, likeN2=8192>N1 N_2 = 8192 > N_1 N2‚Äã=8192>N1‚Äã by extrapolating the positional embeddings.\n\n### [](#32-the-key-value-cache) 3.2 The key-value cache\n\nAuto-regressive text generation with LLMs works by iteratively putting in an input sequence, sampling the next token, appending the next token to the input sequence, and continuing to do so until the LLM produces a token that signifies that the generation has finished.\n\nPlease have a look at [Transformer‚Äôs Generate Text Tutorial](https://huggingface.co/docs/transformers/llm_tutorial#generate-text) to get a more visual explanation of how auto-regressive generation works.\n\nLet‚Äôs run a quick code snippet to show how auto-regressive works in practice. We will simply take the most likely next token via `torch.argmax`.\n\nCopied\n\n```\ninput_ids = tokenizer(prompt, return_tensors=\"pt\")[\"input_ids\"].to(\"cuda\") for _ in range(5): next_logits = model(input_ids)[\"logits\"][:, -1:] next_token_id = torch.argmax(next_logits,dim=-1) input_ids = torch.cat([input_ids, next_token_id], dim=-1) print(\"shape of input_ids\", input_ids.shape) generated_text = tokenizer.batch_decode(input_ids[:, -5:]) generated_text\n```\n\n**Output** :\n\nCopied\n\n```\nshape of input_ids torch.Size([1, 21]) shape of input_ids torch.Size([1, 22]) shape of input_ids torch.Size([1, 23]) shape of input_ids torch.Size([1, 24]) shape of input_ids torch.Size([1, 25]) [' Here is a Python function']\n```\n\nAs we can see every time we increase the text input tokens by the just sampled token.\n\nWith very few exceptions, LLMs are trained using the [causal language modeling objective](https://huggingface.co/docs/transformers/tasks/language_modeling#causal-language-modeling) and therefore mask the upper triangle matrix of the attention score - this is why in the two diagrams above the attention scores are left blank (_a.k.a_ have 0 probability). For a quick recap on causal language modeling you can refer to the [_Illustrated Self Attention blog_](https://jalammar.github.io/illustrated-gpt2/#part-2-illustrated-self-attention).\n\nAs a consequence, tokens _never_ depend on previous tokens, more specifically theqi \\mathbf{q}_i qi‚Äã vector is never put in relation with any key, values vectorskj,vj \\mathbf{k}_j, \\mathbf{v}_j kj‚Äã,vj‚Äã ifj>i j > i j>i . Insteadqi \\mathbf{q}_i qi‚Äã only attends to previous key-value vectorskm<i,vm<i , for m‚àà{0,‚Ä¶i‚àí1} \\mathbf{k}_{m < i}, \\mathbf{v}_{m < i} \\text{ , for } m \\in \\\\{0, \\ldots i - 1\\\\} km<i‚Äã,vm<i‚Äã , for m‚àà{0,‚Ä¶i‚àí1}. In order to reduce unnecessary computation, one can therefore cache each layer‚Äôs key-value vectors for all previous timesteps.\n\nIn the following, we will tell the LLM to make use of the key-value cache by retrieving and forwarding it for each forward pass. In Transformers, we can retrieve the key-value cache by passing the `use_cache` flag to the `forward` call and can then pass it with the current token.\n\nCopied\n\n```\npast_key_values = None # past_key_values is the key-value cache generated_tokens = [] next_token_id = tokenizer(prompt, return_tensors=\"pt\")[\"input_ids\"].to(\"cuda\") for _ in range(5): next_logits, past_key_values = model(next_token_id, past_key_values=past_key_values, use_cache=True).to_tuple() next_logits = next_logits[:, -1:] next_token_id = torch.argmax(next_logits, dim=-1) print(\"shape of input_ids\", next_token_id.shape) print(\"length of key-value cache\", len(past_key_values[0][0])) # past_key_values are of shape [num_layers, 0 for k, 1 for v, batch_size, length, hidden_dim] generated_tokens.append(next_token_id.item()) generated_text = tokenizer.batch_decode(generated_tokens) generated_text\n```\n\n**Output** :\n\nCopied\n\n```\nshape of input_ids torch.Size([1, 1]) length of key-value cache 20 shape of input_ids torch.Size([1, 1]) length of key-value cache 21 shape of input_ids torch.Size([1, 1]) length of key-value cache 22 shape of input_ids torch.Size([1, 1]) length of key-value cache 23 shape of input_ids torch.Size([1, 1]) length of key-value cache 24 [' Here', ' is', ' a', ' Python', ' function']\n```\n\nAs one can see, when using the key-value cache the text input tokens are _not_ increased in length, but remain a single input vector. The length of the key-value cache on the other hand is increased by one at every decoding step.\n\n> Making use of the key-value cache means that theQKT \\mathbf{QK}^T QKT is essentially reduced toqcKT \\mathbf{q}_c\\mathbf{K}^T qc‚ÄãKT withqc \\mathbf{q}_c qc‚Äã being the query projection of the currently passed input token which is _always_ just a single vector.\n\nUsing the key-value cache has two advantages:\n\n  * Significant increase in computational efficiency as less computations are performed compared to computing the fullQKT \\mathbf{QK}^T QKT matrix. This leads to an increase in inference speed\n  * The maximum required memory is not increased quadratically with the number of generated tokens, but only increases linearly.\n\n\n\n> One should _always_ make use of the key-value cache as it leads to identical results and a significant speed-up for longer input sequences. Transformers has the key-value cache enabled by default when making use of the text pipeline or the [`generate` method](https://huggingface.co/docs/transformers/main_classes/text_generation). We have an entire guide dedicated to caches [here](./kv_cache).\n\nNote that, despite our advice to use key-value caches, your LLM output may be slightly different when you use them. This is a property of the matrix multiplication kernels themselves ‚Äî you can read more about it [here](https://github.com/huggingface/transformers/issues/25420#issuecomment-1775317535).\n\n#### [](#321-multi-round-conversation) 3.2.1 Multi-round conversation\n\nThe key-value cache is especially useful for applications such as chat where multiple passes of auto-regressive decoding are required. Let‚Äôs look at an example.\n\nCopied\n\n```\nUser: How many people live in France? Assistant: Roughly 75 million people live in France User: And how many are in Germany? Assistant: Germany has ca. 81 million inhabitants\n```\n\nIn this chat, the LLM runs auto-regressive decoding twice:\n\n  1. The first time, the key-value cache is empty and the input prompt is `\"User: How many people live in France?\"` and the model auto-regressively generates the text `\"Roughly 75 million people live in France\"` while increasing the key-value cache at every decoding step.\n  2. The second time the input prompt is `\"User: How many people live in France? \\n Assistant: Roughly 75 million people live in France \\n User: And how many in Germany?\"`. Thanks to the cache, all key-value vectors for the first two sentences are already computed. Therefore the input prompt only consists of `\"User: And how many in Germany?\"`. While processing the shortened input prompt, its computed key-value vectors are concatenated to the key-value cache of the first decoding. The second Assistant‚Äôs answer `\"Germany has ca. 81 million inhabitants\"` is then auto-regressively generated with the key-value cache consisting of encoded key-value vectors of `\"User: How many people live in France? \\n Assistant: Roughly 75 million people live in France \\n User: And how many are in Germany?\"`.\n\n\n\nTwo things should be noted here:\n\n  1. Keeping all the context is crucial for LLMs deployed in chat so that the LLM understands all the previous context of the conversation. E.g. for the example above the LLM needs to understand that the user refers to the population when asking `\"And how many are in Germany\"`.\n  2. The key-value cache is extremely useful for chat as it allows us to continuously grow the encoded chat history instead of having to re-encode the chat history again from scratch (as e.g. would be the case when using an encoder-decoder architecture).\n\n\n\nIn `transformers`, a `generate` call will return `past_key_values` when `return_dict_in_generate=True` is passed, in addition to the default `use_cache=True`. Note that it is not yet available through the `pipeline` interface.\n\nCopied\n\n```\n# Generation as usual prompt = system_prompt + \"Question: Please write a function in Python that transforms bytes to Giga bytes.\\n\\nAnswer: Here\" model_inputs = tokenizer(prompt, return_tensors='pt') generation_output = model.generate(**model_inputs, max_new_tokens=60, return_dict_in_generate=True) decoded_output = tokenizer.batch_decode(generation_output.sequences)[0] # Piping the returned `past_key_values` to speed up the next conversation round prompt = decoded_output + \"\\nQuestion: How can I modify the function above to return Mega bytes instead?\\n\\nAnswer: Here\" model_inputs = tokenizer(prompt, return_tensors='pt') generation_output = model.generate( **model_inputs, past_key_values=generation_output.past_key_values, max_new_tokens=60, return_dict_in_generate=True ) tokenizer.batch_decode(generation_output.sequences)[0][len(prompt):]\n```\n\n**Output** :\n\nCopied\n\n```\nis a modified version of the function that returns Mega bytes instead. def bytes_to_megabytes(bytes): return bytes / 1024 / 1024 Answer: The function takes a number of bytes as input and returns the number of\n```\n\nGreat, no additional time is spent recomputing the same key and values for the attention layer! There is however one catch. While the required peak memory for theQKT \\mathbf{QK}^T QKT matrix is significantly reduced, holding the key-value cache in memory can become very memory expensive for long input sequences or multi-turn chat. Remember that the key-value cache needs to store the key-value vectors for all previous input vectorsxi, for i‚àà{1,‚Ä¶,c‚àí1} \\mathbf{x}_i \\text{, for } i \\in \\\\{1, \\ldots, c - 1\\\\} xi‚Äã, for i‚àà{1,‚Ä¶,c‚àí1} for all self-attention layers and for all attention heads.\n\nLet‚Äôs compute the number of float values that need to be stored in the key-value cache for the LLM `bigcode/octocoder` that we used before. The number of float values amounts to two times the sequence length times the number of attention heads times the attention head dimension and times the number of layers. Computing this for our LLM at a hypothetical input sequence length of 16000 gives:\n\nCopied\n\n```\nconfig = model.config 2 * 16_000 * config.n_layer * config.n_head * config.n_embd // config.n_head\n```\n\n**Output** :\n\nCopied\n\n```\n7864320000\n```\n\nRoughly 8 billion float values! Storing 8 billion float values in `float16` precision requires around 15 GB of RAM which is circa half as much as the model weights themselves! Researchers have proposed two methods that allow to significantly reduce the memory cost of storing the key-value cache, which are explored in the next subsections.\n\n#### [](#322-multi-query-attention-mqa) 3.2.2 Multi-Query-Attention (MQA)\n\n[Multi-Query-Attention](https://arxiv.org/abs/1911.02150) was proposed in Noam Shazeer‚Äôs _Fast Transformer Decoding: One Write-Head is All You Need_ paper. As the title says, Noam found out that instead of using `n_head` key-value projections weights, one can use a single head-value projection weight pair that is shared across all attention heads without that the model‚Äôs performance significantly degrades.\n\n> By using a single head-value projection weight pair, the key value vectorski,vi \\mathbf{k}_i, \\mathbf{v}_i ki‚Äã,vi‚Äã have to be identical across all attention heads which in turn means that we only need to store 1 key-value projection pair in the cache instead of `n_head` ones.\n\nAs most LLMs use between 20 and 100 attention heads, MQA significantly reduces the memory consumption of the key-value cache. For the LLM used in this notebook we could therefore reduce the required memory consumption from 15 GB to less than 400 MB at an input sequence length of 16000.\n\nIn addition to memory savings, MQA also leads to improved computational efficiency as explained in the following. In auto-regressive decoding, large key-value vectors need to be reloaded, concatenated with the current key-value vector pair to be then fed into theqcKT \\mathbf{q}_c\\mathbf{K}^T qc‚ÄãKT computation at every step. For auto-regressive decoding, the required memory bandwidth for the constant reloading can become a serious time bottleneck. By reducing the size of the key-value vectors less memory needs to be accessed, thus reducing the memory bandwidth bottleneck. For more detail, please have a look at [Noam‚Äôs paper](https://arxiv.org/abs/1911.02150).\n\nThe important part to understand here is that reducing the number of key-value attention heads to 1 only makes sense if a key-value cache is used. The peak memory consumption of the model for a single forward pass without key-value cache stays unchanged as every attention head still has a unique query vector so that each attention head still has a differentQKT \\mathbf{QK}^T QKT matrix.\n\nMQA has seen wide adoption by the community and is now used by many of the most popular LLMs:\n\n  * [**Falcon**](https://huggingface.co/tiiuae/falcon-40b)\n  * [**PaLM**](https://arxiv.org/abs/2204.02311)\n  * [**MPT**](https://huggingface.co/mosaicml/mpt-30b)\n  * [**BLOOM**](https://huggingface.co/bigscience/bloom)\n\n\n\nAlso, the checkpoint used in this notebook - `bigcode/octocoder` - makes use of MQA.\n\n#### [](#323-grouped-query-attention-gqa) 3.2.3 Grouped-Query-Attention (GQA)\n\n[Grouped-Query-Attention](https://arxiv.org/abs/2305.13245), as proposed by Ainslie et al. from Google, found that using MQA can often lead to quality degradation compared to using vanilla multi-key-value head projections. The paper argues that more model performance can be kept by less drastically reducing the number of query head projection weights. Instead of using just a single key-value projection weight, `n < n_head` key-value projection weights should be used. By choosing `n` to a significantly smaller value than `n_head`, such as 2,4 or 8 almost all of the memory and speed gains from MQA can be kept while sacrificing less model capacity and thus arguably less performance.\n\nMoreover, the authors of GQA found out that existing model checkpoints can be _uptrained_ to have a GQA architecture with as little as 5% of the original pre-training compute. While 5% of the original pre-training compute can still be a massive amount, GQA _uptraining_ allows existing checkpoints to be useful for longer input sequences.\n\nGQA was only recently proposed which is why there is less adoption at the time of writing this notebook. The most notable application of GQA is [Llama-v2](https://huggingface.co/meta-llama/Llama-2-70b-hf).\n\n> As a conclusion, it is strongly recommended to make use of either GQA or MQA if the LLM is deployed with auto-regressive decoding and is required to handle large input sequences as is the case for example for chat.\n\n## [](#conclusion) Conclusion\n\nThe research community is constantly coming up with new, nifty ways to speed up inference time for ever-larger LLMs. As an example, one such promising research direction is [speculative decoding](https://arxiv.org/abs/2211.17192) where ‚Äúeasy tokens‚Äù are generated by smaller, faster language models and only ‚Äúhard tokens‚Äù are generated by the LLM itself. Going into more detail is out of the scope of this notebook, but can be read upon in this [nice blog post](https://huggingface.co/blog/assisted-generation).\n\nThe reason massive LLMs such as GPT3/4, Llama-2-70b, Claude, PaLM can run so quickly in chat-interfaces such as [Hugging Face Chat](https://huggingface.co/chat/) or ChatGPT is to a big part thanks to the above-mentioned improvements in precision, algorithms, and architecture. Going forward, accelerators such as GPUs, TPUs, etc‚Ä¶ will only get faster and allow for more memory, but one should nevertheless always make sure to use the best available algorithms and architectures to get the most bang for your buck ü§ó\n\n[< > Update on GitHub](https://github.com/huggingface/transformers/blob/main/docs/source/en/llm_tutorial_optimization.md)\n\n[‚ÜêModel training anatomy](/docs/transformers/en/model_memory_anatomy) [Agents and Tools‚Üí](/docs/transformers/en/main_classes/agent)\n\n[Optimizing LLMs for Speed and Memory](#optimizing-llms-for-speed-and-memory) [1. Lower Precision](#1-lower-precision) [2. Flash Attention](#2-flash-attention) [3. Architectural Innovations](#3-architectural-innovations) [3.1 Improving positional embeddings of LLMs](#31-improving-positional-embeddings-of-llms) [3.2 The key-value cache](#32-the-key-value-cache) [3.2.1 Multi-round conversation](#321-multi-round-conversation)[3.2.2 Multi-Query-Attention (MQA)](#322-multi-query-attention-mqa)[3.2.3 Grouped-Query-Attention (GQA)](#323-grouped-query-attention-gqa)[Conclusion](#conclusion)\n",
    "content_quality_score": 0.8,
    "summary": null,
    "child_urls": [
        "https://huggingface.co/",
        "https://huggingface.co/models",
        "https://huggingface.co/datasets",
        "https://huggingface.co/spaces",
        "https://huggingface.co/posts",
        "https://huggingface.co/docs",
        "https://huggingface.co/enterprise",
        "https://huggingface.co/pricing",
        "https://huggingface.co/login",
        "https://huggingface.co/join",
        "https://huggingface.co/docs/transformers/en/index",
        "https://huggingface.co/docs/transformers/en/quicktour",
        "https://huggingface.co/docs/transformers/en/installation",
        "https://huggingface.co/docs/transformers/en/add_new_model",
        "https://huggingface.co/docs/transformers/en/pipeline_tutorial",
        "https://huggingface.co/docs/transformers/en/autoclass_tutorial",
        "https://huggingface.co/docs/transformers/en/preprocessing",
        "https://huggingface.co/docs/transformers/en/training",
        "https://huggingface.co/docs/transformers/en/run_scripts",
        "https://huggingface.co/docs/transformers/en/accelerate",
        "https://huggingface.co/docs/transformers/en/peft",
        "https://huggingface.co/docs/transformers/en/model_sharing",
        "https://huggingface.co/docs/transformers/en/agents",
        "https://huggingface.co/docs/transformers/en/agents_advanced",
        "https://huggingface.co/docs/transformers/en/llm_tutorial",
        "https://huggingface.co/docs/transformers/en/conversations",
        "https://huggingface.co/docs/transformers/en/fast_tokenizers",
        "https://huggingface.co/docs/transformers/en/multilingual",
        "https://huggingface.co/docs/transformers/en/create_a_model",
        "https://huggingface.co/docs/transformers/en/custom_models",
        "https://huggingface.co/docs/transformers/en/chat_templating",
        "https://huggingface.co/docs/transformers/en/trainer",
        "https://huggingface.co/docs/transformers/en/sagemaker",
        "https://huggingface.co/docs/transformers/en/serialization",
        "https://huggingface.co/docs/transformers/en/tflite",
        "https://huggingface.co/docs/transformers/en/torchscript",
        "https://huggingface.co/docs/transformers/en/benchmarks",
        "https://huggingface.co/docs/transformers/en/notebooks",
        "https://huggingface.co/docs/transformers/en/community",
        "https://huggingface.co/docs/transformers/en/troubleshooting",
        "https://huggingface.co/docs/transformers/en/gguf",
        "https://huggingface.co/docs/transformers/en/tiktoken",
        "https://huggingface.co/docs/transformers/en/modular_transformers",
        "https://huggingface.co/docs/transformers/en/how_to_hack_models",
        "https://huggingface.co/docs/transformers/en/quantization/overview",
        "https://huggingface.co/docs/transformers/en/quantization/bitsandbytes",
        "https://huggingface.co/docs/transformers/en/quantization/gptq",
        "https://huggingface.co/docs/transformers/en/quantization/awq",
        "https://huggingface.co/docs/transformers/en/quantization/aqlm",
        "https://huggingface.co/docs/transformers/en/quantization/vptq",
        "https://huggingface.co/docs/transformers/en/quantization/quanto",
        "https://huggingface.co/docs/transformers/en/quantization/eetq",
        "https://huggingface.co/docs/transformers/en/quantization/higgs",
        "https://huggingface.co/docs/transformers/en/quantization/hqq",
        "https://huggingface.co/docs/transformers/en/quantization/fbgemm_fp8",
        "https://huggingface.co/docs/transformers/en/quantization/optimum",
        "https://huggingface.co/docs/transformers/en/quantization/torchao",
        "https://huggingface.co/docs/transformers/en/quantization/bitnet",
        "https://huggingface.co/docs/transformers/en/quantization/compressed_tensors",
        "https://huggingface.co/docs/transformers/en/quantization/contribute",
        "https://huggingface.co/docs/transformers/en/performance",
        "https://huggingface.co/docs/transformers/en/llm_optims",
        "https://huggingface.co/docs/transformers/en/perf_train_gpu_one",
        "https://huggingface.co/docs/transformers/en/perf_train_gpu_many",
        "https://huggingface.co/docs/transformers/en/fsdp",
        "https://huggingface.co/docs/transformers/en/deepspeed",
        "https://huggingface.co/docs/transformers/en/perf_train_cpu",
        "https://huggingface.co/docs/transformers/en/perf_train_cpu_many",
        "https://huggingface.co/docs/transformers/en/perf_train_tpu_tf",
        "https://huggingface.co/docs/transformers/en/perf_train_special",
        "https://huggingface.co/docs/transformers/en/perf_hardware",
        "https://huggingface.co/docs/transformers/en/hpo_train",
        "https://huggingface.co/docs/transformers/en/perf_infer_cpu",
        "https://huggingface.co/docs/transformers/en/perf_infer_gpu_one",
        "https://huggingface.co/docs/transformers/en/perf_infer_gpu_multi",
        "https://huggingface.co/docs/transformers/en/big_models",
        "https://huggingface.co/docs/transformers/en/debugging",
        "https://huggingface.co/docs/transformers/en/tf_xla",
        "https://huggingface.co/docs/transformers/en/perf_torch_compile",
        "https://huggingface.co/docs/transformers/en/contributing",
        "https://huggingface.co/docs/transformers/en/add_new_pipeline",
        "https://huggingface.co/docs/transformers/en/testing",
        "https://huggingface.co/docs/transformers/en/pr_checks",
        "https://huggingface.co/docs/transformers/en/philosophy",
        "https://huggingface.co/docs/transformers/en/glossary",
        "https://huggingface.co/docs/transformers/en/task_summary",
        "https://huggingface.co/docs/transformers/en/tasks_explained",
        "https://huggingface.co/docs/transformers/en/model_summary",
        "https://huggingface.co/docs/transformers/en/tokenizer_summary",
        "https://huggingface.co/docs/transformers/en/attention",
        "https://huggingface.co/docs/transformers/en/pad_truncation",
        "https://huggingface.co/docs/transformers/en/bertology",
        "https://huggingface.co/docs/transformers/en/perplexity",
        "https://huggingface.co/docs/transformers/en/pipeline_webserver",
        "https://huggingface.co/docs/transformers/en/model_memory_anatomy",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization",
        "https://huggingface.co/docs/transformers/en/main_classes/agent",
        "https://huggingface.co/docs/transformers/en/model_doc/auto",
        "https://huggingface.co/docs/transformers/en/main_classes/backbones",
        "https://huggingface.co/docs/transformers/en/main_classes/callback",
        "https://huggingface.co/docs/transformers/en/main_classes/configuration",
        "https://huggingface.co/docs/transformers/en/main_classes/data_collator",
        "https://huggingface.co/docs/transformers/en/main_classes/keras_callbacks",
        "https://huggingface.co/docs/transformers/en/main_classes/logging",
        "https://huggingface.co/docs/transformers/en/main_classes/model",
        "https://huggingface.co/docs/transformers/en/main_classes/text_generation",
        "https://huggingface.co/docs/transformers/en/main_classes/onnx",
        "https://huggingface.co/docs/transformers/en/main_classes/optimizer_schedules",
        "https://huggingface.co/docs/transformers/en/main_classes/output",
        "https://huggingface.co/docs/transformers/en/main_classes/pipelines",
        "https://huggingface.co/docs/transformers/en/main_classes/processors",
        "https://huggingface.co/docs/transformers/en/main_classes/quantization",
        "https://huggingface.co/docs/transformers/en/main_classes/tokenizer",
        "https://huggingface.co/docs/transformers/en/main_classes/trainer",
        "https://huggingface.co/docs/transformers/en/main_classes/deepspeed",
        "https://huggingface.co/docs/transformers/en/main_classes/executorch",
        "https://huggingface.co/docs/transformers/en/main_classes/feature_extractor",
        "https://huggingface.co/docs/transformers/en/main_classes/image_processor",
        "https://huggingface.co/docs/transformers/en/internal/modeling_utils",
        "https://huggingface.co/docs/transformers/en/internal/pipelines_utils",
        "https://huggingface.co/docs/transformers/en/internal/tokenization_utils",
        "https://huggingface.co/docs/transformers/en/internal/trainer_utils",
        "https://huggingface.co/docs/transformers/en/internal/generation_utils",
        "https://huggingface.co/docs/transformers/en/internal/image_processing_utils",
        "https://huggingface.co/docs/transformers/en/internal/audio_utils",
        "https://huggingface.co/docs/transformers/en/internal/file_utils",
        "https://huggingface.co/docs/transformers/en/internal/time_series_utils",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/#optimizing-llms-for-speed-and-memory",
        "https://huggingface.co/tiiuae/falcon-40b",
        "https://huggingface.co/meta-llama/Llama-2-70b-hf",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/main_classes/quantization.md",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/(https:/arxiv.org/abs/2305.13245)",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/#1-lower-precision",
        "https://huggingface.co/bigscience/bloom",
        "https://huggingface.co/mosaicml/mpt-30b",
        "https://huggingface.co/bigcode/starcoder",
        "https://huggingface.co/docs/transformers/perf_train_gpu_many#tensor-parallelism",
        "https://huggingface.co/docs/transformers/perf_train_gpu_many#naive-model-parallelism-vertical-and-pipeline-parallelism",
        "https://huggingface.co/docs/accelerate/v0.22.0/en/concept_guides/big_model_inference",
        "https://huggingface.co/docs/transformers/en/perf_train_gpu_many#naive-model-parallelism-vertical-and-pipeline-parallelism",
        "https://huggingface.co/bigcode/octocoder",
        "https://huggingface.co/docs/transformers/main_classes/pipelines",
        "https://huggingface.co/meta-llama/Llama-2-7b-hf/blob/6fdf2e60f86ff2481f2241aaee459f85b5b0bbb9/config.json#L21",
        "https://huggingface.co/docs/transformers/main/en/main_classes/quantization#autogptq-integration%60",
        "https://huggingface.co/docs/transformers/main_classes/quantization#general-usage",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/#2-flash-attention",
        "https://huggingface.co/docs/optimum/bettertransformer/overview",
        "https://huggingface.co/docs/transformers/en/perf_infer_gpu_one#flashattention-2",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/#3-architectural-innovations",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/#31-improving-positional-embeddings-of-llms",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/#32-the-key-value-cache",
        "https://huggingface.co/docs/transformers/llm_tutorial#generate-text",
        "https://huggingface.co/docs/transformers/tasks/language_modeling#causal-language-modeling",
        "https://huggingface.co/docs/transformers/main_classes/text_generation",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/kv_cache",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/#321-multi-round-conversation",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/#322-multi-query-attention-mqa",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/#323-grouped-query-attention-gqa",
        "https://huggingface.co/docs/transformers/en/llm_tutorial_optimization/#conclusion",
        "https://huggingface.co/blog/assisted-generation",
        "https://huggingface.co/chat/",
        "https://github.com/huggingface/transformers",
        "https://arxiv.org/abs/2001.08361",
        "https://arxiv.org/abs/2206.07682",
        "https://arxiv.org/abs/2108.12409",
        "https://arxiv.org/abs/2104.09864",
        "https://arxiv.org/abs/1911.02150",
        "https://en.wikipedia.org/wiki/Single-precision_floating-point_format",
        "https://en.wikipedia.org/wiki/Bfloat16_floating-point_format",
        "https://en.wikipedia.org/wiki/Half-precision_floating-point_format",
        "https://github.com/huggingface/text-generation-inference/tree/main/server/text_generation_server/models/custom_modeling",
        "https://pytorch.org/docs/stable/generated/torch.cuda.max_memory_allocated.html",
        "https://discuss.pytorch.org/t/bfloat16-native-support/117155/5",
        "https://github.com/huggingface/accelerate/blob/29be4788629b772a3b722076e433b5b3b5c85da3/src/accelerate/utils/memory.py#L63",
        "https://arxiv.org/abs/2208.07339",
        "https://arxiv.org/abs/2210.17323",
        "https://github.com/bitsandbytes-foundation/bitsandbytes",
        "https://arxiv.org/abs/2205.14135",
        "https://pytorch.org/docs/master/generated/torch.nn.functional.scaled_dot_product_attention",
        "https://arxiv.org/abs/1706.03762",
        "https://arxiv.org/abs/1810.04805",
        "https://arxiv.org/abs/2009.13658",
        "https://arxiv.org/abs/2302.13971",
        "https://arxiv.org/abs/2204.02311",
        "https://github.com/huggingface/transformers/pull/24653",
        "https://jalammar.github.io/illustrated-gpt2/#part-2-illustrated-self-attention",
        "https://github.com/huggingface/transformers/issues/25420#issuecomment-1775317535",
        "https://arxiv.org/abs/2305.13245",
        "https://arxiv.org/abs/2211.17192",
        "https://github.com/huggingface/transformers/blob/main/docs/source/en/llm_tutorial_optimization.md"
    ]
}