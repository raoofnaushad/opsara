[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2FNVIDIA%2FMegatron-LM%2F)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)
    * [ Nonprofits ](/solutions/industry/nonprofits)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2FNVIDIA%2FMegatron-LM%2F)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=NVIDIA%2FMegatron-LM) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ NVIDIA ](/NVIDIA) / **[Megatron-LM](/NVIDIA/Megatron-LM) ** Public

  * [ Notifications ](/login?return_to=%2FNVIDIA%2FMegatron-LM) You must be signed in to change notification settings
  * [ Fork 2.5k ](/login?return_to=%2FNVIDIA%2FMegatron-LM)
  * [ Star  11.2k ](/login?return_to=%2FNVIDIA%2FMegatron-LM)




Ongoing research training transformer models at scale 

[docs.nvidia.com/megatron-core/developer-guide/latest/user-guide/index.html#quick-start](https://docs.nvidia.com/megatron-core/developer-guide/latest/user-guide/index.html#quick-start "https://docs.nvidia.com/megatron-core/developer-guide/latest/user-guide/index.html#quick-start")

### License

[ View license ](/NVIDIA/Megatron-LM/blob/main/LICENSE)

[ 11.2k stars ](/NVIDIA/Megatron-LM/stargazers) [ 2.5k forks ](/NVIDIA/Megatron-LM/forks) [ Branches ](/NVIDIA/Megatron-LM/branches) [ Tags ](/NVIDIA/Megatron-LM/tags) [ Activity ](/NVIDIA/Megatron-LM/activity)

[ Star  ](/login?return_to=%2FNVIDIA%2FMegatron-LM)

[ Notifications ](/login?return_to=%2FNVIDIA%2FMegatron-LM) You must be signed in to change notification settings

  * [ Code ](/NVIDIA/Megatron-LM)
  * [ Issues 169 ](/NVIDIA/Megatron-LM/issues)
  * [ Pull requests 156 ](/NVIDIA/Megatron-LM/pulls)
  * [ Discussions ](/NVIDIA/Megatron-LM/discussions)
  * [ Actions ](/NVIDIA/Megatron-LM/actions)
  * [ Security ](/NVIDIA/Megatron-LM/security)
  * [ Insights ](/NVIDIA/Megatron-LM/pulse)



Additional navigation options

  * [ Code  ](/NVIDIA/Megatron-LM)
  * [ Issues  ](/NVIDIA/Megatron-LM/issues)
  * [ Pull requests  ](/NVIDIA/Megatron-LM/pulls)
  * [ Discussions  ](/NVIDIA/Megatron-LM/discussions)
  * [ Actions  ](/NVIDIA/Megatron-LM/actions)
  * [ Security  ](/NVIDIA/Megatron-LM/security)
  * [ Insights  ](/NVIDIA/Megatron-LM/pulse)



# NVIDIA/Megatron-LM

main

[**18** Branches](/NVIDIA/Megatron-LM/branches)[**16** Tags](/NVIDIA/Megatron-LM/tags)

[](/NVIDIA/Megatron-LM/branches)[](/NVIDIA/Megatron-LM/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[![ko3n1g](https://avatars.githubusercontent.com/u/16716991?v=4&size=40)](/ko3n1g)[ko3n1g](/NVIDIA/Megatron-LM/commits?author=ko3n1g)[Merge branch 'ko3n1g/chore/bump-pyt-24.10' into 'main'](/NVIDIA/Megatron-LM/commit/66e530687117d20d5c48a98a35d75130707700f9)Jan 22, 2025[66e5306](/NVIDIA/Megatron-LM/commit/66e530687117d20d5c48a98a35d75130707700f9) Â· Jan 22, 2025

## History

[5,583 Commits](/NVIDIA/Megatron-LM/commits/main/)[](/NVIDIA/Megatron-LM/commits/main/)  
[.github](/NVIDIA/Megatron-LM/tree/main/.github ".github")| [.github](/NVIDIA/Megatron-LM/tree/main/.github ".github")| [Disable auto closure of stale issues/PRs](/NVIDIA/Megatron-LM/commit/94cbd0111c9365020d7b5f1ae44097090f101345 "Disable auto closure of stale issues/PRs")| Jul 20, 2023  
[.gitlab](/NVIDIA/Megatron-LM/tree/main/.gitlab ".gitlab")| [.gitlab](/NVIDIA/Megatron-LM/tree/main/.gitlab ".gitlab")| [ADLR/megatron-lm!2299 - chore: Bump PyT to 24.10](/NVIDIA/Megatron-LM/commit/ffdb6dcbf7edc499a2a5f64e9c83cdddc418c3a1 "ADLR/megatron-lm!2299 - chore: Bump PyT to 24.10")| Jan 22, 2025  
[docs](/NVIDIA/Megatron-LM/tree/main/docs "docs")| [docs](/NVIDIA/Megatron-LM/tree/main/docs "docs")| [ADLR/megatron-lm!2231 - Fix deprecate/future warnings and typos](/NVIDIA/Megatron-LM/commit/2488e20d488b35259f6eb53267e8a0525a373599 "ADLR/megatron-lm!2231 - Fix deprecate/future warnings and typos
Co-authored-by: Deepak Narayanan <dnarayanan@nvidia.com>
Co-authored-by: NoelBIrd <lduldu00228@gmail.com>
Co-authored-by: omahs <73983677+omahs@users.noreply.github.com>
Co-authored-by: Hashiam Kadhim <hashiamkadhim@gmail.com>
Co-authored-by: stdioh <1915326646@qq.com>
Co-authored-by: fancyxun <837633751@qq.com>
Co-authored-by: Zhan Lu <51200935+lausannel@users.noreply.github.com>
Co-authored-by: MekkCyber <mekk.cyber@gmail.com>
Co-authored-by: Feiteng <lifeiteng0422@gmail.com>
Co-authored-by: youzagou <102338040+youzagou@users.noreply.github.com>
Co-authored-by: JavaZero <71128095+JavaZeroo@users.noreply.github.com>
Co-authored-by: jsteinberg-rbi <jsteinberg@rbi.com>
Co-authored-by: AlexCHEN <52059011+alexchen4ai@users.noreply.github.com>")| Oct 29, 2024  
[examples](/NVIDIA/Megatron-LM/tree/main/examples "examples")| [examples](/NVIDIA/Megatron-LM/tree/main/examples "examples")| [Merge branch 'add_llama_support' into 'main'](/NVIDIA/Megatron-LM/commit/ae1c43d0168941c444f3baa8a6af7e5ef70efaa2 "Merge branch 'add_llama_support' into 'main'
Add llama 3.1 support for mmodal example
See merge request ADLR/megatron-lm!2550")| Jan 22, 2025  
[images](/NVIDIA/Megatron-LM/tree/main/images "images")| [images](/NVIDIA/Megatron-LM/tree/main/images "images")| [ADLR/megatron-lm!1732 - New scaling figures on H100 GPUs](/NVIDIA/Megatron-LM/commit/f2e5db402c44ae309aa6448bcb4ae87e8ae0f5f4 "ADLR/megatron-lm!1732 - New scaling figures on H100 GPUs")| Jul 15, 2024  
[megatron](/NVIDIA/Megatron-LM/tree/main/megatron "megatron")| [megatron](/NVIDIA/Megatron-LM/tree/main/megatron "megatron")| [Merge branch 'add_llama_support' into 'main'](/NVIDIA/Megatron-LM/commit/ae1c43d0168941c444f3baa8a6af7e5ef70efaa2 "Merge branch 'add_llama_support' into 'main'
Add llama 3.1 support for mmodal example
See merge request ADLR/megatron-lm!2550")| Jan 22, 2025  
[requirements](/NVIDIA/Megatron-LM/tree/main/requirements "requirements")| [requirements](/NVIDIA/Megatron-LM/tree/main/requirements "requirements")| [ADLR/megatron-lm!2299 - chore: Bump PyT to 24.10](/NVIDIA/Megatron-LM/commit/ffdb6dcbf7edc499a2a5f64e9c83cdddc418c3a1 "ADLR/megatron-lm!2299 - chore: Bump PyT to 24.10")| Jan 22, 2025  
[tasks](/NVIDIA/Megatron-LM/tree/main/tasks "tasks")| [tasks](/NVIDIA/Megatron-LM/tree/main/tasks "tasks")| [ADLR/megatron-lm!2513 - add group_desc when invoking new_group()](/NVIDIA/Megatron-LM/commit/e8336b113978fe5b356076be7708cb6bbc185929 "ADLR/megatron-lm!2513 - add group_desc when invoking new_group\(\)")| Jan 21, 2025  
[tests](/NVIDIA/Megatron-LM/tree/main/tests "tests")| [tests](/NVIDIA/Megatron-LM/tree/main/tests "tests")| [Merge branch 'ko3n1g/chore/bump-pyt-24.10' into 'main'](/NVIDIA/Megatron-LM/commit/66e530687117d20d5c48a98a35d75130707700f9 "Merge branch 'ko3n1g/chore/bump-pyt-24.10' into 'main'
chore: Bump PyT to 24.10
See merge request ADLR/megatron-lm!2299")| Jan 22, 2025  
[tools](/NVIDIA/Megatron-LM/tree/main/tools "tools")| [tools](/NVIDIA/Megatron-LM/tree/main/tools "tools")| [ADLR/megatron-lm!2431 - Change Megatron text generation frontend to Mâ¦](/NVIDIA/Megatron-LM/commit/cb678cccf5c706cfc9f83a1ab6ae4d2cb9b1c5f3 "ADLR/megatron-lm!2431 - Change Megatron text generation frontend to MCore engine
Co-authored-by: Mcore Bot <mcore-bot@nvidia.com>")| Jan 17, 2025  
[.coveragerc](/NVIDIA/Megatron-LM/blob/main/.coveragerc ".coveragerc")| [.coveragerc](/NVIDIA/Megatron-LM/blob/main/.coveragerc ".coveragerc")| [Adding proper test cases](/NVIDIA/Megatron-LM/commit/8b94a16092df9f22daef3d97faa47911c43b1894 "Adding proper test cases")| Oct 14, 2022  
[.flake8](/NVIDIA/Megatron-LM/blob/main/.flake8 ".flake8")| [.flake8](/NVIDIA/Megatron-LM/blob/main/.flake8 ".flake8")| [ADLR/megatron-lm!1954 - Style: Formatting and imports](/NVIDIA/Megatron-LM/commit/b498194de381950c93582abf47efda085b18ab89 "ADLR/megatron-lm!1954 - Style: Formatting and imports")| Aug 28, 2024  
[.gitignore](/NVIDIA/Megatron-LM/blob/main/.gitignore ".gitignore")| [.gitignore](/NVIDIA/Megatron-LM/blob/main/.gitignore ".gitignore")| [ADLR/megatron-lm!1924 - ci: Converge tests and release](/NVIDIA/Megatron-LM/commit/455e9149084a9532bc262530656f954e7b35ba39 "ADLR/megatron-lm!1924 - ci: Converge tests and release")| Aug 30, 2024  
[.gitlab-ci.yml](/NVIDIA/Megatron-LM/blob/main/.gitlab-ci.yml ".gitlab-ci.yml")| [.gitlab-ci.yml](/NVIDIA/Megatron-LM/blob/main/.gitlab-ci.yml ".gitlab-ci.yml")| [ADLR/megatron-lm!2467 - ci: Add memory consumption to tests](/NVIDIA/Megatron-LM/commit/9238a5e423d25d134fe1a51efbf965a5231ec021 "ADLR/megatron-lm!2467 - ci: Add memory consumption to tests")| Jan 3, 2025  
[.pylintrc](/NVIDIA/Megatron-LM/blob/main/.pylintrc ".pylintrc")| [.pylintrc](/NVIDIA/Megatron-LM/blob/main/.pylintrc ".pylintrc")| [ADLR/megatron-lm!2563 - ci: Add `possibly-used-before-assignment`](/NVIDIA/Megatron-LM/commit/61ed096d05d712e28fc94aab241f5548eb68f6fa "ADLR/megatron-lm!2563 - ci: Add `possibly-used-before-assignment`")| Jan 17, 2025  
[CHANGELOG.md](/NVIDIA/Megatron-LM/blob/main/CHANGELOG.md "CHANGELOG.md")| [CHANGELOG.md](/NVIDIA/Megatron-LM/blob/main/CHANGELOG.md "CHANGELOG.md")| [ADLR/megatron-lm!2258 - docs: Update changelog](/NVIDIA/Megatron-LM/commit/e93058c8a26c10675aaa3983ffa61bc94147e9fd "ADLR/megatron-lm!2258 - docs: Update changelog")| Oct 23, 2024  
[CODEOWNERS](/NVIDIA/Megatron-LM/blob/main/CODEOWNERS "CODEOWNERS")| [CODEOWNERS](/NVIDIA/Megatron-LM/blob/main/CODEOWNERS "CODEOWNERS")| [ADLR/megatron-lm!2394 - chore: Set QAT approval to optional](/NVIDIA/Megatron-LM/commit/42070d269ba48a9cf4578c0e05e2c05e7c393c73 "ADLR/megatron-lm!2394 - chore: Set QAT approval to optional")| Nov 27, 2024  
[CONTRIBUTING.md](/NVIDIA/Megatron-LM/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](/NVIDIA/Megatron-LM/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [Remove auto-closing in stale bot](/NVIDIA/Megatron-LM/commit/447bd481f2874629ddc4a8e9b469f75f5ad20217 "Remove auto-closing in stale bot")| Jul 20, 2023  
[Dockerfile.ci.dev](/NVIDIA/Megatron-LM/blob/main/Dockerfile.ci.dev "Dockerfile.ci.dev")| [Dockerfile.ci.dev](/NVIDIA/Megatron-LM/blob/main/Dockerfile.ci.dev "Dockerfile.ci.dev")| [ADLR/megatron-lm!2299 - chore: Bump PyT to 24.10](/NVIDIA/Megatron-LM/commit/ffdb6dcbf7edc499a2a5f64e9c83cdddc418c3a1 "ADLR/megatron-lm!2299 - chore: Bump PyT to 24.10")| Jan 22, 2025  
[Dockerfile.ci.lts](/NVIDIA/Megatron-LM/blob/main/Dockerfile.ci.lts "Dockerfile.ci.lts")| [Dockerfile.ci.lts](/NVIDIA/Megatron-LM/blob/main/Dockerfile.ci.lts "Dockerfile.ci.lts")| [ADLR/megatron-lm!2299 - chore: Bump PyT to 24.10](/NVIDIA/Megatron-LM/commit/ffdb6dcbf7edc499a2a5f64e9c83cdddc418c3a1 "ADLR/megatron-lm!2299 - chore: Bump PyT to 24.10")| Jan 22, 2025  
[Dockerfile.linting](/NVIDIA/Megatron-LM/blob/main/Dockerfile.linting "Dockerfile.linting")| [Dockerfile.linting](/NVIDIA/Megatron-LM/blob/main/Dockerfile.linting "Dockerfile.linting")| [ADLR/megatron-lm!2299 - chore: Bump PyT to 24.10](/NVIDIA/Megatron-LM/commit/ffdb6dcbf7edc499a2a5f64e9c83cdddc418c3a1 "ADLR/megatron-lm!2299 - chore: Bump PyT to 24.10")| Jan 22, 2025  
[LICENSE](/NVIDIA/Megatron-LM/blob/main/LICENSE "LICENSE")| [LICENSE](/NVIDIA/Megatron-LM/blob/main/LICENSE "LICENSE")| [ADLR/megatron-lm!2075 - Triton cache fix](/NVIDIA/Megatron-LM/commit/839dff2a42674e08809854e3b239fba859b620ea "ADLR/megatron-lm!2075 - Triton cache fix")| Oct 19, 2024  
[MANIFEST.in](/NVIDIA/Megatron-LM/blob/main/MANIFEST.in "MANIFEST.in")| [MANIFEST.in](/NVIDIA/Megatron-LM/blob/main/MANIFEST.in "MANIFEST.in")| [ADLR/megatron-lm!2284 - chore: pip install Mcore's dependencies](/NVIDIA/Megatron-LM/commit/4e627b5534e119b8bc369962d86c378b2aa7ad74 "ADLR/megatron-lm!2284 - chore: pip install Mcore's dependencies")| Nov 27, 2024  
[README.md](/NVIDIA/Megatron-LM/blob/main/README.md "README.md")| [README.md](/NVIDIA/Megatron-LM/blob/main/README.md "README.md")| [ADLR/megatron-lm!2245 - Update MoE Doc](/NVIDIA/Megatron-LM/commit/c230e0d7c2986e790c5c10b0e33318d6a4f4a9a5 "ADLR/megatron-lm!2245 - Update MoE Doc")| Nov 21, 2024  
[mypy.ini](/NVIDIA/Megatron-LM/blob/main/mypy.ini "mypy.ini")| [mypy.ini](/NVIDIA/Megatron-LM/blob/main/mypy.ini "mypy.ini")| [ADLR/megatron-lm!2360 - chore: Add mypy optionally](/NVIDIA/Megatron-LM/commit/4f5aa6d861ba8deebf09de155a8f2b05f0dc0648 "ADLR/megatron-lm!2360 - chore: Add mypy optionally")| Nov 19, 2024  
[pretrain_bert.py](/NVIDIA/Megatron-LM/blob/main/pretrain_bert.py "pretrain_bert.py")| [pretrain_bert.py](/NVIDIA/Megatron-LM/blob/main/pretrain_bert.py "pretrain_bert.py")| [ADLR/megatron-lm!1797 - Add option to renormalize blend weights](/NVIDIA/Megatron-LM/commit/bf3e0b9bbc60fc2dfb55af97b4fb4006e6dda6af "ADLR/megatron-lm!1797 - Add option to renormalize blend weights")| Aug 8, 2024  
[pretrain_gpt.py](/NVIDIA/Megatron-LM/blob/main/pretrain_gpt.py "pretrain_gpt.py")| [pretrain_gpt.py](/NVIDIA/Megatron-LM/blob/main/pretrain_gpt.py "pretrain_gpt.py")| [Merge branch 'hongxiaob/moe_spec' into 'main'](/NVIDIA/Megatron-LM/commit/37cd8f280d5a9f2dc7f07ba1163f84d3da5e374b "Merge branch 'hongxiaob/moe_spec' into 'main'
Refactor MoE specs: move all submodules of MoELayer into the spec
Closes #314
See merge request ADLR/megatron-lm!2101")| Dec 9, 2024  
[pretrain_ict.py](/NVIDIA/Megatron-LM/blob/main/pretrain_ict.py "pretrain_ict.py")| [pretrain_ict.py](/NVIDIA/Megatron-LM/blob/main/pretrain_ict.py "pretrain_ict.py")| [Some preliminary refactoring](/NVIDIA/Megatron-LM/commit/f2e72c8a16124dc98af19a2cfe36ba8fac5758df "Some preliminary refactoring")| Jun 7, 2024  
[pretrain_mamba.py](/NVIDIA/Megatron-LM/blob/main/pretrain_mamba.py "pretrain_mamba.py")| [pretrain_mamba.py](/NVIDIA/Megatron-LM/blob/main/pretrain_mamba.py "pretrain_mamba.py")| [ADLR/megatron-lm!2282 - Add functionality to re-run iterations](/NVIDIA/Megatron-LM/commit/cf8435617178c4345aa2a71825029ddd5a2a9710 "ADLR/megatron-lm!2282 - Add functionality to re-run iterations
Co-authored-by: Cyril Meurillon <cmeurillon@cs-oci-ord-vscode-02.cm.cluster>
Co-authored-by: Deepak Narayanan <dnarayanan@nvidia.com>
Co-authored-by: Cyril Meurillon <cmeurillon@cs-oci-ord-vscode-01.cm.cluster>")| Dec 8, 2024  
[pretrain_retro.py](/NVIDIA/Megatron-LM/blob/main/pretrain_retro.py "pretrain_retro.py")| [pretrain_retro.py](/NVIDIA/Megatron-LM/blob/main/pretrain_retro.py "pretrain_retro.py")| [ADLR/megatron-lm!1797 - Add option to renormalize blend weights](/NVIDIA/Megatron-LM/commit/bf3e0b9bbc60fc2dfb55af97b4fb4006e6dda6af "ADLR/megatron-lm!1797 - Add option to renormalize blend weights")| Aug 8, 2024  
[pretrain_t5.py](/NVIDIA/Megatron-LM/blob/main/pretrain_t5.py "pretrain_t5.py")| [pretrain_t5.py](/NVIDIA/Megatron-LM/blob/main/pretrain_t5.py "pretrain_t5.py")| [ADLR/megatron-lm!2428 - Adding (bias-based) relative position embeddiâ¦](/NVIDIA/Megatron-LM/commit/a852cb9722ec7ded8d12689338513c4e4b314c34 "ADLR/megatron-lm!2428 - Adding \(bias-based\) relative position embedding to T5
Co-authored-by: Huy Vu2 <huvu@login-eos02.eos.clusters.nvidia.com>")| Jan 10, 2025  
[pretrain_vision_classify.py](/NVIDIA/Megatron-LM/blob/main/pretrain_vision_classify.py "pretrain_vision_classify.py")| [pretrain_vision_classify.py](/NVIDIA/Megatron-LM/blob/main/pretrain_vision_classify.py "pretrain_vision_classify.py")| [Refactor everything outside of core to be out of the main megatron. nâ¦](/NVIDIA/Megatron-LM/commit/38644dd756c46142787b1bd5dc08ed82ca0e6de1 "Refactor everything outside of core to be out of the main megatron. namespace.")| Mar 26, 2024  
[pretrain_vision_dino.py](/NVIDIA/Megatron-LM/blob/main/pretrain_vision_dino.py "pretrain_vision_dino.py")| [pretrain_vision_dino.py](/NVIDIA/Megatron-LM/blob/main/pretrain_vision_dino.py "pretrain_vision_dino.py")| [Refactor everything outside of core to be out of the main megatron. nâ¦](/NVIDIA/Megatron-LM/commit/38644dd756c46142787b1bd5dc08ed82ca0e6de1 "Refactor everything outside of core to be out of the main megatron. namespace.")| Mar 26, 2024  
[pretrain_vision_inpaint.py](/NVIDIA/Megatron-LM/blob/main/pretrain_vision_inpaint.py "pretrain_vision_inpaint.py")| [pretrain_vision_inpaint.py](/NVIDIA/Megatron-LM/blob/main/pretrain_vision_inpaint.py "pretrain_vision_inpaint.py")| [Refactor everything outside of core to be out of the main megatron. nâ¦](/NVIDIA/Megatron-LM/commit/38644dd756c46142787b1bd5dc08ed82ca0e6de1 "Refactor everything outside of core to be out of the main megatron. namespace.")| Mar 26, 2024  
[pretrain_vlm.py](/NVIDIA/Megatron-LM/blob/main/pretrain_vlm.py "pretrain_vlm.py")| [pretrain_vlm.py](/NVIDIA/Megatron-LM/blob/main/pretrain_vlm.py "pretrain_vlm.py")| [ADLR/megatron-lm!2285 - Support --freeze-LM and --freeze-ViT with ranâ¦](/NVIDIA/Megatron-LM/commit/1468ab01c079d5e14888dda97d1c99d2cb62afb2 "ADLR/megatron-lm!2285 - Support --freeze-LM and --freeze-ViT with ranks that don't have trainable params
Co-authored-by: Jon Barker <jbarker@draco-oci-dc-01.cm.cluster>")| Dec 21, 2024  
[pyproject.toml](/NVIDIA/Megatron-LM/blob/main/pyproject.toml "pyproject.toml")| [pyproject.toml](/NVIDIA/Megatron-LM/blob/main/pyproject.toml "pyproject.toml")| [ADLR/megatron-lm!2284 - chore: pip install Mcore's dependencies](/NVIDIA/Megatron-LM/commit/4e627b5534e119b8bc369962d86c378b2aa7ad74 "ADLR/megatron-lm!2284 - chore: pip install Mcore's dependencies")| Nov 27, 2024  
[pytest.ini](/NVIDIA/Megatron-LM/blob/main/pytest.ini "pytest.ini")| [pytest.ini](/NVIDIA/Megatron-LM/blob/main/pytest.ini "pytest.ini")| [ADLR/megatron-lm!1908 - ci: Refactor gitlab-ci](/NVIDIA/Megatron-LM/commit/15b7cfb9151788d976438547548afaa34ba7ae94 "ADLR/megatron-lm!1908 - ci: Refactor gitlab-ci")| Aug 12, 2024  
[setup.py](/NVIDIA/Megatron-LM/blob/main/setup.py "setup.py")| [setup.py](/NVIDIA/Megatron-LM/blob/main/setup.py "setup.py")| [ADLR/megatron-lm!2299 - chore: Bump PyT to 24.10](/NVIDIA/Megatron-LM/commit/ffdb6dcbf7edc499a2a5f64e9c83cdddc418c3a1 "ADLR/megatron-lm!2299 - chore: Bump PyT to 24.10")| Jan 22, 2025  
View all files  
  
## Repository files navigation

  * [README](#)
  * [License](#)



# Megatron-LM & Megatron-Core

[](#megatron-lm--megatron-core)

#### GPU optimized techniques for training transformer models at-scale

[](#gpu-optimized-techniques-for-training-transformer-models-at-scale)

[![Documentation](https://camo.githubusercontent.com/c191e0610a0b83ed5bef19569b59b7f27f7da4b11c720841af9028c9f239bf97/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d627269676874677265656e2e7376673f7374796c653d666c6174)](https://docs.nvidia.com/megatron-core/developer-guide/latest/index.html) [![version](https://camo.githubusercontent.com/26522c07e6ed933bcfd6ee6199936d61a033775159a5bd77de15161c9ae5f80f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f72656c656173652d302e352e302d677265656e)](/NVIDIA/Megatron-LM/blob/main/setup.py) [![license](https://camo.githubusercontent.com/798d8b63d18bcf654e3f021461ec449c8e113afe49eeb8f16a197b0042d746ac/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4f70656e4253442d626c7565)](/NVIDIA/Megatron-LM/blob/main/LICENSE)

# Latest News

[](#latest-news)

  * **[2024/7]** Megatron-Core v0.7 improves scalability and training resiliency and adds support for multimodal training ([blog](https://developer.nvidia.com/blog/train-generative-ai-models-more-efficiently-with-new-nvidia-megatron-core-functionalities/)).
  * **[2024/6]** Megatron-Core added supports for Mamba-based models. Check out our paper [An Empirical Study of Mamba-based Language Models](https://arxiv.org/pdf/2406.07887) and [code example](https://github.com/NVIDIA/Megatron-LM/tree/ssm/examples/mamba).
  * **[2024/1 Announcement]** NVIDIA has released the core capabilities in **Megatron-LM** into [**Megatron-Core**](https://github.com/NVIDIA/Megatron-LM/tree/main/megatron/core) in this repository. Megatron-Core expands upon Megatron-LM's GPU-optimized techniques with more cutting-edge innovations on system-level optimizations, featuring composable and modular APIs. Explore the [Megatron-Core intro](#megatron-core) for more details.



# Table of Contents

[](#table-of-contents)

  * [Megatron-LM & Megatron-Core](#megatron-lm--megatron-core)
  * [Latest News](#latest-news)
  * [Table of Contents](#table-of-contents)
  * [Megatron Overview](#megatron-overview)
    * [Megatron-LM](#megatron-lm)
    * [Megatron-Core](#megatron-core)
  * [Training Speed and Scalability](#training-speed-and-scalability)
  * [Setup](#setup)
    * [Downloading Checkpoints](#downloading-checkpoints)
  * [Usage](#usage)
  * [Training](#training)
    * [Data Preprocessing](#data-preprocessing)
    * [BERT Pretraining](#bert-pretraining)
    * [GPT Pretraining](#gpt-pretraining)
    * [T5 Pretraining](#t5-pretraining)
    * [Distributed Pretraining](#distributed-pretraining)
    * [Activation Checkpointing and Recomputation](#activation-checkpointing-and-recomputation)
    * [Distributed Optimizer](#distributed-optimizer)
    * [FlashAttention](#flashattention)
    * [GPT-3 Example](#gpt-3-example)
    * [Retro and InstructRetro](#retro-and-instructretro)
    * [Mamba-based Language Models](#mamba-based-language-models)
    * [Mixture of Experts](#mixture-of-experts)
      * [Key Features of MoE](#key-features-of-moe)
  * [Evaluation and Tasks](#evaluation-and-tasks)
    * [GPT Text Generation](#gpt-text-generation)
      * [Detoxify GPT via Self-generation](#detoxify-gpt-via-self-generation)
    * [GPT Evaluation](#gpt-evaluation)
      * [WikiText Perplexity Evaluation](#wikitext-perplexity-evaluation)
      * [LAMBADA Cloze Accuracy](#lambada-cloze-accuracy)
    * [BERT Task Evaluation](#bert-task-evaluation)
      * [RACE Evaluation](#race-evaluation)
      * [MNLI Evaluation](#mnli-evaluation)
    * [Llama-2 Inference and Finetuning](#llama-2-inference-and-finetuning)
  * [Model Optimization and Deployment](#model-optimization-and-deployment)
    * [Quantization and TensorRT-LLM Deployment](#quantization-and-tensorrt-llm-deployment)
  * [Datasets](#datasets)
    * [Collecting Wikipedia Training Data](#collecting-wikipedia-training-data)
    * [Collecting GPT Webtext Data](#collecting-gpt-webtext-data)
  * [Reproducibility](#reproducibility)
    * [Projects Using Megatron](#projects-using-megatron)



# Megatron Overview

[](#megatron-overview)

This repository comprises two essential components: **Megatron-LM** and **Megatron-Core**. Megatron-LM serves as a research-oriented framework leveraging Megatron-Core for large language model (LLM) training. Megatron-Core, on the other hand, is a library of GPU optimized training techniques that comes with formal product support including versioned APIs and regular releases. You can use Megatron-Core alongside Megatron-LM or [Nvidia NeMo Framework](https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/nemo_megatron/mcore_customization.html) for an end-to-end and cloud-native solution. Alternatively, you can integrate Megatron-Core's building blocks into your preferred training framework.

## Megatron-LM

[](#megatron-lm)

First introduced in 2019, Megatron ([1](https://arxiv.org/pdf/1909.08053.pdf), [2](https://arxiv.org/pdf/2104.04473.pdf), and [3](https://arxiv.org/pdf/2205.05198)) sparked a wave of innovation in the AI community, enabling researchers and developers to utilize the underpinnings of this library to further LLM advancements. Today, many of the most popular LLM developer frameworks have been inspired by and built directly leveraging the open-source Megatron-LM library, spurring a wave of foundation models and AI startups. Some of the most popular LLM frameworks built on top of Megatron-LM include [Colossal-AI](https://github.com/hpcaitech/ColossalAI), [HuggingFace Accelerate](https://github.com/huggingface/accelerate), and [NVIDIA NeMo Framework](https://www.nvidia.com/en-us/ai-data-science/generative-ai/nemo-framework/). A list of projects that have directly used Megatron can be found [here](#projects-using-megatron).

## Megatron-Core

[](#megatron-core)

Megatron-Core is an open-source PyTorch-based library that contains GPU-optimized techniques and cutting-edge system-level optimizations. It abstracts them into composable and modular APIs, allowing full flexibility for developers and model researchers to train custom transformers at-scale on NVIDIA accelerated computing infrastructure. This library is compatible with all NVIDIA Tensor Core GPUs, including FP8 acceleration support for [NVIDIA Hopper architectures](https://www.nvidia.com/en-us/data-center/technologies/hopper-architecture/).

Megatron-Core offers core building blocks such as attention mechanisms, transformer blocks and layers, normalization layers, and embedding techniques. Additional functionality like activation recomputation, distributed checkpointing is also natively built-in to the library. The building blocks and functionality are all GPU optimized, and can be built with advanced parallelization strategies for optimal training speed and stability on NVIDIA Accelerated Computing Infrastructure. Another key component of the Megatron-Core library includes advanced model parallelism techniques (tensor, sequence, pipeline, context, and MoE expert parallelism).

Megatron-Core can be used with [NVIDIA NeMo](https://www.nvidia.com/en-us/ai-data-science/products/nemo/), an enterprise-grade AI platform. Alternatively, you can explore Megatron-Core with the native PyTorch training loop [here](https://github.com/NVIDIA/Megatron-LM/tree/main/examples). Visit [Megatron-Core documentation](https://docs.nvidia.com/megatron-core/developer-guide/latest/index.html) to learn more.

# Training Speed and Scalability

[](#training-speed-and-scalability)

Our codebase is capable of efficiently training large language models (i.e., models with hundreds of billions of parameters) with both model and data parallelism. To demonstrate how our software scales with multiple GPUs and model sizes, we consider GPT models ranging from 2 billion parameters to 462 billion parameters. All models use a vocabulary size of 131,072 and a sequence length of 4096. We vary hidden size, number of attention heads, and number of layers to arrive at a specific model size. As the model size increases, we also modestly increase batch size. Our experiments use up to 6144 [H100](https://www.nvidia.com/en-us/data-center/h100/) GPUs. We perform fine-grained overlapping of data-parallel (`--overlap-grad-reduce --overlap-param-gather`), tensor-parallel (`--tp-comm-overlap`) and pipeline-parallel communication (enabled by default) with computation to improve scalability. The reported throughputs are measured for end-to-end training and include all operations including data loading, optimizer steps, communication, and even logging. Note that we did not train these models to convergence.

[![Model table](/NVIDIA/Megatron-LM/raw/main/images/model_table.png)](/NVIDIA/Megatron-LM/blob/main/images/model_table.png)

Our weak scaled results show superlinear scaling (MFU increases from 41% for the smallest model considered to 47-48% for the largest models); this is because larger GEMMs have higher arithmetic intensity and are consequently more efficient to execute.

[![Weak scaling](/NVIDIA/Megatron-LM/raw/main/images/weak_scaling.png)](/NVIDIA/Megatron-LM/blob/main/images/weak_scaling.png)

We also strong scaled the standard GPT-3 model (our version has slightly more than 175 billion parameters due to larger vocabulary size) from 96 H100 GPUs to 4608 GPUs, using the same batch size of 1152 sequences throughout. Communication becomes more exposed at larger scale, leading to a reduction in MFU from 47% to 42%.

[![Strong scaling](/NVIDIA/Megatron-LM/raw/main/images/strong_scaling.png)](/NVIDIA/Megatron-LM/blob/main/images/strong_scaling.png)

# Setup

[](#setup)

We strongly recommend using the latest release of [NGC's PyTorch container](https://ngc.nvidia.com/catalog/containers/nvidia:pytorch) with DGX nodes. If you can't use this for some reason, use the latest pytorch, cuda, nccl, and NVIDIA [APEX](https://github.com/NVIDIA/apex#quick-start) releases. Data preprocessing requires [NLTK](https://www.nltk.org/install.html), though this is not required for training, evaluation, or downstream tasks.

You can launch an instance of the PyTorch container and mount Megatron, your dataset, and checkpoints with the following Docker commands:

```
`docker pull nvcr.io/nvidia/pytorch:xx.xx-py3 docker run --gpus all -it --rm -v /path/to/megatron:/workspace/megatron -v /path/to/dataset:/workspace/dataset -v /path/to/checkpoints:/workspace/checkpoints nvcr.io/nvidia/pytorch:xx.xx-py3 `
```

## Downloading Checkpoints

[](#downloading-checkpoints)

We have provided pretrained [BERT-345M](https://ngc.nvidia.com/catalog/models/nvidia:megatron_bert_345m) and [GPT-345M](https://ngc.nvidia.com/catalog/models/nvidia:megatron_lm_345m) checkpoints to evaluate or for finetuning downstream tasks. To access these checkpoints, first [sign up](https://ngc.nvidia.com/signup) for and [setup](https://ngc.nvidia.com/setup/installers/cli) the NVIDIA GPU Cloud (NGC) Registry CLI. Further documentation for downloading models can be found in the [NGC documentation](https://docs.nvidia.com/dgx/ngc-registry-cli-user-guide/index.html#topic_6_4_1).

Alternatively, you can directly download the checkpoints using:

```
BERT-345M-uncased: wget --content-disposition https://api.ngc.nvidia.com/v2/models/nvidia/megatron_bert_345m/versions/v0.1_uncased/zip -O megatron_bert_345m_v0.1_uncased.zip BERT-345M-cased: wget --content-disposition https://api.ngc.nvidia.com/v2/models/nvidia/megatron_bert_345m/versions/v0.1_cased/zip -O megatron_bert_345m_v0.1_cased.zip GPT-345M: wget --content-disposition https://api.ngc.nvidia.com/v2/models/nvidia/megatron_lm_345m/versions/v0.0/zip -O megatron_lm_345m_v0.0.zip 
```

The models require vocabulary files to run. The BERT WordPiece vocab file can be extracted from Google's pretrained BERT models: [uncased](https://s3.amazonaws.com/models.huggingface.co/bert/bert-large-uncased-vocab.txt), [cased](https://s3.amazonaws.com/models.huggingface.co/bert/bert-large-cased-vocab.txt). The GPT [vocab file](https://s3.amazonaws.com/models.huggingface.co/bert/gpt2-vocab.json) and [merge table](https://s3.amazonaws.com/models.huggingface.co/bert/gpt2-merges.txt) can be downloaded directly.

# Usage

[](#usage)

After installation, there are several possible workflows. The most comprehensive is:

  1. Data preprocessing
  2. Pretraining
  3. Finetuning (Optional for zero-shot tasks)
  4. Downstream task evaluation or text generation



However, steps 1 and 2 can be replaced by using one of the pretrained models mentioned above.

We've provided several scripts for pretraining both BERT and GPT in the [`examples`](/NVIDIA/Megatron-LM/blob/main/examples) directory, as well as scripts for both zero-shot and fine-tuned downstream tasks including MNLI, RACE, WikiText103, and LAMBADA evaluation. There is also a script for GPT interactive text generation.

# Training

[](#training)

## Data Preprocessing

[](#data-preprocessing)

The training data requires preprocessing. First, place your training data in a loose json format, with one json containing a text sample per line. For example:

```
{"src": "www.nvidia.com", "text": "The quick brown fox", "type": "Eng", "id": "0", "title": "First Part"} {"src": "The Internet", "text": "jumps over the lazy dog", "type": "Eng", "id": "42", "title": "Second Part"} 
```

The name of the `text` field of the json can be changed by using the `--json-key` flag in [`preprocess_data.py`](/NVIDIA/Megatron-LM/blob/main/tools/preprocess_data.py) The other metadata are optional and are not used in training.

The loose json is then processed into a binary format for training. To convert the json into mmap format use `preprocess_data.py`. An example script to prepare data for BERT training is:

```
python tools/preprocess_data.py \ --input my-corpus.json \ --output-prefix my-bert \ --vocab-file bert-vocab.txt \ --tokenizer-type BertWordPieceLowerCase \ --split-sentences 
```

The output will be two files named, in this case, `my-bert_text_sentence.bin` and `my-bert_text_sentence.idx`. The `--data-path` specified in later BERT training is the full path and new filename, but without the file extension.

For T5 use the same preprocessing as BERT, perhaps renaming it to:

```
--output-prefix my-t5 \ 
```

Some minor modifications are required for GPT data preprocessing, namely, the addition of a merge table, an end-of-document token, removal of sentence splitting, and a change to the tokenizer type:

```
python tools/preprocess_data.py \ --input my-corpus.json \ --output-prefix my-gpt2 \ --vocab-file gpt2-vocab.json \ --tokenizer-type GPT2BPETokenizer \ --merge-file gpt2-merges.txt \ --append-eod 
```

Here the output files are named `my-gpt2_text_document.bin` and `my-gpt2_text_document.idx`. As before, in GPT training, use the longer name without the extension as `--data-path`.

Further command line arguments are described in the source file [`preprocess_data.py`](/NVIDIA/Megatron-LM/blob/main/tools/preprocess_data.py).

## BERT Pretraining

[](#bert-pretraining)

The [`examples/bert/train_bert_340m_distributed.sh`](/NVIDIA/Megatron-LM/blob/main/examples/bert/train_bert_340m_distributed.sh) script runs single GPU 345M parameter BERT pretraining. Debugging is the primary use for single GPU training, as the code base and command line arguments are optimized for highly distributed training. Most of the arguments are fairly self-explanatory. By default, the learning rate decays linearly over the training iterations starting at `--lr` to a minimum set by `--min-lr` over `--lr-decay-iters` iterations. The fraction of training iterations used for warmup is set by `--lr-warmup-fraction`. While this is single GPU training, the batch size specified by `--micro-batch-size` is a single forward-backward path batch-size and the code will perform gradient accumulation steps until it reaches `global-batch-size` which is the batch size per iteration. The data is partitioned into a 949:50:1 ratio for training/validation/test sets (default is 969:30:1). This partitioning happens on the fly, but is consistent across runs with the same random seed (1234 by default, or specified manually with `--seed`). We use `train-iters` as the training iterations requested. Alternatively, one can provide `--train-samples` which is total number of samples to train on. If this option is present, then instead of providing `--lr-decay-iters`, one will need to provide `--lr-decay-samples`.

The logging, checkpoint-saving, and evaluation interval options are specified. Note that the `--data-path` now includes the additional `_text_sentence` suffix added in preprocessing, but does not include the file extensions.

Further command line arguments are described in the source file [`arguments.py`](/NVIDIA/Megatron-LM/blob/main/megatron/training/arguments.py).

To run `train_bert_340m_distributed.sh`, make any desired modifications including setting the environment variables for `CHECKPOINT_PATH`, `VOCAB_FILE`, and `DATA_PATH`. Make sure to set these variables to their paths in the container. Then launch the container with Megatron and necessary paths mounted (as explained in [Setup](#setup)) and run the example script.

## GPT Pretraining

[](#gpt-pretraining)

The `examples/gpt3/train_gpt3_175b_distributed.sh` script runs single GPU 345M parameter GPT pretraining. As mentioned above, single GPU training is primarily intended for debugging purposes, as the code is optimized for distributed training.

It follows largely the same format as the previous BERT script with a few notable differences: the tokenization scheme used is BPE (which requires a merge table and a `json` vocabulary file) instead of WordPiece, the model architecture allows for longer sequences (note that the max position embedding must be greater than or equal to the maximum sequence length), and the `--lr-decay-style` has been set to cosine decay. Note that the `--data-path` now includes the additional `_text_document` suffix added in preprocessing, but does not include the file extensions.

Further command line arguments are described in the source file [`arguments.py`](/NVIDIA/Megatron-LM/blob/main/megatron/training/arguments.py).

`train_gpt3_175b_distributed.sh` can be launched the same way as described for BERT. Set the env vars and make any other modifications, launch the container with appropriate mounts, and run the script. More details in [`examples/gpt3/README.md`](/NVIDIA/Megatron-LM/blob/main/examples/gpt3/README.md)

## T5 Pretraining

[](#t5-pretraining)

Very similar to BERT and GPT, the `examples/t5/train_t5_220m_distributed.sh` script runs single GPU "base" (~220M parameter) T5 pretraining. The primary difference from BERT and GPT is the addition of the following arguments to accommodate the T5 architecture:

  * `--kv-channels` sets the inner dimension of the "key" and "value" matrices of all attention mechanisms in the model. For BERT and GPT this defaults to the hidden size divided by the number of attention heads, but can be configured for T5.

  * `--ffn-hidden-size` sets the hidden size in the feed-forward networks within a transformer layer. For BERT and GPT this defaults to 4 times the transformer hidden size, but can be configured for T5.

  * `--encoder-seq-length` and `--decoder-seq-length` set the sequence length for the encoder and decoder separately.




All of the other arguments remain as they were for BERT and GPT pretraining. Run this example with the same steps described above for the other scripts.

More details in [`examples/t5/README.md`](/NVIDIA/Megatron-LM/blob/main/examples/t5/README.md)

## Distributed Pretraining

[](#distributed-pretraining)

The `pretrain_{bert,gpt,t5}_distributed.sh` scripts use the PyTorch distributed launcher for distributed training. As such, multi-node training can be achieved by properly setting environment variables. See the official PyTorch [documentation](https://pytorch.org/docs/stable/elastic/run.html#launcher-api) for further description of these [environment variables](https://pytorch.org/docs/stable/distributed.html#environment-variable-initialization). By default, multi-node training uses the [nccl](https://developer.nvidia.com/nccl) distributed backend. A simple set of additional arguments and the use of the PyTorch distributed module with the `torchrun` elastic launcher (equivalent to `python -m torch.distributed.run`) are the only additional requirements to adopt distributed training. See any of `pretrain_{bert,gpt,t5}_distributed.sh` for more details.

We use two types of parallelism: data and model parallelism. Our data parallelism implementation is in `megatron/core/distributed`, and supports overlapping of the gradient reduction with the backward pass when the `--overlap-grad-reduce` command-line option is used.

Second, we developed a simple and efficient two-dimensional model-parallel approach. To use the first dimension, tensor model parallelism (splitting execution of a single transformer module over multiple GPUs, see Section 3 of [our paper](https://arxiv.org/pdf/1909.08053.pdf)), add the `--tensor-model-parallel-size` flag to specify the number of GPUs among which to split the model, along with the arguments passed to the distributed launcher as mentioned above. To use the second dimension, sequence parallelism, specify `--sequence-parallel`, which also requires tensor model parallelism to be enabled because it splits across the same GPUs (more details in Section 4.2.2 of [our paper](https://arxiv.org/pdf/2205.05198.pdf)).

To use pipeline model parallelism (sharding the transformer modules into stages with an equal number of transformer modules on each stage, and then pipelining execution by breaking the batch into smaller microbatches, see Section 2.2 of [our paper](https://arxiv.org/pdf/2104.04473.pdf)), use the `--pipeline-model-parallel-size` flag to specify the number of stages to split the model into (e.g., splitting a model with 24 transformer layers across 4 stages would mean each stage gets 6 transformer layers each).

We have examples of how to use these two different forms of model parallelism the example scripts ending in `distributed_with_mp.sh`.

Other than these minor changes, the distributed training is identical to the training on a single GPU.

The interleaved pipelining schedule (more details in Section 2.2.2 of [our paper](https://arxiv.org/pdf/2104.04473.pdf)) can be enabled using the `--num-layers-per-virtual-pipeline-stage` argument, which controls the number of transformer layers in a virtual stage (by default with the non-interleaved schedule, each GPU will execute a single virtual stage with `NUM_LAYERS / PIPELINE_MP_SIZE` transformer layers). The total number of layers in the transformer model should be divisible by this argument value. Additionally, the number of microbatches in the pipeline (computed as `GLOBAL_BATCH_SIZE / (DATA_PARALLEL_SIZE * MICRO_BATCH_SIZE)`) should be divisible by the `PIPELINE_MP_SIZE` when using this schedule (this condition is checked in an assertion in the code). The interleaved schedule is not supported for pipelines with 2 stages (`PIPELINE_MP_SIZE=2`).

## Activation Checkpointing and Recomputation

[](#activation-checkpointing-and-recomputation)

To reduce GPU memory usage when training a large model, we support various forms of activation checkpointing and recomputation. Instead of all activations being stored in memory to be used during backprop, as was traditionally the case in deep learning models, only activations at certain "checkpoints" in the model are retained (or stored) in memory, and the other activations are recomputed on-the-fly when needed for backprop. Note that this kind of checkpointing, _activation_ checkpointing, is very different from the checkpointing of model parameters and optimizer state, which is mentioned elsewhere.

We support two levels of recompute granularity: `selective` and `full`. Selective recomputation is the default and is recommended in almost all cases. This mode retains in memory the activations that take less memory storage space and are more expensive to recompute and recomputes the activations that take more memory storage space but are relatively inexpensive to recompute. See [our paper](https://arxiv.org/pdf/2205.05198) for details. You should find that this mode maximizes performance while minimizing the memory required to store activations. To enable selective activation recompute simply use `--recompute-activations`.

For cases where memory is very limited, `full` recompute saves just the inputs to a transformer layer, or a group, or block, of transformer layers, and recomputes everything else. To enable full activation recompute use `--recompute-granularity full`. When using `full` activation recompute, there are two methods: `uniform` and `block`, chosen using the `--recompute-method` argument.

  * The `uniform` method uniformly divides the transformer layers into groups of layers (each group of size `--recompute-num-layers`) and stores the input activations of each group in memory. The baseline group size is 1 and, in this case, the input activation of each transformer layer is stored. When the GPU memory is insufficient, increasing the number of layers per group reduces the memory usage, enabling a bigger model to be trained. For example, when `--recompute-num-layers` is set to 4, only the input activation of each group of 4 transformer layers is stored.

  * The `block` method recomputes the input activations of a specific number (given by `--recompute-num-layers`) of individual transformer layers per pipeline stage and stores the input activations of the remaining layers in the pipeline stage. Reducing `--recompute-num-layers` results in storing the input activations to more transformer layers, which reduces the activation recomputation required in the backprop, thus improving training performance while increasing memory usage. For example, when we specify 5 layers to recompute of 8 layers per pipeline stage, the input activations of only the first 5 transformer layers are recomputed in the backprop step while the input activations for the final 3 layers are stored. `--recompute-num-layers` can be incrementally increased until the amount of memory storage space required is just small enough to fit in the available memory, thereby both maximally utilizing memory and maximizing performance.




## Distributed Optimizer

[](#distributed-optimizer)

Usage: `--use-distributed-optimizer`. Compatible with all model and data types.

The distributed optimizer is a memory savings technique, whereby the optimizer state is evenly distributed across data parallel ranks (versus the traditional method of replicating the optimizer state across data parallel ranks). As described in [ZeRO: Memory Optimizations Toward Training Trillion Parameter Models](https://arxiv.org/abs/1910.02054), our implementation distributes all optimizer state that does not overlap with the model state. For example, when using fp16 model params, the distributed optimizer maintains its own separate copy of fp32 main params & grads, which are distributed across DP ranks. When using bf16 model params, however, the distributed optimizer's fp32 main grads are the same as the model's fp32 grads, and so the grads in this case are not distributed (although the fp32 main params are still distributed, as they are separate from the bf16 model params).

Theoretical memory savings vary depending on the combination of the model's param dtype and grad dtype. In our implementation, the theoretical number of bytes per parameter is (where 'd' is the data parallel size):

Non-distributed optim | Distributed optim  
---|---  
fp16 param, fp16 grads | 20 | 4 + 16/d  
bf16 param, fp32 grads | 18 | 6 + 12/d  
fp32 param, fp32 grads | 16 | 8 + 8/d  
  
As with regular data parallelism, overlapping of the gradient reduction (in this case, a reduce-scatter) with the backward pass can be facilitated using the `--overlap-grad-reduce` flag. Additionally, overlapping of the parameter all-gather can be overlapped with the forward pass using `--overlap-param-gather`.

## FlashAttention

[](#flashattention)

Usage: `--use-flash-attn`. Support attention head dimensions at most 128.

[FlashAttention](https://github.com/HazyResearch/flash-attention) is a fast and memory-efficient algorithm to compute exact attention. It speeds up model training and reduces memory requirement.

To install FlashAttention:

```
pip install flash-attn
```

## GPT-3 Example

[](#gpt-3-example)

In `examples/gpt3/train_gpt3_175b_distributed.sh` we have provided an example of how to configure Megatron to train [GPT-3](https://arxiv.org/abs/2005.14165) with 175 billion parameters on 1024 GPUs. The script is designed for [slurm](https://slurm.schedmd.com/documentation.html) with [pyxis](https://github.com/NVIDIA/pyxis) plugin but can be easily adopted to any other scheduler. It uses 8-way tensor parallelism and 16-way pipeline parallelism. With options `global-batch-size 1536` and `rampup-batch-size 16 16 5859375`, the training will start with global batch size 16 and linearly increase the global batch size to 1536 over 5,859,375 samples with incremental steps 16. The training dataset can be either a single set or a multiple datasets combined with a set of weights.

With full global batch size of 1536 on 1024 A100 GPUs, each iteration takes around 32 seconds resulting in 138 teraFLOPs per GPU which is 44% of the theoretical peak FLOPs.

## Retro and InstructRetro

[](#retro-and-instructretro)

Retro [(Borgeaud et al., 2022)](https://arxiv.org/abs/2112.04426) is an autoregressive decoder-only language model (LM) pretrained with retrieval-augmentation. Retro features practical scalability to support large-scale pretraining from scratch by retrieving from trillions of tokens. Pretraining with retrieval provides a more efficient storage mechanism of factual knowledge, when compared to storing factual knowledge implicitly within the network's parameters, thus largely reducing model parameters while achieving lower perplexity than standard GPT. Retro also provides the flexibility to update the knowledge stored in LMs [(Wang et al., 2023a)](https://arxiv.org/abs/2304.06762) by updating the retrieval database without training LMs again.

InstructRetro [(Wang et al., 2023b)](https://arxiv.org/abs/2310.07713) further scales up the size of Retro to 48B, featuring the largest LLM pretrained with retrieval (as of December 2023). The obtained foundation model, Retro 48B, largely outperforms the GPT counterpart in terms of perplexity. With instruction tuning on Retro, InstructRetro demonstrates significant improvement over the instruction tuned GPT on downstream tasks in the zero-shot setting. Specifically, the average improvement of InstructRetro is 7% over its GPT counterpart across 8 short-form QA tasks, and 10% over GPT across 4 challenging long-form QA tasks. We also find that one can ablate the encoder from InstructRetro architecture and directly use the InstructRetro decoder backbone as GPT, while achieving comparable results.

In this repo, we provide an end-to-end reproduction guide to implement Retro and InstructRetro, covering

  * **Retrieval database construction** , which supports billions or even trillions of tokens as a large-scale retrieval database.
  * **Pretraining with retrieval** , which supports pretraining from scratch and pretraining from a pretrained GPT model (Retro-fitting).
  * **Instruction tuning** , where we provide an open-source instruction tuning dataset and the training recipe for instruction tuning on Retro.
  * **Downstream task evaluation** , where we provide the text generation and evaluation scripts for zero-shot question answering tasks.



See [tools/retro/README.md](/NVIDIA/Megatron-LM/blob/main/tools/retro/README.md) for a detailed overview.

## Mamba-based Language Models

[](#mamba-based-language-models)

See [examples/mamba](/NVIDIA/Megatron-LM/blob/main/examples/mamba) for details.

## Mixture of Experts

[](#mixture-of-experts)

MoE (Mixture of Experts) is a powerful LLM architecture implemented in the Megatron-Core framework, designed to enhance the efficiency and scalability of large language models. It leverages **Expert Parallelism** , allowing multiple experts to be distributed across different workers, where each worker processes distinct batches of training samples. This method significantly increases computational throughput, enabling models to achieve high performance metrics, such as 47% MFU during BF16 training for 8x7B on H100.

Key Features of MoE:

  * **Parallelism Techniques** : MoE combines various parallelism strategies, including Expert Parallelism, Data Parallelism, Tensor Parallelism, Sequence Paralleism, Pipeline Parallelism, and Context Parallelism. This combination allows for handling larger model variants effectively.
  * **Router and Load Balancing** : The system employs advanced routing mechanisms like the Top-K router and utilizes load balancing algorithms to optimize token distribution among experts.
  * **Performance Optimizations** : Techniques such as GroupedGEMM and FP8 training enhance the efficiency of MoE models, particularly when multiple experts are involved.
  * **Token Dispatch Mechanism** : MoE supports both dropless and token drop strategies to manage token distribution effectively across experts.



For a comprehensive overview of MoE training configurations and optimizations, please refer to the detailed README located at [megatron/core/transformer/moe/README.md](/NVIDIA/Megatron-LM/blob/main/megatron/core/transformer/moe/README.md).

# Evaluation and Tasks

[](#evaluation-and-tasks)

We provide several command line arguments, detailed in the scripts listed below, to handle various zero-shot and fine-tuned downstream tasks. However, you can also finetune your model from a pretrained checkpoint on other corpora as desired. To do so, simply add the `--finetune` flag and adjust the input files and training parameters within the original training script. The iteration count will be reset to zero, and the optimizer and internal state will be reinitialized. If the fine-tuning is interrupted for any reason, be sure to remove the `--finetune` flag before continuing, otherwise the training will start again from the beginning.

Because evaluation requires substantially less memory than training, it may be advantageous to merge a model trained in parallel for use on fewer GPUs in downstream tasks. The following script accomplishes this. This example reads in a GPT model with 4-way tensor and 4-way pipeline model parallelism and writes out a model with 2-way tensor and 2-way pipeline model parallelism.

```
python tools/checkpoint/convert.py \ --model-type GPT \ --load-dir checkpoints/gpt3_tp4_pp4 \ --save-dir checkpoints/gpt3_tp2_pp2 \ --target-tensor-parallel-size 2 \ --target-pipeline-parallel-size 2 
```

Several downstream tasks are described for both GPT and BERT models below. They can be run in distributed and model parallel modes with the same changes used in the training scripts.

## GPT Text Generation

[](#gpt-text-generation)

We have included a simple REST server to use for text generation in `tools/run_text_generation_server.py`. You run it much like you would start a pretraining job, specifying an appropriate pretrained checkpoint. There are also few optional parameters: `temperature`, `top-k`and `top-p`. See `--help` or the source file for more information. See [examples/inference/run_text_generation_server_345M.sh](/NVIDIA/Megatron-LM/blob/main/examples/inference/run_text_generation_server_345M.sh) for an example of how to run the server.

Once the server is running you can use `tools/text_generation_cli.py` to query it, it takes one argument which is the host the server is running on.

```
tools/text_generation_cli.py localhost:5000 
```

You can also use CURL or any other tools to query the server directly:

```
curl 'http://localhost:5000/api' -X 'PUT' -H 'Content-Type: application/json; charset=UTF-8' -d '{"prompts":["Hello world"], "tokens_to_generate":1}' 
```

See [megatron/inference/text_generation_server.py](/NVIDIA/Megatron-LM/blob/main/megatron/inference/text_generation_server.py) for more API options.

### Detoxify GPT via Self-generation

[](#detoxify-gpt-via-self-generation)

We include an example in `examples/academic_paper_scripts/detxoify_lm/` to detoxify language models by leveraging the generative power of language models.

See [examples/academic_paper_scripts/detxoify_lm/README.md](/NVIDIA/Megatron-LM/blob/main/examples/academic_paper_scripts/detxoify_lm/README.md) for step-by-step tutorials on how to perform domain-adaptive training and detoxify LM using self-generated corpus.

## GPT Evaluation

[](#gpt-evaluation)

We include example scripts for GPT evaluation on WikiText perplexity evaluation and LAMBADA Cloze accuracy.

### WikiText Perplexity Evaluation

[](#wikitext-perplexity-evaluation)

For even comparison with prior works, we evaluate perplexity on the word-level [WikiText-103 test dataset](https://s3.amazonaws.com/research.metamind.io/wikitext/wikitext-103-v1.zip), and appropriately compute perplexity given the change in tokens when using our subword tokenizer.

We use the following command to run WikiText-103 evaluation on a 345M parameter model.

```
TASK="WIKITEXT103" VALID_DATA=<wikitext path>.txt VOCAB_FILE=gpt2-vocab.json MERGE_FILE=gpt2-merges.txt CHECKPOINT_PATH=checkpoints/gpt2_345m COMMON_TASK_ARGS="--num-layers 24 \ --hidden-size 1024 \ --num-attention-heads 16 \ --seq-length 1024 \ --max-position-embeddings 1024 \ --fp16 \ --vocab-file $VOCAB_FILE" python tasks/main.py \ --task $TASK \ $COMMON_TASK_ARGS \ --valid-data $VALID_DATA \ --tokenizer-type GPT2BPETokenizer \ --merge-file $MERGE_FILE \ --load $CHECKPOINT_PATH \ --micro-batch-size 8 \ --log-interval 10 \ --no-load-optim \ --no-load-rng 
```

### LAMBADA Cloze Accuracy

[](#lambada-cloze-accuracy)

To compute LAMBADA cloze accuracy (the accuracy of predicting the last token given the preceding tokens) we utilize a detokenized, processed version of the [LAMBADA dataset](https://github.com/cybertronai/bflm/blob/master/lambada_test.jsonl).

We use the following command to run LAMBADA evaluation on a 345M parameter model. Note that the `--strict-lambada` flag should be used to require whole word matching. Ensure that `lambada` is part of the file path.

```
TASK="LAMBADA" VALID_DATA=<lambada path>.json VOCAB_FILE=gpt2-vocab.json MERGE_FILE=gpt2-merges.txt CHECKPOINT_PATH=checkpoints/gpt2_345m COMMON_TASK_ARGS=<same as those in [WikiText Perplexity Evaluation](#wikitext-perplexity-evaluation) above> python tasks/main.py \ --task $TASK \ $COMMON_TASK_ARGS \ --valid-data $VALID_DATA \ --tokenizer-type GPT2BPETokenizer \ --strict-lambada \ --merge-file $MERGE_FILE \ --load $CHECKPOINT_PATH \ --micro-batch-size 8 \ --log-interval 10 \ --no-load-optim \ --no-load-rng 
```

Further command line arguments are described in the source file [`main.py`](/NVIDIA/Megatron-LM/blob/main/tasks/main.py)

## BERT Task Evaluation

[](#bert-task-evaluation)

### RACE Evaluation

[](#race-evaluation)

The following script finetunes the BERT model for evaluation on the [RACE dataset](http://www.cs.cmu.edu/~glai1/data/race/). The `TRAIN_DATA` and `VALID_DATA` directory contain the RACE dataset as separate `.txt` files. Note that for RACE, the batch size is the number of RACE query's to evaluate. Since each RACE query has four samples, the effective batch size passed through the model will be four times the batch size specified on the command line.

```
TRAIN_DATA="data/RACE/train/middle" VALID_DATA="data/RACE/dev/middle \ data/RACE/dev/high" VOCAB_FILE=bert-vocab.txt PRETRAINED_CHECKPOINT=checkpoints/bert_345m CHECKPOINT_PATH=checkpoints/bert_345m_race COMMON_TASK_ARGS="--num-layers 24 \ --hidden-size 1024 \ --num-attention-heads 16 \ --seq-length 512 \ --max-position-embeddings 512 \ --fp16 \ --vocab-file $VOCAB_FILE" COMMON_TASK_ARGS_EXT="--train-data $TRAIN_DATA \ --valid-data $VALID_DATA \ --pretrained-checkpoint $PRETRAINED_CHECKPOINT \ --save-interval 10000 \ --save $CHECKPOINT_PATH \ --log-interval 100 \ --eval-interval 1000 \ --eval-iters 10 \ --weight-decay 1.0e-1" python tasks/main.py \ --task RACE \ $COMMON_TASK_ARGS \ $COMMON_TASK_ARGS_EXT \ --tokenizer-type BertWordPieceLowerCase \ --epochs 3 \ --micro-batch-size 4 \ --lr 1.0e-5 \ --lr-warmup-fraction 0.06 
```

### MNLI Evaluation

[](#mnli-evaluation)

The following script finetunes the BERT model for evaluation with the [MultiNLI sentence pair corpus](https://www.nyu.edu/projects/bowman/multinli/). Because the matching tasks are quite similar, the script can be quickly tweaked to work with the [Quora Question Pairs](https://www.kaggle.com/quora/question-pairs-dataset) (QQP) dataset as well.

```
TRAIN_DATA="data/glue_data/MNLI/train.tsv" VALID_DATA="data/glue_data/MNLI/dev_matched.tsv \ data/glue_data/MNLI/dev_mismatched.tsv" PRETRAINED_CHECKPOINT=checkpoints/bert_345m VOCAB_FILE=bert-vocab.txt CHECKPOINT_PATH=checkpoints/bert_345m_mnli COMMON_TASK_ARGS=<same as those in [RACE Evaluation](#race-evaluation) above> COMMON_TASK_ARGS_EXT=<same as those in [RACE Evaluation](#race-evaluation) above> python tasks/main.py \ --task MNLI \ $COMMON_TASK_ARGS \ $COMMON_TASK_ARGS_EXT \ --tokenizer-type BertWordPieceLowerCase \ --epochs 5 \ --micro-batch-size 8 \ --lr 5.0e-5 \ --lr-warmup-fraction 0.065 
```

## Llama-2 Inference and Finetuning

[](#llama-2-inference-and-finetuning)

The Llama-2 [family of models](https://ai.meta.com/llama/) are an open-source set of pretrained & finetuned (for chat) models that have achieved strong results across a wide set of benchmarks. At the time of release, Llama-2 models achieved among the best results for open-source models, and were competitive with the closed-source GPT-3.5 model (see <https://arxiv.org/pdf/2307.09288.pdf>).

The Llama-2 checkpoints can be loaded into Megatron for inference and finetuning. See documentation [here](/NVIDIA/Megatron-LM/blob/main/docs/llama_mistral.md).

# Model Optimization and Deployment

[](#model-optimization-and-deployment)

Megatron-Core (MCore) `GPTModel` family supports advanced quantization algorithms and high-performance inference through TensorRT-LLM.

## Quantization and TensorRT-LLM Deployment

[](#quantization-and-tensorrt-llm-deployment)

See [Megatron Model Optimization and Deployment](/NVIDIA/Megatron-LM/blob/main/examples/inference/quantization/README.md) for `llama2` and `nemotron3` examples.

# Datasets

[](#datasets)

We do not host any datasets for GPT or BERT training, however, we detail their collection so that our results may be reproduced.

## Collecting Wikipedia Training Data

[](#collecting-wikipedia-training-data)

We recommend following the Wikipedia data extraction process specified by Google research: "the recommended pre-processing is to download [the latest dump](https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-pages-articles.xml.bz2), extract the text with [WikiExtractor.py](https://github.com/attardi/wikiextractor), and then apply any necessary cleanup to convert it into plain text."

We recommend using the `--json` argument when using WikiExtractor, which will dump the Wikipedia data into loose json format (one json object per line), making it more manageable on the file system and also readily consumable by our codebase. We recommend further preprocessing this json dataset with nltk punctuation standardization. For BERT training, use the `--split-sentences` flag to `preprocess_data.py` as described [above](#data-preprocessing) to include sentence breaks in the produced index. If you'd like to use Wikipedia data for GPT training you should still clean it with nltk/spacy/ftfy, but do not use the `--split-sentences` flag.

## Collecting GPT Webtext Data

[](#collecting-gpt-webtext-data)

We utilize the publicly available [OpenWebText](https://github.com/eukaryote31/openwebtext) library from [jcpeterson](https://github.com/jcpeterson/openwebtext) and [eukaryote31's](https://github.com/eukaryote31/openwebtext) work to download urls. We then filter, clean, and deduplicate all downloaded content according to the procedure described in our [openwebtext](/NVIDIA/Megatron-LM/blob/main/tools/openwebtext) directory. For reddit URLs corresponding to content up to October 2018 we arrived at approximately 37GB of content.

# Reproducibility

[](#reproducibility)

Megatron training can be bitwise reproducible; to enable this mode use `--deterministic-mode`. This means that the same training config run twice in the same HW and SW environment should produce identical model checkpoints, losses and accuracy metric values (iteration time metrics may vary).

There are currently three known Megatron optimizations that break reproducibility whilst still producing almost identical training runs:

  1. The specific NCCL algorithm that is used during an all-reduce (as specified by the environment variable `NCCL_ALGO`) is important. We have tested the following: `^NVLS`, `Tree`, `Ring`, `CollnetDirect`, `CollnetChain`. The code admits the use of `^NVLS`, which allows NCCL the choice of non-NVLS algorithms; its choice seems to be stable.
  2. Flash attention is non-deterministic; do not use `--use-flash-attn`.
  3. If using Transformer Engine, you must also set the environment variable `NVTE_ALLOW_NONDETERMINISTIC_ALGO=0`.



In addition, determinisim has only been verified in NGC PyTorch containers up to and newer than 23.12. If you observe nondeterminism in Megatron training under other circumstances please open an issue.

## Projects Using Megatron

[](#projects-using-megatron)

Below are some of the projects where we have directly used Megatron:

  * [BERT and GPT Studies Using Megatron](https://arxiv.org/pdf/1909.08053.pdf)
  * [BioMegatron: Larger Biomedical Domain Language Model](https://www.aclweb.org/anthology/2020.emnlp-main.379.pdf)
  * [End-to-End Training of Neural Retrievers for Open-Domain Question Answering](https://arxiv.org/abs/2101.00408)
  * [Large Scale Multi-Actor Generative Dialog Modeling](https://www.aclweb.org/anthology/2020.acl-main.8.pdf)
  * [Local Knowledge Powered Conversational Agents](https://arxiv.org/abs/2010.10150)
  * [MEGATRON-CNTRL: Controllable Story Generation with External Knowledge Using Large-Scale Language Models](https://www.aclweb.org/anthology/2020.emnlp-main.226.pdf)
  * [RACE Reading Comprehension Dataset Leaderboard](http://www.qizhexie.com/data/RACE_leaderboard.html)
  * [Training Question Answering Models From Synthetic Data](https://www.aclweb.org/anthology/2020.emnlp-main.468.pdf)
  * [Few-shot Instruction Prompts for Pretrained Language Models to Detect Social Biases](https://arxiv.org/abs/2112.07868)
  * [Exploring the Limits of Domain-Adaptive Training for Detoxifying Large-Scale Language Models](https://arxiv.org/abs/2202.04173)
  * [Using DeepSpeed and Megatron to Train Megatron-Turing NLG 530B, A Large-Scale Generative Language Model](https://arxiv.org/abs/2201.11990)
  * [Multi-Stage Prompting for Knowledgeable Dialogue Generation](https://arxiv.org/abs/2203.08745)
  * [Evaluating Parameter Efficient Learning for Generation](https://aclanthology.org/2022.emnlp-main.319.pdf)
  * [Exploring the Limits of Domain-Adaptive Training for Detoxifying Large-Scale Language Models](https://arxiv.org/abs/2202.04173)
  * [Shall We Pretrain Autoregressive Language Models with Retrieval? A Comprehensive Study](https://arxiv.org/abs/2304.06762)
  * [InstructRetro: Instruction Tuning post Retrieval-Augmented Pretraining](https://arxiv.org/abs/2310.07713)
  * [An Empirical Study of Mamba-based Language Models](https://arxiv.org/abs/2406.07887)



## About

Ongoing research training transformer models at scale 

[docs.nvidia.com/megatron-core/developer-guide/latest/user-guide/index.html#quick-start](https://docs.nvidia.com/megatron-core/developer-guide/latest/user-guide/index.html#quick-start "https://docs.nvidia.com/megatron-core/developer-guide/latest/user-guide/index.html#quick-start")

### Topics

[ transformers ](/topics/transformers "Topic: transformers") [ model-para ](/topics/model-para "Topic: model-para") [ large-language-models ](/topics/large-language-models "Topic: large-language-models")

### Resources

[ Readme ](#readme-ov-file)

### License

[ View license ](#License-1-ov-file)

[ Activity](/NVIDIA/Megatron-LM/activity)

[ Custom properties](/NVIDIA/Megatron-LM/custom-properties)

### Stars

[ **11.2k** stars](/NVIDIA/Megatron-LM/stargazers)

### Watchers

[ **169** watching](/NVIDIA/Megatron-LM/watchers)

### Forks

[ **2.5k** forks](/NVIDIA/Megatron-LM/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2FNVIDIA%2FMegatron-LM&report=NVIDIA+%28user%29)

##  [Releases 11](/NVIDIA/Megatron-LM/releases)

[ NVIDIA Megatron Core 0.9.0 Latest  Oct 24, 2024 ](/NVIDIA/Megatron-LM/releases/tag/core_r0.9.0)

[+ 10 releases](/NVIDIA/Megatron-LM/releases)

##  [Packages 0](/orgs/NVIDIA/packages?repo_name=Megatron-LM)

No packages published 

##  [Contributors 136](/NVIDIA/Megatron-LM/graphs/contributors)

  * [ ![@jaredcasper](https://avatars.githubusercontent.com/u/155158?s=64&v=4) ](https://github.com/jaredcasper)
  * [ ![@ko3n1g](https://avatars.githubusercontent.com/u/16716991?s=64&v=4) ](https://github.com/ko3n1g)
  * [ ![@shanmugamr1992](https://avatars.githubusercontent.com/u/111910568?s=64&v=4) ](https://github.com/shanmugamr1992)
  * [ ![@lmcafee-nvidia](https://avatars.githubusercontent.com/u/85179052?s=64&v=4) ](https://github.com/lmcafee-nvidia)
  * [ ![@shoeybi](https://avatars.githubusercontent.com/u/1205686?s=64&v=4) ](https://github.com/shoeybi)
  * [ ![@deepakn94](https://avatars.githubusercontent.com/u/2724038?s=64&v=4) ](https://github.com/deepakn94)
  * [ ![@ericharper](https://avatars.githubusercontent.com/u/11999610?s=64&v=4) ](https://github.com/ericharper)
  * [ ![@mikolajblaz](https://avatars.githubusercontent.com/u/9979479?s=64&v=4) ](https://github.com/mikolajblaz)
  * [ ![@mpatwary](https://avatars.githubusercontent.com/u/4990625?s=64&v=4) ](https://github.com/mpatwary)
  * [ ![@jon-barker](https://avatars.githubusercontent.com/u/19699370?s=64&v=4) ](https://github.com/jon-barker)
  * [ ![@xrennvidia](https://avatars.githubusercontent.com/u/103958965?s=64&v=4) ](https://github.com/xrennvidia)
  * [ ![@maanug-nv](https://avatars.githubusercontent.com/u/109391026?s=64&v=4) ](https://github.com/maanug-nv)
  * [ ![@trintamaki](https://avatars.githubusercontent.com/u/143676174?s=64&v=4) ](https://github.com/trintamaki)
  * [ ![@yanring](https://avatars.githubusercontent.com/u/12545681?s=64&v=4) ](https://github.com/yanring)



[+ 122 contributors](/NVIDIA/Megatron-LM/graphs/contributors)

## Languages

  * [ Python 98.7% ](/NVIDIA/Megatron-LM/search?l=python)
  * [ C++ 0.6% ](/NVIDIA/Megatron-LM/search?l=c%2B%2B)
  * [ Shell 0.5% ](/NVIDIA/Megatron-LM/search?l=shell)
  * [ C 0.1% ](/NVIDIA/Megatron-LM/search?l=c)
  * [ HTML 0.1% ](/NVIDIA/Megatron-LM/search?l=html)
  * [ Makefile 0.0% ](/NVIDIA/Megatron-LM/search?l=makefile)



## Footer

[ ](https://github.com "GitHub") Â© 2025 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You canât perform that action at this time. 
