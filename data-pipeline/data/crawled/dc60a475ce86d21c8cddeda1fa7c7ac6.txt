[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fbytewax%2Fbytewax%2F)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)
    * [ Nonprofits ](/solutions/industry/nonprofits)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fbytewax%2Fbytewax%2F)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=bytewax%2Fbytewax) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ bytewax ](/bytewax) / **[bytewax](/bytewax/bytewax) ** Public

  * [ Notifications ](/login?return_to=%2Fbytewax%2Fbytewax) You must be signed in to change notification settings
  * [ Fork 66 ](/login?return_to=%2Fbytewax%2Fbytewax)
  * [ Star  1.6k ](/login?return_to=%2Fbytewax%2Fbytewax)




Python Stream Processing 

[docs.bytewax.io/](https://docs.bytewax.io/ "https://docs.bytewax.io/")

### License

[ Apache-2.0 license ](/bytewax/bytewax/blob/main/LICENSE)

[ 1.6k stars ](/bytewax/bytewax/stargazers) [ 66 forks ](/bytewax/bytewax/forks) [ Branches ](/bytewax/bytewax/branches) [ Tags ](/bytewax/bytewax/tags) [ Activity ](/bytewax/bytewax/activity)

[ Star  ](/login?return_to=%2Fbytewax%2Fbytewax)

[ Notifications ](/login?return_to=%2Fbytewax%2Fbytewax) You must be signed in to change notification settings

  * [ Code ](/bytewax/bytewax)
  * [ Issues 18 ](/bytewax/bytewax/issues)
  * [ Pull requests 2 ](/bytewax/bytewax/pulls)
  * [ Discussions ](/bytewax/bytewax/discussions)
  * [ Actions ](/bytewax/bytewax/actions)
  * [ Projects 0 ](/bytewax/bytewax/projects)
  * [ Security ](/bytewax/bytewax/security)
  * [ Insights ](/bytewax/bytewax/pulse)



Additional navigation options

  * [ Code  ](/bytewax/bytewax)
  * [ Issues  ](/bytewax/bytewax/issues)
  * [ Pull requests  ](/bytewax/bytewax/pulls)
  * [ Discussions  ](/bytewax/bytewax/discussions)
  * [ Actions  ](/bytewax/bytewax/actions)
  * [ Projects  ](/bytewax/bytewax/projects)
  * [ Security  ](/bytewax/bytewax/security)
  * [ Insights  ](/bytewax/bytewax/pulse)



# bytewax/bytewax

main

[Branches](/bytewax/bytewax/branches)[Tags](/bytewax/bytewax/tags)

[](/bytewax/bytewax/branches)[](/bytewax/bytewax/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

## History

[2,566 Commits](/bytewax/bytewax/commits/main/)[](/bytewax/bytewax/commits/main/)  
[.github](/bytewax/bytewax/tree/main/.github ".github")| [.github](/bytewax/bytewax/tree/main/.github ".github")  
[docs](/bytewax/bytewax/tree/main/docs "docs")| [docs](/bytewax/bytewax/tree/main/docs "docs")  
[examples](/bytewax/bytewax/tree/main/examples "examples")| [examples](/bytewax/bytewax/tree/main/examples "examples")  
[pysrc/bytewax](/bytewax/bytewax/tree/main/pysrc/bytewax "This path skips through empty directories")| [pysrc/bytewax](/bytewax/bytewax/tree/main/pysrc/bytewax "This path skips through empty directories")  
[pytests](/bytewax/bytewax/tree/main/pytests "pytests")| [pytests](/bytewax/bytewax/tree/main/pytests "pytests")  
[requirements](/bytewax/bytewax/tree/main/requirements "requirements")| [requirements](/bytewax/bytewax/tree/main/requirements "requirements")  
[src](/bytewax/bytewax/tree/main/src "src")| [src](/bytewax/bytewax/tree/main/src "src")  
[.cbfmt.toml](/bytewax/bytewax/blob/main/.cbfmt.toml ".cbfmt.toml")| [.cbfmt.toml](/bytewax/bytewax/blob/main/.cbfmt.toml ".cbfmt.toml")  
[.dockerignore](/bytewax/bytewax/blob/main/.dockerignore ".dockerignore")| [.dockerignore](/bytewax/bytewax/blob/main/.dockerignore ".dockerignore")  
[.gitignore](/bytewax/bytewax/blob/main/.gitignore ".gitignore")| [.gitignore](/bytewax/bytewax/blob/main/.gitignore ".gitignore")  
[.pre-commit-config.yaml](/bytewax/bytewax/blob/main/.pre-commit-config.yaml ".pre-commit-config.yaml")| [.pre-commit-config.yaml](/bytewax/bytewax/blob/main/.pre-commit-config.yaml ".pre-commit-config.yaml")  
[.readthedocs.yaml](/bytewax/bytewax/blob/main/.readthedocs.yaml ".readthedocs.yaml")| [.readthedocs.yaml](/bytewax/bytewax/blob/main/.readthedocs.yaml ".readthedocs.yaml")  
[CHANGELOG.md](/bytewax/bytewax/blob/main/CHANGELOG.md "CHANGELOG.md")| [CHANGELOG.md](/bytewax/bytewax/blob/main/CHANGELOG.md "CHANGELOG.md")  
[CODE_OF_CONDUCT.md](/bytewax/bytewax/blob/main/CODE_OF_CONDUCT.md "CODE_OF_CONDUCT.md")| [CODE_OF_CONDUCT.md](/bytewax/bytewax/blob/main/CODE_OF_CONDUCT.md "CODE_OF_CONDUCT.md")  
[CONTRIBUTING.md](/bytewax/bytewax/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")| [CONTRIBUTING.md](/bytewax/bytewax/blob/main/CONTRIBUTING.md "CONTRIBUTING.md")  
[COPYRIGHT](/bytewax/bytewax/blob/main/COPYRIGHT "COPYRIGHT")| [COPYRIGHT](/bytewax/bytewax/blob/main/COPYRIGHT "COPYRIGHT")  
[Cargo.lock](/bytewax/bytewax/blob/main/Cargo.lock "Cargo.lock")| [Cargo.lock](/bytewax/bytewax/blob/main/Cargo.lock "Cargo.lock")  
[Cargo.toml](/bytewax/bytewax/blob/main/Cargo.toml "Cargo.toml")| [Cargo.toml](/bytewax/bytewax/blob/main/Cargo.toml "Cargo.toml")  
[DEVELOPER_CERTIFICATE_OF_ORIGIN.md](/bytewax/bytewax/blob/main/DEVELOPER_CERTIFICATE_OF_ORIGIN.md "DEVELOPER_CERTIFICATE_OF_ORIGIN.md")| [DEVELOPER_CERTIFICATE_OF_ORIGIN.md](/bytewax/bytewax/blob/main/DEVELOPER_CERTIFICATE_OF_ORIGIN.md "DEVELOPER_CERTIFICATE_OF_ORIGIN.md")  
[Dockerfile](/bytewax/bytewax/blob/main/Dockerfile "Dockerfile")| [Dockerfile](/bytewax/bytewax/blob/main/Dockerfile "Dockerfile")  
[Dockerfile.release](/bytewax/bytewax/blob/main/Dockerfile.release "Dockerfile.release")| [Dockerfile.release](/bytewax/bytewax/blob/main/Dockerfile.release "Dockerfile.release")  
[LICENSE](/bytewax/bytewax/blob/main/LICENSE "LICENSE")| [LICENSE](/bytewax/bytewax/blob/main/LICENSE "LICENSE")  
[README.md](/bytewax/bytewax/blob/main/README.md "README.md")| [README.md](/bytewax/bytewax/blob/main/README.md "README.md")  
[entrypoint-recovery.sh](/bytewax/bytewax/blob/main/entrypoint-recovery.sh "entrypoint-recovery.sh")| [entrypoint-recovery.sh](/bytewax/bytewax/blob/main/entrypoint-recovery.sh "entrypoint-recovery.sh")  
[entrypoint.sh](/bytewax/bytewax/blob/main/entrypoint.sh "entrypoint.sh")| [entrypoint.sh](/bytewax/bytewax/blob/main/entrypoint.sh "entrypoint.sh")  
[justfile](/bytewax/bytewax/blob/main/justfile "justfile")| [justfile](/bytewax/bytewax/blob/main/justfile "justfile")  
[pyproject.toml](/bytewax/bytewax/blob/main/pyproject.toml "pyproject.toml")| [pyproject.toml](/bytewax/bytewax/blob/main/pyproject.toml "pyproject.toml")  
[rust-toolchain.toml](/bytewax/bytewax/blob/main/rust-toolchain.toml "rust-toolchain.toml")| [rust-toolchain.toml](/bytewax/bytewax/blob/main/rust-toolchain.toml "rust-toolchain.toml")  
[setup.cfg](/bytewax/bytewax/blob/main/setup.cfg "setup.cfg")| [setup.cfg](/bytewax/bytewax/blob/main/setup.cfg "setup.cfg")  
[stubgen.py](/bytewax/bytewax/blob/main/stubgen.py "stubgen.py")| [stubgen.py](/bytewax/bytewax/blob/main/stubgen.py "stubgen.py")  
[vermin-dev.ini](/bytewax/bytewax/blob/main/vermin-dev.ini "vermin-dev.ini")| [vermin-dev.ini](/bytewax/bytewax/blob/main/vermin-dev.ini "vermin-dev.ini")  
[vermin-lib.ini](/bytewax/bytewax/blob/main/vermin-lib.ini "vermin-lib.ini")| [vermin-lib.ini](/bytewax/bytewax/blob/main/vermin-lib.ini "vermin-lib.ini")  
View all files  
  
## Repository files navigation

  * [README](#)
  * [Code of conduct](#)
  * [Apache-2.0 license](#)



# Bytewax: Python Stateful Stream Processing Framework

[](#bytewax-python-stateful-stream-processing-framework)

[ ![Bytewax](https://github.com/bytewax/bytewax/assets/53014647/f376c9e8-5bd4-4563-ba40-3df8761b13fc) ](https://bytewax.io/)

[![](https://github.com/bytewax/bytewax/workflows/CI/badge.svg)](https://github.com/bytewax/bytewax/actions) [![](https://camo.githubusercontent.com/1086156810978feeeb2c09ab4023205dcb38af5c0f604cd080e87122e544da38/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f627974657761782e7376673f7374796c653d666c61742d737175617265)](https://pypi.org/project/bytewax/) [![](https://camo.githubusercontent.com/27616121187768b21504f24287d5416fa0a0b2ca3aa0c99bbaa68df1aaa34996/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f757365722d67756964652d627269676874677265656e3f7374796c653d666c61742d737175617265)](https://docs.bytewax.io/stable/guide/index.html) [![](https://camo.githubusercontent.com/cddafdbd20cbcf8f5bb2a8891684f6475de1ee45cb5e936e0a72e432bed2bd86/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4170616368652d2d322e302d626c75652e737667)](https://github.com/bytewax/bytewax/blob/main/LICENSE)

**Bytewax** is a Python framework and Rust-based distributed processing engine for stateful event and stream processing. Inspired by capabilities found in tools like Apache Flink, Spark, and Kafka Streams, Bytewax makes stream processing simpler and more accessible by integrating directly with the Python ecosystem you already know and trust.

**Key Features:**

  * **Python-first:** Leverage your existing Python libraries, frameworks, and tooling.
  * **Stateful Stream Processing:** Maintain and recover state automatically, enabling advanced online machine learning and complex event-driven applications.
  * **Scalable & Distributed:** Easily scale from local development to multi-node, multi-worker deployments on Kubernetes or other infrastructures.
  * **Rich Connector Ecosystem:** Ingest data from sources like Kafka, filesystems, or WebSockets, and output to data lakes, key-value stores, or other systems.
  * **Flexible Dataflow API:** Compose pipelines using operators (e.g., `map`, `filter`, `join`, `fold_window`) to express complex logic.



## Table of Contents

[](#table-of-contents)

  * [Quick Start](#quick-start)
  * [How Bytewax Works](#how-bytewax-works)
  * [Operators Overview](#operators-overview)
  * [Connectors (Module Hub)](#connectors-module-hub)
  * [Local Development, Testing, and Production](#local-development-testing-and-production)
  * [Deployment Options](#deployment-options)
    * [Running Locally](#running-locally)
    * [Containerized Execution](#containerized-execution)
    * [Scaling on Kubernetes](#scaling-on-kubernetes)
  * [Examples](#examples)
  * [Community and Contributing](#community-and-contributing)
  * [License](#license)



## Quick Start

[](#quick-start)

Install Bytewax from PyPI:

```
pip install bytewax
```

[Install `waxctl`](https://bytewax.io/waxctl) to manage deployments at scale.

**Minimal Example:**

```
from bytewax.dataflow import Dataflow from bytewax import operators as op from bytewax.testing import TestingSource flow = Dataflow("quickstart") # Input: Local test source for demonstration inp = op.input("inp", flow, TestingSource([1, 2, 3, 4, 5])) # Transform: Filter even numbers and multiply by 10 filtered = op.filter("keep_even", inp, lambda x: x % 2 == 0) results = op.map("multiply_by_10", filtered, lambda x: x * 10) # Output: Print results to stdout op.inspect("print_results", results)
```

Run it locally:

```
python -m bytewax.run quickstart.py
```

## How Bytewax Works

[](#how-bytewax-works)

Bytewax uses a **dataflow computational model** , similar to systems like Flink or Spark, but with a Pythonic interface. You define a dataflow graph of operators and connectors:

  1. **Input:** Data sources (Kafka, file systems, S3, WebSockets, custom connectors)
  2. **Operators:** Stateful transformations (map, filter, fold_window, join) defined in Python.
  3. **Output:** Data sinks (databases, storage systems, message queues).

[![Bytewax Dataflow Animation](https://private-user-images.githubusercontent.com/156834296/301265671-4e314f17-38ab-4e72-9268-a48ddee7a201.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzczOTE1NjgsIm5iZiI6MTczNzM5MTI2OCwicGF0aCI6Ii8xNTY4MzQyOTYvMzAxMjY1NjcxLTRlMzE0ZjE3LTM4YWItNGU3Mi05MjY4LWE0OGRkZWU3YTIwMS5naWY_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMTIwJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDEyMFQxNjQxMDhaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zZjE5MGE4N2E4ZmNkZDc4NzZmNTFhNGU4ZDgxNTMwZWI2YzhjMjBiOGY4Mzc1NjUzNDMzOTMzNzA4YTY4NGRhJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.JGnDGYOIq38besVfR2PP_-by5foZXoIp-KRdsP-bOec)](https://private-user-images.githubusercontent.com/156834296/301265671-4e314f17-38ab-4e72-9268-a48ddee7a201.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzczOTE1NjgsIm5iZiI6MTczNzM5MTI2OCwicGF0aCI6Ii8xNTY4MzQyOTYvMzAxMjY1NjcxLTRlMzE0ZjE3LTM4YWItNGU3Mi05MjY4LWE0OGRkZWU3YTIwMS5naWY_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMTIwJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDEyMFQxNjQxMDhaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zZjE5MGE4N2E4ZmNkZDc4NzZmNTFhNGU4ZDgxNTMwZWI2YzhjMjBiOGY4Mzc1NjUzNDMzOTMzNzA4YTY4NGRhJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.JGnDGYOIq38besVfR2PP_-by5foZXoIp-KRdsP-bOec) [ ![Bytewax Dataflow Animation](https://private-user-images.githubusercontent.com/156834296/301265671-4e314f17-38ab-4e72-9268-a48ddee7a201.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzczOTE1NjgsIm5iZiI6MTczNzM5MTI2OCwicGF0aCI6Ii8xNTY4MzQyOTYvMzAxMjY1NjcxLTRlMzE0ZjE3LTM4YWItNGU3Mi05MjY4LWE0OGRkZWU3YTIwMS5naWY_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMTIwJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDEyMFQxNjQxMDhaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zZjE5MGE4N2E4ZmNkZDc4NzZmNTFhNGU4ZDgxNTMwZWI2YzhjMjBiOGY4Mzc1NjUzNDMzOTMzNzA4YTY4NGRhJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.JGnDGYOIq38besVfR2PP_-by5foZXoIp-KRdsP-bOec) ](https://private-user-images.githubusercontent.com/156834296/301265671-4e314f17-38ab-4e72-9268-a48ddee7a201.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzczOTE1NjgsIm5iZiI6MTczNzM5MTI2OCwicGF0aCI6Ii8xNTY4MzQyOTYvMzAxMjY1NjcxLTRlMzE0ZjE3LTM4YWItNGU3Mi05MjY4LWE0OGRkZWU3YTIwMS5naWY_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMTIwJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDEyMFQxNjQxMDhaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zZjE5MGE4N2E4ZmNkZDc4NzZmNTFhNGU4ZDgxNTMwZWI2YzhjMjBiOGY4Mzc1NjUzNDMzOTMzNzA4YTY4NGRhJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.JGnDGYOIq38besVfR2PP_-by5foZXoIp-KRdsP-bOec) [ ](https://private-user-images.githubusercontent.com/156834296/301265671-4e314f17-38ab-4e72-9268-a48ddee7a201.gif?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzczOTE1NjgsIm5iZiI6MTczNzM5MTI2OCwicGF0aCI6Ii8xNTY4MzQyOTYvMzAxMjY1NjcxLTRlMzE0ZjE3LTM4YWItNGU3Mi05MjY4LWE0OGRkZWU3YTIwMS5naWY_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMTIwJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDEyMFQxNjQxMDhaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zZjE5MGE4N2E4ZmNkZDc4NzZmNTFhNGU4ZDgxNTMwZWI2YzhjMjBiOGY4Mzc1NjUzNDMzOTMzNzA4YTY4NGRhJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.JGnDGYOIq38besVfR2PP_-by5foZXoIp-KRdsP-bOec)

**Stateful operations:** Bytewax maintains distributed state, allows for fault tolerance and state recovery, and supports event-time windowing for advanced analytics and machine learning workloads.

**`waxctl`:** Bytewax’s CLI tool for deploying and managing dataflows on cloud servers or Kubernetes clusters. [Download `waxctl` here](https://bytewax.io/waxctl).

## Operators Overview

[](#operators-overview)

Operators are the building blocks of Bytewax dataflows:

  * **Stateless Operators:** `map`, `filter`, `inspect`
  * **Stateful Operators:** `reduce`, `fold_window`, `stateful_map`
  * **Windowing & Aggregations:** Event-time, processing-time windows, tumbling, sliding, and session windows.
  * **Joins & Merges:** Combine multiple input streams with `merge`, `join`, or advanced join patterns.
  * **Premium Operators:**



For a comprehensive list, see the [Operators API Documentation](https://docs.bytewax.io/stable/api/bytewax/bytewax.operators.html).

## Connectors

[](#connectors)

Bytewax provides built-in connectors for common data sources and sinks such as Kafka, files, and stdout. You can also write your own [custom connectors](https://docs.bytewax.io/stable/guide/advanced-concepts/custom-connectors.html).

**Examples of Built-in Connectors:**

  * **Kafka:** `bytewax.connectors.kafka`
  * **StdIn/StdOut:** `bytewax.connectors.stdio`
  * **Redis, S3, and More:** See [Bytewax connectors](https://docs.bytewax.io/stable/api/bytewax/bytewax.connectors.html).



**Community & Partner Connectors:** Check out the [Bytewax Module Hub](https://docs.bytewax.io/stable/guide/connectors-hub.html) for additional connectors contributed by the community.

## Local Development, Testing, and Production

[](#local-development-testing-and-production)

**Local Development:**

  * Use `TestingSource` and `inspect` operators for debugging.
  * Iterate quickly by running your flow with `python -m bytewax.run my_flow.py`.
  * Develop custom connectors and sinks locally with Python tooling you already know.



**Testing:**

  * Integration tests: Use `TestingSource` and run flows directly in CI environments.
  * Unit tests: Test individual functions and operators as normal Python code.
  * [More on Testing](https://docs.bytewax.io/stable/guide/contributing/testing.html)



**Production:**

  * Scale horizontally by running multiple workers on multiple machines.
  * Integrate with Kubernetes for dynamic scaling, monitoring, and resilience.
  * Utilize `waxctl` for standardized deployments and lifecycle management.



## Deployment Options

[](#deployment-options)

### Running Locally

[](#running-locally)

For experimentation and small-scale jobs:

```
python -m bytewax.run my_dataflow.py
```

Multiple workers and threads:

```
python -m bytewax.run my_dataflow.py -w 2
```

### Containerized Execution

[](#containerized-execution)

Run Bytewax inside Docker containers for easy integration with container platforms. See the [Bytewax Container Guide](https://docs.bytewax.io/stable/guide/deployment/container.html).

### Scaling on Kubernetes

[](#scaling-on-kubernetes)

Use `waxctl` to package and deploy Bytewax dataflows to Kubernetes clusters for production workloads:

```
waxctl df deploy my_dataflow.py --name my-dataflow
```

[Learn more about Kubernetes deployment](https://docs.bytewax.io/stable/guide/deployment/waxctl.html).

### Scaling with the Bytewax Platform

[](#scaling-with-the-bytewax-platform)

Our commerically licensed Platform

## Examples

[](#examples)

  * [User Guide](https://docs.bytewax.io/stable/guide/index.html): End-to-end tutorials and advanced topics.
  * [`/examples` Folder](/bytewax/bytewax/blob/main/examples): Additional sample dataflows and connector usage.



## Community and Contributing

[](#community-and-contributing)

Join us on [Slack](https://join.slack.com/t/bytewaxcommunity/shared_invite/zt-vkos2f6r-_SeT9pF2~n9ArOaeI3ND2w) for support and discussion.

Open issues on [GitHub Issues](https://github.com/bytewax/bytewax/issues) for bug reports and feature requests. (For general help, use Slack.)

**Contributions Welcome:**

  * Check out the [Contribution Guide](https://docs.bytewax.io/stable/guide/contributing/contributing.html) to learn how to get started.
  * We follow a [Code of Conduct](https://github.com/bytewax/bytewax/blob/main/CODE_OF_CONDUCT.md).



## License

[](#license)

Bytewax is licensed under the [Apache-2.0](https://opensource.org/licenses/APACHE-2.0) license.

Built with ❤️ by the Bytewax community 

## About

Python Stream Processing 

[docs.bytewax.io/](https://docs.bytewax.io/ "https://docs.bytewax.io/")

### Topics

[ python ](/topics/python "Topic: python") [ rust ](/topics/rust "Topic: rust") [ data-science ](/topics/data-science "Topic: data-science") [ machine-learning ](/topics/machine-learning "Topic: machine-learning") [ stream-processing ](/topics/stream-processing "Topic: stream-processing") [ data-engineering ](/topics/data-engineering "Topic: data-engineering") [ dataflow ](/topics/dataflow "Topic: dataflow") [ data-processing ](/topics/data-processing "Topic: data-processing") [ streaming-data ](/topics/streaming-data "Topic: streaming-data")

### Resources

[ Readme ](#readme-ov-file)

### License

[ Apache-2.0 license ](#Apache-2.0-1-ov-file)

### Code of conduct

[ Code of conduct ](#coc-ov-file)

[ Activity](/bytewax/bytewax/activity)

[ Custom properties](/bytewax/bytewax/custom-properties)

### Stars

[ **1.6k** stars](/bytewax/bytewax/stargazers)

### Watchers

[ **18** watching](/bytewax/bytewax/watchers)

### Forks

[ **66** forks](/bytewax/bytewax/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fbytewax%2Fbytewax&report=bytewax+%28user%29)

##  [Releases 30](/bytewax/bytewax/releases)

[ v0.21.1 Latest  Nov 25, 2024 ](/bytewax/bytewax/releases/tag/v0.21.1)

[+ 29 releases](/bytewax/bytewax/releases)

##  [Packages 0](/orgs/bytewax/packages?repo_name=bytewax)

No packages published 

##  [Used by 242](/bytewax/bytewax/network/dependents)

[

  * ![@keshavv-dadhich](https://avatars.githubusercontent.com/u/178641681?s=64&v=4)
  * ![@leelasankar](https://avatars.githubusercontent.com/u/3892033?s=64&v=4)
  * ![@rafaleao9923](https://avatars.githubusercontent.com/u/147504244?s=64&v=4)
  * ![@chopley](https://avatars.githubusercontent.com/u/2196916?s=64&v=4)
  * ![@KunSam2002](https://avatars.githubusercontent.com/u/106855329?s=64&v=4)
  * ![@adarcohen](https://avatars.githubusercontent.com/u/62752823?s=64&v=4)
  * ![@alena0604](https://avatars.githubusercontent.com/u/30185976?s=64&v=4)
  * ![@amlanpatnaik](https://avatars.githubusercontent.com/u/48393502?s=64&v=4)

+ 234  ](/bytewax/bytewax/network/dependents)

##  [Contributors 23](/bytewax/bytewax/graphs/contributors)

  * [ ![@davidselassie](https://avatars.githubusercontent.com/u/921669?s=64&v=4) ](https://github.com/davidselassie)
  * [ ![@whoahbot](https://avatars.githubusercontent.com/u/35536?s=64&v=4) ](https://github.com/whoahbot)
  * [ ![@Psykopear](https://avatars.githubusercontent.com/u/5968682?s=64&v=4) ](https://github.com/Psykopear)
  * [ ![@awmatheson](https://avatars.githubusercontent.com/u/6073079?s=64&v=4) ](https://github.com/awmatheson)
  * [ ![@blakestier](https://avatars.githubusercontent.com/u/24259050?s=64&v=4) ](https://github.com/blakestier)
  * [ ![@lfunderburk](https://avatars.githubusercontent.com/u/13559004?s=64&v=4) ](https://github.com/lfunderburk)
  * [ ![@miccioest](https://avatars.githubusercontent.com/u/1631067?s=64&v=4) ](https://github.com/miccioest)
  * [ ![@konradsienkowski](https://avatars.githubusercontent.com/u/53014647?s=64&v=4) ](https://github.com/konradsienkowski)
  * [ ![@zzl221000](https://avatars.githubusercontent.com/u/14102425?s=64&v=4) ](https://github.com/zzl221000)
  * [ ![@kasun](https://avatars.githubusercontent.com/u/91105?s=64&v=4) ](https://github.com/kasun)
  * [ ![@hcs42](https://avatars.githubusercontent.com/u/28628?s=64&v=4) ](https://github.com/hcs42)
  * [ ![@galenward](https://avatars.githubusercontent.com/u/496665?s=64&v=4) ](https://github.com/galenward)
  * [ ![@PiePra](https://avatars.githubusercontent.com/u/22219924?s=64&v=4) ](https://github.com/PiePra)
  * [ ![@jhanninen](https://avatars.githubusercontent.com/u/29624908?s=64&v=4) ](https://github.com/jhanninen)



[+ 9 contributors](/bytewax/bytewax/graphs/contributors)

## Languages

  * [ Python 60.6% ](/bytewax/bytewax/search?l=python)
  * [ Rust 38.2% ](/bytewax/bytewax/search?l=rust)
  * Other 1.2%



## Footer

[ ](https://github.com "GitHub") © 2025 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can’t perform that action at this time. 
