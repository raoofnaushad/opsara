{
    "id": "84e363ff2c20fe7e153fba8cdfe47dad",
    "metadata": {
        "id": "84e363ff2c20fe7e153fba8cdfe47dad",
        "url": "https://github.com/neural-maze/agentic_patterns/",
        "title": "GitHub - neural-maze/agentic_patterns: Implementing the 4 agentic patterns from scratch",
        "properties": {
            "description": "Implementing the 4 agentic patterns from scratch. Contribute to neural-maze/agentic_patterns development by creating an account on GitHub.",
            "keywords": null,
            "author": null,
            "og:image": "https://opengraph.githubassets.com/5e54b42313aae94ad08c3a3ae6504baf3046b4bf6a80cfcdbcce98be57313b94/neural-maze/agentic_patterns",
            "og:image:alt": "Implementing the 4 agentic patterns from scratch. Contribute to neural-maze/agentic_patterns development by creating an account on GitHub.",
            "og:image:width": "1200",
            "og:image:height": "600",
            "og:site_name": "GitHub",
            "og:type": "object",
            "og:title": "GitHub - neural-maze/agentic_patterns: Implementing the 4 agentic patterns from scratch",
            "og:url": "https://github.com/neural-maze/agentic_patterns",
            "og:description": "Implementing the 4 agentic patterns from scratch. Contribute to neural-maze/agentic_patterns development by creating an account on GitHub.",
            "twitter:image": "https://opengraph.githubassets.com/5e54b42313aae94ad08c3a3ae6504baf3046b4bf6a80cfcdbcce98be57313b94/neural-maze/agentic_patterns",
            "twitter:site": "@github",
            "twitter:card": "summary_large_image",
            "twitter:title": "GitHub - neural-maze/agentic_patterns: Implementing the 4 agentic patterns from scratch",
            "twitter:description": "Implementing the 4 agentic patterns from scratch. Contribute to neural-maze/agentic_patterns development by creating an account on GitHub."
        }
    },
    "parent_metadata": {
        "id": "6d30ed311aedeab6fa0e6beaac0345a8",
        "url": "https://www.notion.so/Agents-6d30ed311aedeab6fa0e6beaac0345a8",
        "title": "Agents",
        "properties": {
            "Type": "Leaf"
        }
    },
    "content": "[Skip to content](#start-of-content)\n\n## Navigation Menu\n\nToggle navigation\n\n[ ](/)\n\n[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fneural-maze%2Fagentic_patterns%2F)\n\n  * Product \n\n    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)\n    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)\n    * [ Actions Automate any workflow  ](https://github.com/features/actions)\n    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)\n    * [ Issues Plan and track work  ](https://github.com/features/issues)\n    * [ Code Review Manage code changes  ](https://github.com/features/code-review)\n    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)\n    * [ Code Search Find more, search less  ](https://github.com/features/code-search)\n\nExplore\n    * [ All features ](https://github.com/features)\n    * [ Documentation ](https://docs.github.com)\n    * [ GitHub Skills ](https://skills.github.com)\n    * [ Blog ](https://github.blog)\n\n  * Solutions \n\nBy company size\n    * [ Enterprises ](https://github.com/enterprise)\n    * [ Small and medium teams ](https://github.com/team)\n    * [ Startups ](https://github.com/enterprise/startups)\n    * [ Nonprofits ](/solutions/industry/nonprofits)\n\nBy use case\n    * [ DevSecOps ](/solutions/use-case/devsecops)\n    * [ DevOps ](/solutions/use-case/devops)\n    * [ CI/CD ](/solutions/use-case/ci-cd)\n    * [ View all use cases ](/solutions/use-case)\n\nBy industry\n    * [ Healthcare ](/solutions/industry/healthcare)\n    * [ Financial services ](/solutions/industry/financial-services)\n    * [ Manufacturing ](/solutions/industry/manufacturing)\n    * [ Government ](/solutions/industry/government)\n    * [ View all industries ](/solutions/industry)\n\n[ View all solutions ](/solutions)\n\n  * Resources \n\nTopics\n    * [ AI ](/resources/articles/ai)\n    * [ DevOps ](/resources/articles/devops)\n    * [ Security ](/resources/articles/security)\n    * [ Software Development ](/resources/articles/software-development)\n    * [ View all ](/resources/articles)\n\nExplore\n    * [ Learning Pathways ](https://resources.github.com/learn/pathways)\n    * [ White papers, Ebooks, Webinars ](https://resources.github.com)\n    * [ Customer Stories ](https://github.com/customer-stories)\n    * [ Partners ](https://partner.github.com)\n    * [ Executive Insights ](https://github.com/solutions/executive-insights)\n\n  * Open Source \n\n    * [ GitHub Sponsors Fund open source developers  ](/sponsors)\n\n    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)\n\nRepositories\n    * [ Topics ](https://github.com/topics)\n    * [ Trending ](https://github.com/trending)\n    * [ Collections ](https://github.com/collections)\n\n  * Enterprise \n\n    * [ Enterprise platform AI-powered developer platform  ](/enterprise)\n\nAvailable add-ons\n    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)\n    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)\n    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)\n\n  * [Pricing](https://github.com/pricing)\n\n\n\nSearch or jump to...\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch \n\nClear\n\n[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)\n\n#  Provide feedback \n\nWe read every piece of feedback, and take your input very seriously.\n\nInclude my email address so I can be contacted\n\nCancel  Submit feedback \n\n#  Saved searches \n\n## Use saved searches to filter your results more quickly\n\nName\n\nQuery\n\nTo see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). \n\nCancel  Create saved search \n\n[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fneural-maze%2Fagentic_patterns%2F)\n\n[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=neural-maze%2Fagentic_patterns) Reseting focus\n\nYou signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert\n\n{{ message }}\n\n[ neural-maze ](/neural-maze) / **[agentic_patterns](/neural-maze/agentic_patterns) ** Public\n\n  * [ Notifications ](/login?return_to=%2Fneural-maze%2Fagentic_patterns) You must be signed in to change notification settings\n  * [ Fork 99 ](/login?return_to=%2Fneural-maze%2Fagentic_patterns)\n  * [ Star  990 ](/login?return_to=%2Fneural-maze%2Fagentic_patterns)\n\n\n\n\nImplementing the 4 agentic patterns from scratch \n\n### License\n\n[ MIT license ](/neural-maze/agentic_patterns/blob/main/LICENSE)\n\n[ 990 stars ](/neural-maze/agentic_patterns/stargazers) [ 99 forks ](/neural-maze/agentic_patterns/forks) [ Branches ](/neural-maze/agentic_patterns/branches) [ Tags ](/neural-maze/agentic_patterns/tags) [ Activity ](/neural-maze/agentic_patterns/activity)\n\n[ Star  ](/login?return_to=%2Fneural-maze%2Fagentic_patterns)\n\n[ Notifications ](/login?return_to=%2Fneural-maze%2Fagentic_patterns) You must be signed in to change notification settings\n\n  * [ Code ](/neural-maze/agentic_patterns)\n  * [ Issues 1 ](/neural-maze/agentic_patterns/issues)\n  * [ Pull requests 0 ](/neural-maze/agentic_patterns/pulls)\n  * [ Actions ](/neural-maze/agentic_patterns/actions)\n  * [ Projects 0 ](/neural-maze/agentic_patterns/projects)\n  * [ Security ](/neural-maze/agentic_patterns/security)\n  * [ Insights ](/neural-maze/agentic_patterns/pulse)\n\n\n\nAdditional navigation options\n\n  * [ Code  ](/neural-maze/agentic_patterns)\n  * [ Issues  ](/neural-maze/agentic_patterns/issues)\n  * [ Pull requests  ](/neural-maze/agentic_patterns/pulls)\n  * [ Actions  ](/neural-maze/agentic_patterns/actions)\n  * [ Projects  ](/neural-maze/agentic_patterns/projects)\n  * [ Security  ](/neural-maze/agentic_patterns/security)\n  * [ Insights  ](/neural-maze/agentic_patterns/pulse)\n\n\n\n# neural-maze/agentic_patterns\n\nmain\n\n[**1** Branch](/neural-maze/agentic_patterns/branches)[**2** Tags](/neural-maze/agentic_patterns/tags)\n\n[](/neural-maze/agentic_patterns/branches)[](/neural-maze/agentic_patterns/tags)\n\nGo to file\n\nCode\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\n[![MichaelisTrofficus](https://avatars.githubusercontent.com/u/32078719?v=4&size=40)](/MichaelisTrofficus)[MichaelisTrofficus](/neural-maze/agentic_patterns/commits?author=MichaelisTrofficus)[Merge pull request](/neural-maze/agentic_patterns/commit/2efdf0030a0ec751906b026cc61b22b83282f6ea) [#4](https://github.com/neural-maze/agentic_patterns/pull/4) [from neural-maze/final-readme](/neural-maze/agentic_patterns/commit/2efdf0030a0ec751906b026cc61b22b83282f6ea)Oct 25, 2024[2efdf00](/neural-maze/agentic_patterns/commit/2efdf0030a0ec751906b026cc61b22b83282f6ea) Â· Oct 25, 2024\n\n## History\n\n[50 Commits](/neural-maze/agentic_patterns/commits/main/)[](/neural-maze/agentic_patterns/commits/main/)  \n[.github](/neural-maze/agentic_patterns/tree/main/.github \".github\")| [.github](/neural-maze/agentic_patterns/tree/main/.github \".github\")| [add github actions for pypi package](/neural-maze/agentic_patterns/commit/c354cc0f68997f7a4b602d968b28b8eb4f99d122 \"add github actions for pypi package\")| Oct 11, 2024  \n[img](/neural-maze/agentic_patterns/tree/main/img \"img\")| [img](/neural-maze/agentic_patterns/tree/main/img \"img\")| [add more sections to readme](/neural-maze/agentic_patterns/commit/ebd40d6568a9450c0156a8021ee773c37162b994 \"add more sections to readme\")| Oct 24, 2024  \n[notebooks](/neural-maze/agentic_patterns/tree/main/notebooks \"notebooks\")| [notebooks](/neural-maze/agentic_patterns/tree/main/notebooks \"notebooks\")| [clear status of notebooks](/neural-maze/agentic_patterns/commit/bcf8db6b0f4c5a54834196e03dfaf23a8508ef9d \"clear status of notebooks\")| Oct 24, 2024  \n[src/agentic_patterns](/neural-maze/agentic_patterns/tree/main/src/agentic_patterns \"This path skips through empty directories\")| [src/agentic_patterns](/neural-maze/agentic_patterns/tree/main/src/agentic_patterns \"This path skips through empty directories\")| [add lshift methods for << operator](/neural-maze/agentic_patterns/commit/84ab82a3bc0c1227b7d4f2aac79319ac6617c074 \"add lshift methods for << operator\")| Oct 21, 2024  \n[.env.example](/neural-maze/agentic_patterns/blob/main/.env.example \".env.example\")| [.env.example](/neural-maze/agentic_patterns/blob/main/.env.example \".env.example\")| [refactor reflection pattern code](/neural-maze/agentic_patterns/commit/06ca49770658765647a36ffbe81e9bffb8280a43 \"refactor reflection pattern code\")| Oct 5, 2024  \n[.gitignore](/neural-maze/agentic_patterns/blob/main/.gitignore \".gitignore\")| [.gitignore](/neural-maze/agentic_patterns/blob/main/.gitignore \".gitignore\")| [add first commit](/neural-maze/agentic_patterns/commit/15f31c39d0fb97271efa82c00506a5e43061e89e \"add first commit\")| Jul 10, 2024  \n[.pre-commit-config.yaml](/neural-maze/agentic_patterns/blob/main/.pre-commit-config.yaml \".pre-commit-config.yaml\")| [.pre-commit-config.yaml](/neural-maze/agentic_patterns/blob/main/.pre-commit-config.yaml \".pre-commit-config.yaml\")| [refactor reflection pattern code](/neural-maze/agentic_patterns/commit/06ca49770658765647a36ffbe81e9bffb8280a43 \"refactor reflection pattern code\")| Oct 5, 2024  \n[LICENSE](/neural-maze/agentic_patterns/blob/main/LICENSE \"LICENSE\")| [LICENSE](/neural-maze/agentic_patterns/blob/main/LICENSE \"LICENSE\")| [Initial commit](/neural-maze/agentic_patterns/commit/438e58d1230a4c9c6f2183711064d671ed5ad3c2 \"Initial commit\")| Jul 10, 2024  \n[README.md](/neural-maze/agentic_patterns/blob/main/README.md \"README.md\")| [README.md](/neural-maze/agentic_patterns/blob/main/README.md \"README.md\")| [add Groq API Key section to readme](/neural-maze/agentic_patterns/commit/7271e7395aafa080304ffc637cddede0d35aff8d \"add Groq API Key section to readme\")| Oct 24, 2024  \n[poetry.lock](/neural-maze/agentic_patterns/blob/main/poetry.lock \"poetry.lock\")| [poetry.lock](/neural-maze/agentic_patterns/blob/main/poetry.lock \"poetry.lock\")| [add first version code multiagent](/neural-maze/agentic_patterns/commit/f8e2fe5dbe5304ab22f0337f1aa6472c344d9308 \"add first version code multiagent\")| Oct 10, 2024  \n[pyproject.toml](/neural-maze/agentic_patterns/blob/main/pyproject.toml \"pyproject.toml\")| [pyproject.toml](/neural-maze/agentic_patterns/blob/main/pyproject.toml \"pyproject.toml\")| [bump to 1.0.0](/neural-maze/agentic_patterns/commit/88602f4c5a1270220def2c93a9a480ae60dba18f \"bump to 1.0.0\")| Oct 24, 2024  \nView all files  \n  \n## Repository files navigation\n\n  * [README](#)\n  * [MIT license](#)\n\n\n\n[![logo](/neural-maze/agentic_patterns/raw/main/img/agentic_patterns.png)](/neural-maze/agentic_patterns/blob/main/img/agentic_patterns.png)\n\n# Agentic Patterns\n\n[](#agentic-patterns)\n\n### Implementing the agentic patterns using Groq\n\n[](#implementing-the-agentic-patterns-using-groq)\n\n[![logo](/neural-maze/agentic_patterns/raw/main/img/groq.png)](/neural-maze/agentic_patterns/blob/main/img/groq.png)\n\n> No LangChain, no LangGraph, no LlamaIndex, no CrewAI. Pure and simple API calls to Groq.\n\n## Table of Contents\n\n[](#table-of-contents)\n\n  * [1. Introduction](#introduction)\n\n    * [1.1 Reflection Pattern](#reflection-pattern-)\n    * [1.2 Tool Pattern](#tool-pattern--)\n    * [1.3 Planning Pattern](#planning-pattern-)\n    * [1.4 Multiagent Pattern](#multiagent-pattern-)\n  * [2. The 4 Agentic Patterns](#the-4-agentic-patterns)\n\n  * [3. Installation](#installation)\n\n  * [4. Groq API Key](#groq-api-key)\n\n  * [5. Usage](#usage)\n\n    * [5.1 Using a Reflection Agent - Reflection Pattern](#using-a-reflection-agent---reflection-pattern)\n    * [5.2 Creating and Using Tools - Tool Use Pattern](#creating-and-using-tools---tool-use-pattern)\n    * [5.3 Reasoning with a ReAct Agent - Planning Pattern](#reasoning-with-a-react-agent---planning-pattern)\n    * [5.4 Defining and running a Crew of Agents - MultiAgent Pattern](#defining-and-running-a-crew-of-agents---multiagent-pattern)\n  * [6. Recommended Workflow](#recommended-workflow)\n\n  * [7. Star History](#star-history)\n\n\n\n\n## Introduction\n\n[](#introduction)\n\nThis repository contains an implementation of the 4 agentic patterns as defined by Andrew Ng in his DeepLearning.AI [blog article series](https://www.deeplearning.ai/the-batch/how-agents-can-improve-llm-performance/?ref=dl-staging-website.ghost.io).\n\nHereâs a description of the four patterns we will be implementing.\n\n## The 4 Agentic patterns\n\n[](#the-4-agentic-patterns)\n\n### Reflection Pattern ð¤\n\n[](#reflection-pattern-)\n\n[![logo](/neural-maze/agentic_patterns/raw/main/img/reflection_pattern.png)](/neural-maze/agentic_patterns/blob/main/img/reflection_pattern.png)\n\nA very basic pattern but, despite its simplicity, it provides surprising performance gains for the LLM response.\n\nIt allows the LLM to **reflect on its results** , suggesting modifications, additions, improvements in the writing style, etc.\n\nWant to see how this pattern is implemented? ð»\n\n  * Check the [notebook](/neural-maze/agentic_patterns/blob/main/notebooks/reflection_pattern.ipynb) for a step by step explanation\n  * Check the [`ReflectionAgent`](/neural-maze/agentic_patterns/blob/main/src/agentic_patterns/reflection_pattern/reflection_agent.py) for a complete Python implementation\n\n\n\nTake a look at the YouTube video! ð\n\n[ ![Watch the video](https://camo.githubusercontent.com/64939977526fda2debe421c3acaf14299a482b04248efda48aa88e094437f093/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f30734156493862516452632f302e6a7067) ](https://www.youtube.com/watch?v=0sAVI8bQdRc)\n\n### Tool Pattern ð \n\n[](#tool-pattern--)\n\n[![logo](/neural-maze/agentic_patterns/raw/main/img/tool_pattern.png)](/neural-maze/agentic_patterns/blob/main/img/tool_pattern.png)\n\nThe information stored in the LLM weights is (usually) **not enough** to give accurate and insightful answers to our questions\n\nThat's why we need to provide the LLM with ways to access the outside world ð\n\nIn practice, you can build tools for whatever you want (at the end of the day they are just functions the LLM can use), from a tool that let's you access Wikipedia, another to analyse the content of YouTube videos or calculate difficult integrals in Wolfram Alpha.\n\n**Tools** are the **secret sauce of agentic applications** and the possibilities are endless! ð¥«\n\nWant to see how this pattern is implemented? ð»\n\n  * Check the [notebook](/neural-maze/agentic_patterns/blob/main/notebooks/tool_pattern.ipynb) for a step by step explanation\n  * Check the [`ToolAgent`](/neural-maze/agentic_patterns/blob/main/src/agentic_patterns/tool_pattern/tool_agent.py) for a complete Python implementation\n  * Check the [`Tool`](/neural-maze/agentic_patterns/blob/main/src/agentic_patterns/tool_pattern/tool.py) for understanding how Tools work under the hood.\n\n\n\nTake a look at the YouTube video! ð\n\n[ ![Watch the video](https://camo.githubusercontent.com/d74266014314dfce1de6b4fee85416ccf2a8ec2d069ad8dc671b4d190a0915af/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f41706f447a5a50385f636b2f302e6a7067) ](https://www.youtube.com/watch?v=ApoDzZP8_ck)\n\n### Planning Pattern ð§ \n\n[](#planning-pattern-)\n\n[![logo](/neural-maze/agentic_patterns/raw/main/img/planning_pattern.png)](/neural-maze/agentic_patterns/blob/main/img/planning_pattern.png)\n\nSo, we've seen agents capable of reflecting and using tools to access the outside world. But ... **what about planning** , i.e. deciding what sequence of steps to follow to accomplish a large task?\n\nThat is exactly what the Planning Pattern provides; ways for the LLM to break a task into **smaller, more easily accomplished subgoals** without losing track of the end goal.\n\nThe most paradigmatic example of the planning pattern is the **ReAct** technique, displayed in the diagram above.\n\nWant to see how this pattern is implemented? ð»\n\n  * Check the [notebook](/neural-maze/agentic_patterns/blob/main/notebooks/planning_pattern.ipynb) for a step by step explanation\n  * Check the [`ReactAgent`](/neural-maze/agentic_patterns/blob/main/src/agentic_patterns/planning_pattern/react_agent.py) for a complete Python implementation\n\n\n\nTake a look at the YouTube video! ð\n\n[ ![Watch the video](https://camo.githubusercontent.com/98a03a0448b44cacce1c0fd02c4c5de70886f3c88fb66a4e4ffd3295fd8a60b7/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f34786b43303639777277382f302e6a7067) ](https://www.youtube.com/watch?v=4xkC069wrw8)\n\n### Multiagent Pattern ð§ð½âð¤âð§ð»\n\n[](#multiagent-pattern-)\n\n[![logo](/neural-maze/agentic_patterns/raw/main/img/multiagent_pattern.png)](/neural-maze/agentic_patterns/blob/main/img/multiagent_pattern.png)\n\nYou may have heard about frameworks like crewAI or AutoGen, which allow you to create multi-agent applications.\n\nThese frameworks implement different variations of the multi-agent pattern, in which tasks are divided into **smaller subtasks executed by different roles** (e.g. one agent can be a software engineer, another a project manager, etc.)\n\nWant to see how this pattern is implemented? ð»\n\n  * Check the [notebook](/neural-maze/agentic_patterns/blob/main/notebooks/multiagent_pattern.ipynb) for a step by step explanation\n  * Check the [`Agent`](/neural-maze/agentic_patterns/blob/main/src/agentic_patterns/multiagent_pattern/agent.py) to see how to implement an `Agent`, member of the `Crew`.\n  * Check the [`Crew`](/neural-maze/agentic_patterns/blob/main/src/agentic_patterns/multiagent_pattern/crew.py) to see how to implement the `Crew`\n\n\n\nTake a look at the YouTube video! ð\n\n[ ![Watch the video](https://camo.githubusercontent.com/9cacbf6bf13b475860057df8d5269e5050b26f6b67495ae3fba7977a858c2b01/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f6f73323251376e455850412f302e6a7067) ](https://www.youtube.com/watch?v=os22Q7nEXPA)\n\n## Installation\n\n[](#installation)\n\nIf you take a look at any of the notebooks in the [notebooks/](/neural-maze/agentic_patterns/blob/main/notebooks) folder you'll see some helper methods and classes being imported from this library: `agentic-patterns`.\n\nThis is the library implemented in the [src/](/neural-maze/agentic_patterns/blob/main/src) folder, and contains a full implementation of the 4 patterns and related helper methods.\n\nTo install this library, you have two options.\n\n### Option 1: Use [Poetry](https://python-poetry.org/):\n\n[](#option-1-use-poetry)\n\n```\n`poetry install `\n```\n\n### Option 2: Install the PyPi library\n\n[](#option-2-install-the-pypi-library)\n\n```\npip install -U agentic-patterns\n```\n\n## Groq API Key\n\n[](#groq-api-key)\n\nThis project works with [Groq](https://groq.com/) as the LLM provider, so you'll need to create an API Key in this platform.\n\nWhen you have your API Key copy and paste it in an `.env` file.\n\nThe content of this `.env` file should match the structure of the `.env.example` I've created in the repo, but instead of an empty string, the `GROQ_API_KEY` var will contain your API Key.\n\n## Usage\n\n[](#usage)\n\nOnce you have both library installed and the `.env` file created, you can start playing with the 4 patterns implementation (I'll encourage you to take a look at the code, to fully understand what is happening under the hood).\n\nLet's see an example of how to put the 4 patterns into practise.\n\n### Using a Reflection Agent - Reflection Pattern\n\n[](#using-a-reflection-agent---reflection-pattern)\n\nHere is an example of how to use a Reflection Agent.\n\n```\nfrom agentic_patterns import ReflectionAgent agent = ReflectionAgent() generation_system_prompt = \"You are a Python programmer tasked with generating high quality Python code\" reflection_system_prompt = \"You are Andrej Karpathy, an experienced computer scientist\" user_msg = \"Generate a Python implementation of the Merge Sort algorithm\" final_response = agent.run( user_msg=user_msg, generation_system_prompt=generation_system_prompt, reflection_system_prompt=reflection_system_prompt, n_steps=10, verbose=1, ) print(final_response)\n```\n\n### Creating and Using Tools - Tool Use Pattern\n\n[](#creating-and-using-tools---tool-use-pattern)\n\nAn example of how to create a custom tool and bind it to a Tool Agent.\n\nFirst, let's create the tool. In this case, I'll be creating a tool for interacting with Hacker News. To define a tool, we just need to decorate the Python function with the `@tool`decorator.\n\n```\nimport json import requests from agentic_patterns.tool_pattern.tool import tool from agentic_patterns.tool_pattern.tool_agent import ToolAgent @tool def fetch_top_hacker_news_stories(top_n: int): \"\"\" Fetch the top stories from Hacker News. This function retrieves the top `top_n` stories from Hacker News using the Hacker News API. Each story contains the title, URL, score, author, and time of submission. The data is fetched from the official Firebase Hacker News API, which returns story details in JSON format. Args: top_n (int): The number of top stories to retrieve. \"\"\" top_stories_url = 'https://hacker-news.firebaseio.com/v0/topstories.json' try: response = requests.get(top_stories_url) response.raise_for_status() # Check for HTTP errors # Get the top story IDs top_story_ids = response.json()[:top_n] top_stories = [] # For each story ID, fetch the story details for story_id in top_story_ids: story_url = f'https://hacker-news.firebaseio.com/v0/item/{story_id}.json' story_response = requests.get(story_url) story_response.raise_for_status() # Check for HTTP errors story_data = story_response.json() # Append the story title and URL (or other relevant info) to the list top_stories.append({ 'title': story_data.get('title', 'No title'), 'url': story_data.get('url', 'No URL available'), }) return json.dumps(top_stories) except requests.exceptions.RequestException as e: print(f\"An error occurred: {e}\") return []\n```\n\nNext, let's define the Agent.\n\n```\ntool_agent = ToolAgent(tools=[fetch_top_hacker_news_stories]) output = tool_agent.run(user_msg=\"Tell me the top 5 Hacker News stories right now\") print(output)\n```\n\n### Reasoning with a ReAct Agent - Planning Pattern\n\n[](#reasoning-with-a-react-agent---planning-pattern)\n\nAs a paradigmatic example of the Planning Pattern, `agentic-patterns` offers an implementation of a ReAct Agent.\n\nThe `ReactAgent` is an evolution of the `ToolAgent`, extending its planning and reasoning capabilities.\n\nAs we did before, we'll begin by defining the tools. In this case, I'll create three.\n\n```\n@tool def sum_two_elements(a: int, b: int) -> int: \"\"\" Computes the sum of two integers. Args: a (int): The first integer to be summed. b (int): The second integer to be summed. Returns: int: The sum of `a` and `b`. \"\"\" return a + b @tool def multiply_two_elements(a: int, b: int) -> int: \"\"\" Multiplies two integers. Args: a (int): The first integer to multiply. b (int): The second integer to multiply. Returns: int: The product of `a` and `b`. \"\"\" return a * b @tool def compute_log(x: int) -> float | str: \"\"\" Computes the logarithm of an integer `x` with an optional base. Args: x (int): The integer value for which the logarithm is computed. Must be greater than 0. Returns: float: The logarithm of `x` to the specified `base`. \"\"\" if x <= 0: return \"Logarithm is undefined for values less than or equal to 0.\" return math.log(x)\n```\n\nNow, let's create the agent.\n\n```\nfrom agentic_patterns.planning_pattern.react_agent import ReactAgent agent = ReactAgent(tools=[sum_two_elements, multiply_two_elements, compute_log]) agent.run(user_msg=\"I want to calculate the sum of 1234 and 5678 and multiply the result by 5. Then, I want to take the logarithm of this result\")\n```\n\n### Defining and running a Crew of Agents - MultiAgent Pattern\n\n[](#defining-and-running-a-crew-of-agents---multiagent-pattern)\n\nFor the Multiagent Pattern, I decided to use two [CrewAI](https://www.crewai.com/)'s abstractions: the Agent and the Crew.\n\nAdditionally, I've also borrow some ideas from Airflow, defining the dependency between agents using the `>>` operator.\n\nLet's see an example:\n\n```\nfrom agentic_patterns.multiagent_pattern.crew import Crew with Crew() as crew: agent_1 = Agent( name=\"Poet Agent\", backstory=\"You are a well-known poet, who enjoys creating high quality poetry.\", task_description=\"Write a poem about the meaning of life\", task_expected_output=\"Just output the poem, without any title or introductory sentences\", ) agent_2 = Agent( name=\"Poem Translator Agent\", backstory=\"You are an expert translator especially skilled in Spanish\", task_description=\"Translate a poem into Spanish\", task_expected_output=\"Just output the translated poem and nothing else\" ) agent_3 = Agent( name=\"Writer Agent\", backstory=\"You are an expert transcriber, that loves writing poems into txt files\", task_description=\"You'll receive a Spanish poem in your context. You need to write the poem into './poem.txt' file\", task_expected_output=\"A txt file containing the greek poem received from the context\", tools=write_str_to_txt, ) agent_1 >> agent_2 >> agent_3\n```\n\nWe can also plot the Crew, to see the DAG structure, like this:\n\n```\ncrew.plot()\n```\n\nFor the previous Crew, you should get something like this:\n\n[![alt text](/neural-maze/agentic_patterns/raw/main/img/dag.svg)](/neural-maze/agentic_patterns/blob/main/img/dag.svg)\n\nTo run the Crew, simply run:\n\n```\ncrew.run()\n```\n\n## Recommended Workflow\n\n[](#recommended-workflow)\n\nThis is **an educational project** and not an agentic framework.\n\nThe reason I've decided to implement the 4 Agentic Patterns from scratch was to deeply understand their basics and also to teach them to anyone interested.\n\nGiven this, this is my recommended learning workflow:\n\n1ï¸â£ Start with the YouTube video, ideally following my explanations with your own Jupyter Notebook.\n\n2ï¸â£ Play with the code in the Jupyter Notebook: make changes, modify the prompts, create new examples etc. Get comfortable with the pattern fundamentals and basic concepts.\n\n3ï¸â£ (Optional) Read through the library implementation of each pattern. This will require more effort and more Python knowledge, but if you take the time, I can assure you you'll benefit a lot from it.\n\nLoading\n\n```\nflowchart TD; Video --> Notebook; Notebook --> Code classDef centered text-align:center; \n```\n\n## Star History\n\n[](#star-history)\n\n[![Star History Chart](https://camo.githubusercontent.com/7b9ff20fbc9d1d6da9739e78264abc1c751dca741ed06bcc001e758d0d0018f1/68747470733a2f2f6170692e737461722d686973746f72792e636f6d2f7376673f7265706f733d6e657572616c2d6d617a652f6167656e7469635f7061747465726e7326747970653d44617465)](https://star-history.com/#neural-maze/agentic_patterns&Date)\n\n## About\n\nImplementing the 4 agentic patterns from scratch \n\n### Resources\n\n[ Readme ](#readme-ov-file)\n\n### License\n\n[ MIT license ](#MIT-1-ov-file)\n\n[ Activity](/neural-maze/agentic_patterns/activity)\n\n[ Custom properties](/neural-maze/agentic_patterns/custom-properties)\n\n### Stars\n\n[ **990** stars](/neural-maze/agentic_patterns/stargazers)\n\n### Watchers\n\n[ **13** watching](/neural-maze/agentic_patterns/watchers)\n\n### Forks\n\n[ **99** forks](/neural-maze/agentic_patterns/forks)\n\n[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fneural-maze%2Fagentic_patterns&report=neural-maze+%28user%29)\n\n##  [Releases 2](/neural-maze/agentic_patterns/releases)\n\n[ v1.0.0 Latest  Oct 25, 2024 ](/neural-maze/agentic_patterns/releases/tag/v1.0.0)\n\n[+ 1 release](/neural-maze/agentic_patterns/releases)\n\n##  [Packages 0](/orgs/neural-maze/packages?repo_name=agentic_patterns)\n\nNo packages published \n\n## Languages\n\n  * [ Jupyter Notebook 63.1% ](/neural-maze/agentic_patterns/search?l=jupyter-notebook)\n  * [ Python 36.9% ](/neural-maze/agentic_patterns/search?l=python)\n\n\n\n## Footer\n\n[ ](https://github.com \"GitHub\") Â© 2025 GitHub, Inc. \n\n### Footer navigation\n\n  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)\n  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)\n  * [Security](https://github.com/security)\n  * [Status](https://www.githubstatus.com/)\n  * [Docs](https://docs.github.com/)\n  * [Contact](https://support.github.com?tags=dotcom-footer)\n  * Manage cookies \n  * Do not share my personal information \n\n\n\nYou canât perform that action at this time. \n",
    "content_quality_score": 0.9,
    "summary": null,
    "child_urls": [
        "https://github.com/neural-maze/agentic_patterns/#start-of-content",
        "https://github.com/",
        "https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fneural-maze%2Fagentic_patterns%2F",
        "https://github.com/features/copilot",
        "https://github.com/features/security",
        "https://github.com/features/actions",
        "https://github.com/features/codespaces",
        "https://github.com/features/issues",
        "https://github.com/features/code-review",
        "https://github.com/features/discussions",
        "https://github.com/features/code-search",
        "https://github.com/features",
        "https://docs.github.com",
        "https://skills.github.com",
        "https://github.com/enterprise",
        "https://github.com/team",
        "https://github.com/enterprise/startups",
        "https://github.com/solutions/industry/nonprofits",
        "https://github.com/solutions/use-case/devsecops",
        "https://github.com/solutions/use-case/devops",
        "https://github.com/solutions/use-case/ci-cd",
        "https://github.com/solutions/use-case",
        "https://github.com/solutions/industry/healthcare",
        "https://github.com/solutions/industry/financial-services",
        "https://github.com/solutions/industry/manufacturing",
        "https://github.com/solutions/industry/government",
        "https://github.com/solutions/industry",
        "https://github.com/solutions",
        "https://github.com/resources/articles/ai",
        "https://github.com/resources/articles/devops",
        "https://github.com/resources/articles/security",
        "https://github.com/resources/articles/software-development",
        "https://github.com/resources/articles",
        "https://resources.github.com/learn/pathways",
        "https://resources.github.com",
        "https://github.com/customer-stories",
        "https://partner.github.com",
        "https://github.com/solutions/executive-insights",
        "https://github.com/sponsors",
        "https://github.com/readme",
        "https://github.com/topics",
        "https://github.com/trending",
        "https://github.com/collections",
        "https://github.com/enterprise/advanced-security",
        "https://github.com/features/copilot#enterprise",
        "https://github.com/premium-support",
        "https://github.com/pricing",
        "https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax",
        "https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=neural-maze%2Fagentic_patterns",
        "https://github.com/neural-maze",
        "https://github.com/neural-maze/agentic_patterns",
        "https://github.com/login?return_to=%2Fneural-maze%2Fagentic_patterns",
        "https://github.com/neural-maze/agentic_patterns/blob/main/LICENSE",
        "https://github.com/neural-maze/agentic_patterns/stargazers",
        "https://github.com/neural-maze/agentic_patterns/forks",
        "https://github.com/neural-maze/agentic_patterns/branches",
        "https://github.com/neural-maze/agentic_patterns/tags",
        "https://github.com/neural-maze/agentic_patterns/activity",
        "https://github.com/neural-maze/agentic_patterns/issues",
        "https://github.com/neural-maze/agentic_patterns/pulls",
        "https://github.com/neural-maze/agentic_patterns/actions",
        "https://github.com/neural-maze/agentic_patterns/projects",
        "https://github.com/neural-maze/agentic_patterns/security",
        "https://github.com/neural-maze/agentic_patterns/pulse",
        "https://github.com/MichaelisTrofficus",
        "https://github.com/neural-maze/agentic_patterns/commits?author=MichaelisTrofficus",
        "https://github.com/neural-maze/agentic_patterns/commit/2efdf0030a0ec751906b026cc61b22b83282f6ea",
        "https://github.com/neural-maze/agentic_patterns/pull/4",
        "https://github.com/neural-maze/agentic_patterns/commits/main/",
        "https://github.com/neural-maze/agentic_patterns/tree/main/.github",
        "https://github.com/neural-maze/agentic_patterns/commit/c354cc0f68997f7a4b602d968b28b8eb4f99d122",
        "https://github.com/neural-maze/agentic_patterns/tree/main/img",
        "https://github.com/neural-maze/agentic_patterns/commit/ebd40d6568a9450c0156a8021ee773c37162b994",
        "https://github.com/neural-maze/agentic_patterns/tree/main/notebooks",
        "https://github.com/neural-maze/agentic_patterns/commit/bcf8db6b0f4c5a54834196e03dfaf23a8508ef9d",
        "https://github.com/neural-maze/agentic_patterns/tree/main/src/agentic_patterns",
        "https://github.com/neural-maze/agentic_patterns/commit/84ab82a3bc0c1227b7d4f2aac79319ac6617c074",
        "https://github.com/neural-maze/agentic_patterns/blob/main/.env.example",
        "https://github.com/neural-maze/agentic_patterns/commit/06ca49770658765647a36ffbe81e9bffb8280a43",
        "https://github.com/neural-maze/agentic_patterns/blob/main/.gitignore",
        "https://github.com/neural-maze/agentic_patterns/commit/15f31c39d0fb97271efa82c00506a5e43061e89e",
        "https://github.com/neural-maze/agentic_patterns/blob/main/.pre-commit-config.yaml",
        "https://github.com/neural-maze/agentic_patterns/commit/438e58d1230a4c9c6f2183711064d671ed5ad3c2",
        "https://github.com/neural-maze/agentic_patterns/blob/main/README.md",
        "https://github.com/neural-maze/agentic_patterns/commit/7271e7395aafa080304ffc637cddede0d35aff8d",
        "https://github.com/neural-maze/agentic_patterns/blob/main/poetry.lock",
        "https://github.com/neural-maze/agentic_patterns/commit/f8e2fe5dbe5304ab22f0337f1aa6472c344d9308",
        "https://github.com/neural-maze/agentic_patterns/blob/main/pyproject.toml",
        "https://github.com/neural-maze/agentic_patterns/commit/88602f4c5a1270220def2c93a9a480ae60dba18f",
        "https://github.com/neural-maze/agentic_patterns/",
        "https://github.com/neural-maze/agentic_patterns/blob/main/img/agentic_patterns.png",
        "https://github.com/neural-maze/agentic_patterns/#agentic-patterns",
        "https://github.com/neural-maze/agentic_patterns/#implementing-the-agentic-patterns-using-groq",
        "https://github.com/neural-maze/agentic_patterns/blob/main/img/groq.png",
        "https://github.com/neural-maze/agentic_patterns/#table-of-contents",
        "https://github.com/neural-maze/agentic_patterns/#introduction",
        "https://github.com/neural-maze/agentic_patterns/#reflection-pattern-",
        "https://github.com/neural-maze/agentic_patterns/#tool-pattern--",
        "https://github.com/neural-maze/agentic_patterns/#planning-pattern-",
        "https://github.com/neural-maze/agentic_patterns/#multiagent-pattern-",
        "https://github.com/neural-maze/agentic_patterns/#the-4-agentic-patterns",
        "https://github.com/neural-maze/agentic_patterns/#installation",
        "https://github.com/neural-maze/agentic_patterns/#groq-api-key",
        "https://github.com/neural-maze/agentic_patterns/#usage",
        "https://github.com/neural-maze/agentic_patterns/#using-a-reflection-agent---reflection-pattern",
        "https://github.com/neural-maze/agentic_patterns/#creating-and-using-tools---tool-use-pattern",
        "https://github.com/neural-maze/agentic_patterns/#reasoning-with-a-react-agent---planning-pattern",
        "https://github.com/neural-maze/agentic_patterns/#defining-and-running-a-crew-of-agents---multiagent-pattern",
        "https://github.com/neural-maze/agentic_patterns/#recommended-workflow",
        "https://github.com/neural-maze/agentic_patterns/#star-history",
        "https://github.com/neural-maze/agentic_patterns/blob/main/img/reflection_pattern.png",
        "https://github.com/neural-maze/agentic_patterns/blob/main/notebooks/reflection_pattern.ipynb",
        "https://github.com/neural-maze/agentic_patterns/blob/main/src/agentic_patterns/reflection_pattern/reflection_agent.py",
        "https://github.com/neural-maze/agentic_patterns/blob/main/img/tool_pattern.png",
        "https://github.com/neural-maze/agentic_patterns/blob/main/notebooks/tool_pattern.ipynb",
        "https://github.com/neural-maze/agentic_patterns/blob/main/src/agentic_patterns/tool_pattern/tool_agent.py",
        "https://github.com/neural-maze/agentic_patterns/blob/main/src/agentic_patterns/tool_pattern/tool.py",
        "https://github.com/neural-maze/agentic_patterns/blob/main/img/planning_pattern.png",
        "https://github.com/neural-maze/agentic_patterns/blob/main/notebooks/planning_pattern.ipynb",
        "https://github.com/neural-maze/agentic_patterns/blob/main/src/agentic_patterns/planning_pattern/react_agent.py",
        "https://github.com/neural-maze/agentic_patterns/blob/main/img/multiagent_pattern.png",
        "https://github.com/neural-maze/agentic_patterns/blob/main/notebooks/multiagent_pattern.ipynb",
        "https://github.com/neural-maze/agentic_patterns/blob/main/src/agentic_patterns/multiagent_pattern/agent.py",
        "https://github.com/neural-maze/agentic_patterns/blob/main/src/agentic_patterns/multiagent_pattern/crew.py",
        "https://github.com/neural-maze/agentic_patterns/blob/main/notebooks",
        "https://github.com/neural-maze/agentic_patterns/blob/main/src",
        "https://github.com/neural-maze/agentic_patterns/#option-1-use-poetry",
        "https://github.com/neural-maze/agentic_patterns/#option-2-install-the-pypi-library",
        "https://github.com/neural-maze/agentic_patterns/blob/main/img/dag.svg",
        "https://github.com/neural-maze/agentic_patterns/#readme-ov-file",
        "https://github.com/neural-maze/agentic_patterns/#MIT-1-ov-file",
        "https://github.com/neural-maze/agentic_patterns/custom-properties",
        "https://github.com/neural-maze/agentic_patterns/watchers",
        "https://github.com/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fneural-maze%2Fagentic_patterns&report=neural-maze+%28user%29",
        "https://github.com/neural-maze/agentic_patterns/releases",
        "https://github.com/neural-maze/agentic_patterns/releases/tag/v1.0.0",
        "https://github.com/orgs/neural-maze/packages?repo_name=agentic_patterns",
        "https://github.com/neural-maze/agentic_patterns/search?l=jupyter-notebook",
        "https://github.com/neural-maze/agentic_patterns/search?l=python",
        "https://github.com",
        "https://docs.github.com/site-policy/github-terms/github-terms-of-service",
        "https://docs.github.com/site-policy/privacy-policies/github-privacy-statement",
        "https://github.com/security",
        "https://docs.github.com/",
        "https://support.github.com?tags=dotcom-footer",
        "https://github.blog",
        "https://www.deeplearning.ai/the-batch/how-agents-can-improve-llm-performance/?ref=dl-staging-website.ghost.io",
        "https://www.youtube.com/watch?v=0sAVI8bQdRc",
        "https://www.youtube.com/watch?v=ApoDzZP8_ck",
        "https://www.youtube.com/watch?v=4xkC069wrw8",
        "https://www.youtube.com/watch?v=os22Q7nEXPA",
        "https://python-poetry.org/",
        "https://groq.com/",
        "https://www.crewai.com/",
        "https://star-history.com/#neural-maze/agentic_patterns&Date",
        "https://www.githubstatus.com/"
    ]
}