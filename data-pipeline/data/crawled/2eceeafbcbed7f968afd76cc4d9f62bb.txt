[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2FVikParuchuri%2Fmarker%2F)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)
    * [ Nonprofits ](/solutions/industry/nonprofits)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2FVikParuchuri%2Fmarker%2F)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=VikParuchuri%2Fmarker) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ VikParuchuri ](/VikParuchuri) / **[marker](/VikParuchuri/marker) ** Public

  * [ Notifications ](/login?return_to=%2FVikParuchuri%2Fmarker) You must be signed in to change notification settings
  * [ Fork 1.2k ](/login?return_to=%2FVikParuchuri%2Fmarker)
  * [ Star  19.5k ](/login?return_to=%2FVikParuchuri%2Fmarker)




Convert PDF to markdown + JSON quickly with high accuracy 

[www.datalab.to](https://www.datalab.to "https://www.datalab.to")

### License

[ GPL-3.0 license ](/VikParuchuri/marker/blob/master/LICENSE)

[ 19.5k stars ](/VikParuchuri/marker/stargazers) [ 1.2k forks ](/VikParuchuri/marker/forks) [ Branches ](/VikParuchuri/marker/branches) [ Tags ](/VikParuchuri/marker/tags) [ Activity ](/VikParuchuri/marker/activity)

[ Star  ](/login?return_to=%2FVikParuchuri%2Fmarker)

[ Notifications ](/login?return_to=%2FVikParuchuri%2Fmarker) You must be signed in to change notification settings

  * [ Code ](/VikParuchuri/marker)
  * [ Issues 175 ](/VikParuchuri/marker/issues)
  * [ Pull requests 24 ](/VikParuchuri/marker/pulls)
  * [ Actions ](/VikParuchuri/marker/actions)
  * [ Projects 0 ](/VikParuchuri/marker/projects)
  * [ Security ](/VikParuchuri/marker/security)
  * [ Insights ](/VikParuchuri/marker/pulse)



Additional navigation options

  * [ Code  ](/VikParuchuri/marker)
  * [ Issues  ](/VikParuchuri/marker/issues)
  * [ Pull requests  ](/VikParuchuri/marker/pulls)
  * [ Actions  ](/VikParuchuri/marker/actions)
  * [ Projects  ](/VikParuchuri/marker/projects)
  * [ Security  ](/VikParuchuri/marker/security)
  * [ Insights  ](/VikParuchuri/marker/pulse)



# VikParuchuri/marker

master

[**19** Branches](/VikParuchuri/marker/branches)[**36** Tags](/VikParuchuri/marker/tags)

[](/VikParuchuri/marker/branches)[](/VikParuchuri/marker/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[![VikParuchuri](https://avatars.githubusercontent.com/u/913340?v=4&size=40)](/VikParuchuri)[VikParuchuri](/VikParuchuri/marker/commits?author=VikParuchuri)[Merge pull request](/VikParuchuri/marker/commit/98dee1bff6e31e2e5be9b004daa05fc1a5fea210) [#495](https://github.com/VikParuchuri/marker/pull/495) [from VikParuchuri/hotfix-2](/VikParuchuri/marker/commit/98dee1bff6e31e2e5be9b004daa05fc1a5fea210)Jan 20, 2025[98dee1b](/VikParuchuri/marker/commit/98dee1bff6e31e2e5be9b004daa05fc1a5fea210) Â· Jan 20, 2025

## History

[600 Commits](/VikParuchuri/marker/commits/master/)[](/VikParuchuri/marker/commits/master/)  
[.github/workflows](/VikParuchuri/marker/tree/master/.github/workflows "This path skips through empty directories")| [.github/workflows](/VikParuchuri/marker/tree/master/.github/workflows "This path skips through empty directories")| [Fix poetry lock](/VikParuchuri/marker/commit/7d3de8cf74e1df6edc9b7a65439075a15738dcf3 "Fix poetry lock")| Nov 21, 2024  
[benchmarks](/VikParuchuri/marker/tree/master/benchmarks "benchmarks")| [benchmarks](/VikParuchuri/marker/tree/master/benchmarks "benchmarks")| [Finalize merge](/VikParuchuri/marker/commit/00d24b8606172e294b1fe780374aeecffb615c54 "Finalize merge")| Nov 30, 2024  
[data](/VikParuchuri/marker/tree/master/data "data")| [data](/VikParuchuri/marker/tree/master/data "data")| [update json examples](/VikParuchuri/marker/commit/41a8e3915ee1988a312fe4663875939495b5887b "update json examples")| Dec 12, 2024  
[marker](/VikParuchuri/marker/tree/master/marker "marker")| [marker](/VikParuchuri/marker/tree/master/marker "marker")| [Fix issues with newer converter class call](/VikParuchuri/marker/commit/698ab5abf9a7963a8487f9b5b43136991b9b1279 "Fix issues with newer converter class call")| Jan 20, 2025  
[signatures/version1](/VikParuchuri/marker/tree/master/signatures/version1 "This path skips through empty directories")| [signatures/version1](/VikParuchuri/marker/tree/master/signatures/version1 "This path skips through empty directories")| [@yasyf](https://github.com/yasyf) [has signed the CLA in](/VikParuchuri/marker/commit/675f9c8753363a729a938d7ef3faa3a8a3162eec "@yasyf has signed the CLA in VikParuchuri/marker#464") [#464](https://github.com/VikParuchuri/marker/pull/464)| Jan 5, 2025  
[static/fonts](/VikParuchuri/marker/tree/master/static/fonts "This path skips through empty directories")| [static/fonts](/VikParuchuri/marker/tree/master/static/fonts "This path skips through empty directories")| [Better debugging, heading detection](/VikParuchuri/marker/commit/d807c1726f4bd8b1d3c84bbe29c991d659e2c52d "Better debugging, heading detection")| Oct 16, 2024  
[tests](/VikParuchuri/marker/tree/master/tests "tests")| [tests](/VikParuchuri/marker/tree/master/tests "tests")| [Add test for stripping OCR](/VikParuchuri/marker/commit/b42f10dd6fef87e9afaf8fdcd86b9734f469cc21 "Add test for stripping OCR")| Jan 2, 2025  
[.gitignore](/VikParuchuri/marker/blob/master/.gitignore ".gitignore")| [.gitignore](/VikParuchuri/marker/blob/master/.gitignore ".gitignore")| [Merge branch 'master' into dev](/VikParuchuri/marker/commit/2e5cc038ac72db2d8445d44082c2a027df469d42 "Merge branch 'master' into dev")| Nov 27, 2024  
[CLA.md](/VikParuchuri/marker/blob/master/CLA.md "CLA.md")| [CLA.md](/VikParuchuri/marker/blob/master/CLA.md "CLA.md")| [Initial table integration](/VikParuchuri/marker/commit/04d308ef2734d117f0247d6e78ab599811cc847c "Initial table integration")| Oct 15, 2024  
[LICENSE](/VikParuchuri/marker/blob/master/LICENSE "LICENSE")| [LICENSE](/VikParuchuri/marker/blob/master/LICENSE "LICENSE")| [Improve benchmarks](/VikParuchuri/marker/commit/16bf7e758824d4f3f52f32c93749397e24ae5bd8 "Improve benchmarks")| Nov 18, 2023  
[README.md](/VikParuchuri/marker/blob/master/README.md "README.md")| [README.md](/VikParuchuri/marker/blob/master/README.md "README.md")| [Add test for stripping OCR](/VikParuchuri/marker/commit/b42f10dd6fef87e9afaf8fdcd86b9734f469cc21 "Add test for stripping OCR")| Jan 2, 2025  
[chunk_convert.py](/VikParuchuri/marker/blob/master/chunk_convert.py "chunk_convert.py")| [chunk_convert.py](/VikParuchuri/marker/blob/master/chunk_convert.py "chunk_convert.py")| [Reorganize imports](/VikParuchuri/marker/commit/713b7382b67130aa524be371be6ea7118bf5533c "Reorganize imports")| Jan 19, 2025  
[convert.py](/VikParuchuri/marker/blob/master/convert.py "convert.py")| [convert.py](/VikParuchuri/marker/blob/master/convert.py "convert.py")| [Fix issues with newer converter class call](/VikParuchuri/marker/commit/698ab5abf9a7963a8487f9b5b43136991b9b1279 "Fix issues with newer converter class call")| Jan 20, 2025  
[convert_single.py](/VikParuchuri/marker/blob/master/convert_single.py "convert_single.py")| [convert_single.py](/VikParuchuri/marker/blob/master/convert_single.py "convert_single.py")| [Reorganize imports](/VikParuchuri/marker/commit/713b7382b67130aa524be371be6ea7118bf5533c "Reorganize imports")| Jan 19, 2025  
[marker_app.py](/VikParuchuri/marker/blob/master/marker_app.py "marker_app.py")| [marker_app.py](/VikParuchuri/marker/blob/master/marker_app.py "marker_app.py")| [Reorganize imports](/VikParuchuri/marker/commit/713b7382b67130aa524be371be6ea7118bf5533c "Reorganize imports")| Jan 19, 2025  
[marker_server.py](/VikParuchuri/marker/blob/master/marker_server.py "marker_server.py")| [marker_server.py](/VikParuchuri/marker/blob/master/marker_server.py "marker_server.py")| [Reorganize imports](/VikParuchuri/marker/commit/713b7382b67130aa524be371be6ea7118bf5533c "Reorganize imports")| Jan 19, 2025  
[poetry.lock](/VikParuchuri/marker/blob/master/poetry.lock "poetry.lock")| [poetry.lock](/VikParuchuri/marker/blob/master/poetry.lock "poetry.lock")| [Add test for stripping OCR](/VikParuchuri/marker/commit/b42f10dd6fef87e9afaf8fdcd86b9734f469cc21 "Add test for stripping OCR")| Jan 2, 2025  
[pyproject.toml](/VikParuchuri/marker/blob/master/pyproject.toml "pyproject.toml")| [pyproject.toml](/VikParuchuri/marker/blob/master/pyproject.toml "pyproject.toml")| [Fix issues with newer converter class call](/VikParuchuri/marker/commit/698ab5abf9a7963a8487f9b5b43136991b9b1279 "Fix issues with newer converter class call")| Jan 20, 2025  
[pytest.ini](/VikParuchuri/marker/blob/master/pytest.ini "pytest.ini")| [pytest.ini](/VikParuchuri/marker/blob/master/pytest.ini "pytest.ini")| [update pytest ini and conftest to ignore warnings and fix pdf provideâ¦](/VikParuchuri/marker/commit/19d313ce4acd07ba6aa4ccd2f0884841aad918d2 "update pytest ini and conftest to ignore warnings and fix pdf provider \[skip ci\]")| Nov 18, 2024  
View all files  
  
## Repository files navigation

  * [README](#)
  * [GPL-3.0 license](#)



# Marker

[](#marker)

Marker converts PDFs to markdown, JSON, and HTML quickly and accurately.

  * Supports a wide range of documents
  * Supports all languages
  * Removes headers/footers/other artifacts
  * Formats tables, forms, and code blocks
  * Extracts and saves images along with the markdown
  * Converts equations to latex
  * Easily extensible with your own formatting and logic
  * Optionally boost accuracy with an LLM
  * Works on GPU, CPU, or MPS



## How it works

[](#how-it-works)

Marker is a pipeline of deep learning models:

  * Extract text, OCR if necessary (heuristics, [surya](https://github.com/VikParuchuri/surya))
  * Detect page layout and find reading order ([surya](https://github.com/VikParuchuri/surya))
  * Clean and format each block (heuristics, [texify](https://github.com/VikParuchuri/texify). [tabled](https://github.com/VikParuchuri/tabled))
  * Optionally use an LLM to improve quality
  * Combine blocks and postprocess complete text



It only uses models where necessary, which improves speed and accuracy.

## Examples

[](#examples)

PDF | File type | Markdown | JSON  
---|---|---|---  
[Think Python](https://greenteapress.com/thinkpython/thinkpython.pdf) | Textbook | [View](https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/thinkpython/thinkpython.md) | [View](https://github.com/VikParuchuri/marker/blob/master/data/examples/json/thinkpython.json)  
[Switch Transformers](https://arxiv.org/pdf/2101.03961.pdf) | arXiv paper | [View](https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/switch_transformers/switch_trans.md) | [View](https://github.com/VikParuchuri/marker/blob/master/data/examples/json/switch_trans.json)  
[Multi-column CNN](https://arxiv.org/pdf/1804.07821.pdf) | arXiv paper | [View](https://github.com/VikParuchuri/marker/blob/master/data/examples/markdown/multicolcnn/multicolcnn.md) | [View](https://github.com/VikParuchuri/marker/blob/master/data/examples/json/multicolcnn.json)  
  
## Performance

[](#performance)

[![Benchmark overall](/VikParuchuri/marker/raw/master/data/images/overall.png)](/VikParuchuri/marker/blob/master/data/images/overall.png)

The above results are with marker setup so it takes ~7GB of VRAM on an A10.

See [below](#benchmarks) for detailed speed and accuracy benchmarks, and instructions on how to run your own benchmarks.

# Commercial usage

[](#commercial-usage)

I want marker to be as widely accessible as possible, while still funding my development/training costs. Research and personal usage is always okay, but there are some restrictions on commercial usage.

The weights for the models are licensed `cc-by-nc-sa-4.0`, but I will waive that for any organization under $5M USD in gross revenue in the most recent 12-month period AND under $5M in lifetime VC/angel funding raised. You also must not be competitive with the [Datalab API](https://www.datalab.to/). If you want to remove the GPL license requirements (dual-license) and/or use the weights commercially over the revenue limit, check out the options [here](https://www.datalab.to).

# Hosted API

[](#hosted-api)

There's a hosted API for marker available [here](https://www.datalab.to/):

  * Supports PDFs, word documents, and powerpoints
  * 1/4th the price of leading cloud-based competitors
  * High uptime (99.99%), quality, and speed (around 15 seconds to convert a 250 page PDF)



# Community

[](#community)

[Discord](https://discord.gg//KuZwXNGnfH) is where we discuss future development.

# Limitations

[](#limitations)

PDF is a tricky format, so marker will not always work perfectly. Here are some known limitations that are on the roadmap to address:

  * Marker will only convert block equations
  * Tables are not always formatted 100% correctly - multiline cells are sometimes split into multiple rows.
  * Forms are not converted optimally
  * Very complex layouts, with nested tables and forms, may not work



Note: Passing the `--use_llm` flag will mostly solve all of these issues.

# Installation

[](#installation)

You'll need python 3.10+ and PyTorch. You may need to install the CPU version of torch first if you're not using a Mac or a GPU machine. See [here](https://pytorch.org/get-started/locally/) for more details.

Install with:

```
pip install marker-pdf
```

# Usage

[](#usage)

First, some configuration:

  * Your torch device will be automatically detected, but you can override this. For example, `TORCH_DEVICE=cuda`.
  * Some PDFs, even digital ones, have bad text in them. Set the `force_ocr` flag on the CLI or via configuration to ensure your PDF runs through OCR.



## Interactive App

[](#interactive-app)

I've included a streamlit app that lets you interactively try marker with some basic options. Run it with:

```
pip install streamlit marker_gui
```

## Convert a single file

[](#convert-a-single-file)

```
marker_single /path/to/file.pdf
```

Options:

  * `--output_dir PATH`: Directory where output files will be saved. Defaults to the value specified in settings.OUTPUT_DIR.
  * `--output_format [markdown|json|html]`: Specify the format for the output results.
  * `--use_llm`: Uses an LLM to improve accuracy. You must set your Gemini API key using the `GOOGLE_API_KEY` env var.
  * `--disable_image_extraction`: Don't extract images from the PDF. If you also specify `--use_llm`, then images will be replaced with a description.
  * `--page_range TEXT`: Specify which pages to process. Accepts comma-separated page numbers and ranges. Example: `--page_range "0,5-10,20"` will process pages 0, 5 through 10, and page 20.
  * `--force_ocr`: Force OCR processing on the entire document, even for pages that might contain extractable text.
  * `--strip_existing_ocr`: Remove all existing OCR text in the document and re-OCR with surya.
  * `--debug`: Enable debug mode for additional logging and diagnostic information.
  * `--processors TEXT`: Override the default processors by providing their full module paths, separated by commas. Example: `--processors "module1.processor1,module2.processor2"`
  * `--config_json PATH`: Path to a JSON configuration file containing additional settings.
  * `--languages TEXT`: Optionally specify which languages to use for OCR processing. Accepts a comma-separated list. Example: `--languages "en,fr,de"` for English, French, and German.
  * `config --help`: List all available builders, processors, and converters, and their associated configuration. These values can be used to build a JSON configuration file for additional tweaking of marker defaults.



The list of supported languages for surya OCR is [here](https://github.com/VikParuchuri/surya/blob/master/surya/languages.py). If you don't need OCR, marker can work with any language.

## Convert multiple files

[](#convert-multiple-files)

```
marker /path/to/input/folder --workers 4
```

  * `marker` supports all the same options from `marker_single` above.
  * `--workers` is the number of conversion workers to run simultaneously. This is set to 5 by default, but you can increase it to increase throughput, at the cost of more CPU/GPU usage. Marker will use 5GB of VRAM per worker at the peak, and 3.5GB average.



## Convert multiple files on multiple GPUs

[](#convert-multiple-files-on-multiple-gpus)

```
NUM_DEVICES=4 NUM_WORKERS=15 marker_chunk_convert ../pdf_in ../md_out
```

  * `NUM_DEVICES` is the number of GPUs to use. Should be `2` or greater.
  * `NUM_WORKERS` is the number of parallel processes to run on each GPU.



## Use from python

[](#use-from-python)

See the `PdfConverter` class at `marker/converters/pdf.py` function for additional arguments that can be passed.

```
from marker.converters.pdf import PdfConverter from marker.models import create_model_dict from marker.output import text_from_rendered converter = PdfConverter( artifact_dict=create_model_dict(), ) rendered = converter("FILEPATH") text, _, images = text_from_rendered(rendered)
```

`rendered` will be a pydantic basemodel with different properties depending on the output type requested. With markdown output (default), you'll have the properties `markdown`, `metadata`, and `images`. For json output, you'll have `children`, `block_type`, and `metadata`.

### Custom configuration

[](#custom-configuration)

You can pass configuration using the `ConfigParser`:

```
from marker.converters.pdf import PdfConverter from marker.models import create_model_dict from marker.config.parser import ConfigParser config = { "output_format": "json", "ADDITIONAL_KEY": "VALUE" } config_parser = ConfigParser(config) converter = PdfConverter( config=config_parser.generate_config_dict(), artifact_dict=create_model_dict(), processor_list=config_parser.get_processors(), renderer=config_parser.get_renderer() ) rendered = converter("FILEPATH")
```

### Extract blocks

[](#extract-blocks)

Each document consists of one or more pages. Pages contain blocks, which can themselves contain other blocks. It's possible to programatically manipulate these blocks.

Here's an example of extracting all forms from a document:

```
from marker.converters.pdf import PdfConverter from marker.models import create_model_dict from marker.schema import BlockTypes converter = PdfConverter( artifact_dict=create_model_dict(), ) document = converter.build_document("FILEPATH") forms = document.contained_blocks((BlockTypes.Form,))
```

Look at the processors for more examples of extracting and manipulating blocks.

# Output Formats

[](#output-formats)

## Markdown

[](#markdown)

Markdown output will include:

  * image links (images will be saved in the same folder)
  * formatted tables
  * embedded LaTeX equations (fenced with `$$`)
  * Code is fenced with triple backticks
  * Superscripts for footnotes



## HTML

[](#html)

HTML output is similar to markdown output:

  * Images are included via `img` tags
  * equations are fenced with `<math>` tags
  * code is in `pre` tags



## JSON

[](#json)

JSON output will be organized in a tree-like structure, with the leaf nodes being blocks. Examples of leaf nodes are a single list item, a paragraph of text, or an image.

The output will be a list, with each list item representing a page. Each page is considered a block in the internal marker schema. There are different types of blocks to represent different elements.

Pages have the keys:

  * `id` - unique id for the block.
  * `block_type` - the type of block. The possible block types can be seen in `marker/schema/__init__.py`. As of this writing, they are ["Line", "Span", "FigureGroup", "TableGroup", "ListGroup", "PictureGroup", "Page", "Caption", "Code", "Figure", "Footnote", "Form", "Equation", "Handwriting", "TextInlineMath", "ListItem", "PageFooter", "PageHeader", "Picture", "SectionHeader", "Table", "Text", "TableOfContents", "Document"]
  * `html` - the HTML for the page. Note that this will have recursive references to children. The `content-ref` tags must be replaced with the child content if you want the full html. You can see an example of this at `marker/renderers/__init__.py:BaseRender.extract_block_html`.
  * `polygon` - the 4-corner polygon of the page, in (x1,y1), (x2,y2), (x3, y3), (x4, y4) format. (x1,y1) is the top left, and coordinates go clockwise.
  * `children` - the child blocks.



The child blocks have two additional keys:

  * `section_hierarchy` - indicates the sections that the block is part of. `1` indicates an h1 tag, `2` an h2, and so on.
  * `images` - base64 encoded images. The key will be the block id, and the data will be the encoded image.



Note that child blocks of pages can have their own children as well (a tree structure).

```
{ "id": "/page/10/Page/366", "block_type": "Page", "html": "<content-ref src='/page/10/SectionHeader/0'></content-ref><content-ref src='/page/10/SectionHeader/1'></content-ref><content-ref src='/page/10/Text/2'></content-ref><content-ref src='/page/10/Text/3'></content-ref><content-ref src='/page/10/Figure/4'></content-ref><content-ref src='/page/10/SectionHeader/5'></content-ref><content-ref src='/page/10/SectionHeader/6'></content-ref><content-ref src='/page/10/TextInlineMath/7'></content-ref><content-ref src='/page/10/TextInlineMath/8'></content-ref><content-ref src='/page/10/Table/9'></content-ref><content-ref src='/page/10/SectionHeader/10'></content-ref><content-ref src='/page/10/Text/11'></content-ref>", "polygon": [[0.0, 0.0], [612.0, 0.0], [612.0, 792.0], [0.0, 792.0]], "children": [ { "id": "/page/10/SectionHeader/0", "block_type": "SectionHeader", "html": "<h1>Supplementary Material for <i>Subspace Adversarial Training</i> </h1>", "polygon": [ [217.845703125, 80.630859375], [374.73046875, 80.630859375], [374.73046875, 107.0], [217.845703125, 107.0] ], "children": null, "section_hierarchy": { "1": "/page/10/SectionHeader/1" }, "images": {} }, ... ] } 
```

## Metadata

[](#metadata)

All output formats will return a metadata dictionary, with the following fields:

```
{ "table_of_contents": [ { "title": "Introduction", "heading_level": 1, "page_id": 0, "polygon": [...] } ], // computed PDF table of contents "page_stats": [ { "page_id": 0, "text_extraction_method": "pdftext", "block_counts": [("Span", 200), ...] }, ... ] }
```

# Internals

[](#internals)

Marker is easy to extend. The core units of marker are:

  * `Providers`, at `marker/providers`. These provide information from a source file, like a PDF.
  * `Builders`, at `marker/builders`. These generate the initial document blocks and fill in text, using info from the providers.
  * `Processors`, at `marker/processors`. These process specific blocks, for example the table formatter is a processor.
  * `Renderers`, at `marker/renderers`. These use the blocks to render output.
  * `Schema`, at `marker/schema`. The classes for all the block types.
  * `Converters`, at `marker/converters`. They run the whole end to end pipeline.



To customize processing behavior, override the `processors`. To add new output formats, write a new `renderer`. For additional input formats, write a new `provider.`

Processors and renderers can be directly passed into the base `PDFConverter`, so you can specify your own custom processing easily.

## API server

[](#api-server)

There is a very simple API server you can run like this:

```
pip install -U uvicorn fastapi python-multipart marker_server --port 8001
```

This will start a fastapi server that you can access at `localhost:8001`. You can go to `localhost:8001/docs` to see the endpoint options.

You can send requests like this:

```
`import requests import json post_data = { 'filepath': 'FILEPATH', # Add other params here } requests.post("http://localhost:8001/marker", data=json.dumps(post_data)).json() `
```

Note that this is not a very robust API, and is only intended for small-scale use. If you want to use this server, but want a more robust conversion option, you can use the hosted [Datalab API](https://www.datalab.to/plans).

# Troubleshooting

[](#troubleshooting)

There are some settings that you may find useful if things aren't working the way you expect:

  * If you have issues with accuracy, try setting `--use_llm` to use an LLM to improve quality. You must set `GOOGLE_API_KEY` to a Gemini API key for this to work.
  * Make sure to set `force_ocr` if you see garbled text - this will re-OCR the document.
  * `TORCH_DEVICE` - set this to force marker to use a given torch device for inference.
  * If you're getting out of memory errors, decrease worker count. You can also try splitting up long PDFs into multiple files.



## Debugging

[](#debugging)

Pass the `debug` option to activate debug mode. This will save images of each page with detected layout and text, as well as output a json file with additional bounding box information.

# Benchmarks

[](#benchmarks)

Benchmarking PDF extraction quality is hard. I've created a test set by finding books and scientific papers that have a pdf version and a latex source. I convert the latex to text, and compare the reference to the output of text extraction methods. It's noisy, but at least directionally correct.

**Speed**

Method | Average Score | Time per page | Time per document  
---|---|---|---  
marker | 0.625115 | 0.234184 | 21.545  
  
**Accuracy**

Method | thinkpython.pdf | switch_trans.pdf | thinkdsp.pdf | crowd.pdf | thinkos.pdf | multicolcnn.pdf  
---|---|---|---|---|---|---  
marker | 0.720347 | 0.592002 | 0.70468 | 0.515082 | 0.701394 | 0.517184  
  
Peak GPU memory usage during the benchmark is `6GB` for marker. Benchmarks were run on an A10.

**Throughput**

Marker takes about 6GB of VRAM on average per task, so you can convert 8 documents in parallel on an A6000.

[![Benchmark results](/VikParuchuri/marker/raw/master/data/images/per_doc.png)](/VikParuchuri/marker/blob/master/data/images/per_doc.png)

## Running your own benchmarks

[](#running-your-own-benchmarks)

You can benchmark the performance of marker on your machine. Install marker manually with:

```
git clone https://github.com/VikParuchuri/marker.git poetry install
```

Download the benchmark data [here](https://drive.google.com/file/d/1ZSeWDo2g1y0BRLT7KnbmytV2bjWARWba/view?usp=sharing) and unzip. Then run the overall benchmark like this:

```
python benchmarks/overall.py data/pdfs data/references report.json
```

# Thanks

[](#thanks)

This work would not have been possible without amazing open source models and datasets, including (but not limited to):

  * Surya
  * Texify
  * Pypdfium2/pdfium
  * DocLayNet from IBM



Thank you to the authors of these models and datasets for making them available to the community!

## About

Convert PDF to markdown + JSON quickly with high accuracy 

[www.datalab.to](https://www.datalab.to "https://www.datalab.to")

### Resources

[ Readme ](#readme-ov-file)

### License

[ GPL-3.0 license ](#GPL-3.0-1-ov-file)

[ Activity](/VikParuchuri/marker/activity)

### Stars

[ **19.5k** stars](/VikParuchuri/marker/stargazers)

### Watchers

[ **82** watching](/VikParuchuri/marker/watchers)

### Forks

[ **1.2k** forks](/VikParuchuri/marker/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2FVikParuchuri%2Fmarker&report=VikParuchuri+%28user%29)

##  [Releases 36](/VikParuchuri/marker/releases)

[ Remove code from new version Latest  Jan 20, 2025 ](/VikParuchuri/marker/releases/tag/v1.2.7)

[+ 35 releases](/VikParuchuri/marker/releases)

##  [Packages 0](/users/VikParuchuri/packages?repo_name=marker)

No packages published 

##  [Contributors 10](/VikParuchuri/marker/graphs/contributors)

  * [ ![@VikParuchuri](https://avatars.githubusercontent.com/u/913340?s=64&v=4) ](https://github.com/VikParuchuri)
  * [ ![@iammosespaulr](https://avatars.githubusercontent.com/u/28682735?s=64&v=4) ](https://github.com/iammosespaulr)
  * [ ![@github-actions\[bot\]](https://avatars.githubusercontent.com/in/15368?s=64&v=4) ](https://github.com/apps/github-actions)
  * [ ![@tarun-menta](https://avatars.githubusercontent.com/u/66506307?s=64&v=4) ](https://github.com/tarun-menta)
  * [ ![@samuell](https://avatars.githubusercontent.com/u/125003?s=64&v=4) ](https://github.com/samuell)
  * [ ![@syldor](https://avatars.githubusercontent.com/u/4158062?s=64&v=4) ](https://github.com/syldor)
  * [ ![@tosaddler](https://avatars.githubusercontent.com/u/13705399?s=64&v=4) ](https://github.com/tosaddler)
  * [ ![@tjbck](https://avatars.githubusercontent.com/u/25473318?s=64&v=4) ](https://github.com/tjbck)
  * [ ![@Leon-Sander](https://avatars.githubusercontent.com/u/72946124?s=64&v=4) ](https://github.com/Leon-Sander)
  * [ ![@aniketinamdar](https://avatars.githubusercontent.com/u/79044809?s=64&v=4) ](https://github.com/aniketinamdar)



## Languages

  * [ Python 99.2% ](/VikParuchuri/marker/search?l=python)
  * [ Shell 0.8% ](/VikParuchuri/marker/search?l=shell)



## Footer

[ ](https://github.com "GitHub") Â© 2025 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You canât perform that action at this time. 
