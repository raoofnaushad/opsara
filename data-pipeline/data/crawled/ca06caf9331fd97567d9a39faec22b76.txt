[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fdottxt-ai%2Foutlines%2F)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)
    * [ Nonprofits ](/solutions/industry/nonprofits)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Fdottxt-ai%2Foutlines%2F)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=dottxt-ai%2Foutlines) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ dottxt-ai ](/dottxt-ai) / **[outlines](/dottxt-ai/outlines) ** Public

  * [ Notifications ](/login?return_to=%2Fdottxt-ai%2Foutlines) You must be signed in to change notification settings
  * [ Fork 545 ](/login?return_to=%2Fdottxt-ai%2Foutlines)
  * [ Star  10.4k ](/login?return_to=%2Fdottxt-ai%2Foutlines)




Structured Text Generation 

[dottxt-ai.github.io/outlines/](https://dottxt-ai.github.io/outlines/ "https://dottxt-ai.github.io/outlines/")

### License

[ Apache-2.0 license ](/dottxt-ai/outlines/blob/main/LICENSE)

[ 10.4k stars ](/dottxt-ai/outlines/stargazers) [ 545 forks ](/dottxt-ai/outlines/forks) [ Branches ](/dottxt-ai/outlines/branches) [ Tags ](/dottxt-ai/outlines/tags) [ Activity ](/dottxt-ai/outlines/activity)

[ Star  ](/login?return_to=%2Fdottxt-ai%2Foutlines)

[ Notifications ](/login?return_to=%2Fdottxt-ai%2Foutlines) You must be signed in to change notification settings

  * [ Code ](/dottxt-ai/outlines)
  * [ Issues 234 ](/dottxt-ai/outlines/issues)
  * [ Pull requests 37 ](/dottxt-ai/outlines/pulls)
  * [ Discussions ](/dottxt-ai/outlines/discussions)
  * [ Actions ](/dottxt-ai/outlines/actions)
  * [ Projects 0 ](/dottxt-ai/outlines/projects)
  * [ Security ](/dottxt-ai/outlines/security)
  * [ Insights ](/dottxt-ai/outlines/pulse)



Additional navigation options

  * [ Code  ](/dottxt-ai/outlines)
  * [ Issues  ](/dottxt-ai/outlines/issues)
  * [ Pull requests  ](/dottxt-ai/outlines/pulls)
  * [ Discussions  ](/dottxt-ai/outlines/discussions)
  * [ Actions  ](/dottxt-ai/outlines/actions)
  * [ Projects  ](/dottxt-ai/outlines/projects)
  * [ Security  ](/dottxt-ai/outlines/security)
  * [ Insights  ](/dottxt-ai/outlines/pulse)



# dottxt-ai/outlines

main

[**7** Branches](/dottxt-ai/outlines/branches)[**60** Tags](/dottxt-ai/outlines/tags)

[](/dottxt-ai/outlines/branches)[](/dottxt-ai/outlines/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

## History

[807 Commits](/dottxt-ai/outlines/commits/main/)[](/dottxt-ai/outlines/commits/main/)  
[.github](/dottxt-ai/outlines/tree/main/.github ".github")| [.github](/dottxt-ai/outlines/tree/main/.github ".github")  
[benchmarks](/dottxt-ai/outlines/tree/main/benchmarks "benchmarks")| [benchmarks](/dottxt-ai/outlines/tree/main/benchmarks "benchmarks")  
[docs](/dottxt-ai/outlines/tree/main/docs "docs")| [docs](/dottxt-ai/outlines/tree/main/docs "docs")  
[examples](/dottxt-ai/outlines/tree/main/examples "examples")| [examples](/dottxt-ai/outlines/tree/main/examples "examples")  
[outlines](/dottxt-ai/outlines/tree/main/outlines "outlines")| [outlines](/dottxt-ai/outlines/tree/main/outlines "outlines")  
[tests](/dottxt-ai/outlines/tree/main/tests "tests")| [tests](/dottxt-ai/outlines/tree/main/tests "tests")  
[.gitignore](/dottxt-ai/outlines/blob/main/.gitignore ".gitignore")| [.gitignore](/dottxt-ai/outlines/blob/main/.gitignore ".gitignore")  
[.pre-commit-config.yaml](/dottxt-ai/outlines/blob/main/.pre-commit-config.yaml ".pre-commit-config.yaml")| [.pre-commit-config.yaml](/dottxt-ai/outlines/blob/main/.pre-commit-config.yaml ".pre-commit-config.yaml")  
[.readthedocs.yaml](/dottxt-ai/outlines/blob/main/.readthedocs.yaml ".readthedocs.yaml")| [.readthedocs.yaml](/dottxt-ai/outlines/blob/main/.readthedocs.yaml ".readthedocs.yaml")  
[Dockerfile](/dottxt-ai/outlines/blob/main/Dockerfile "Dockerfile")| [Dockerfile](/dottxt-ai/outlines/blob/main/Dockerfile "Dockerfile")  
[LICENSE](/dottxt-ai/outlines/blob/main/LICENSE "LICENSE")| [LICENSE](/dottxt-ai/outlines/blob/main/LICENSE "LICENSE")  
[README.md](/dottxt-ai/outlines/blob/main/README.md "README.md")| [README.md](/dottxt-ai/outlines/blob/main/README.md "README.md")  
[environment.yml](/dottxt-ai/outlines/blob/main/environment.yml "environment.yml")| [environment.yml](/dottxt-ai/outlines/blob/main/environment.yml "environment.yml")  
[mkdocs.yml](/dottxt-ai/outlines/blob/main/mkdocs.yml "mkdocs.yml")| [mkdocs.yml](/dottxt-ai/outlines/blob/main/mkdocs.yml "mkdocs.yml")  
[pyproject.toml](/dottxt-ai/outlines/blob/main/pyproject.toml "pyproject.toml")| [pyproject.toml](/dottxt-ai/outlines/blob/main/pyproject.toml "pyproject.toml")  
[requirements-doc.txt](/dottxt-ai/outlines/blob/main/requirements-doc.txt "requirements-doc.txt")| [requirements-doc.txt](/dottxt-ai/outlines/blob/main/requirements-doc.txt "requirements-doc.txt")  
[setup.cfg](/dottxt-ai/outlines/blob/main/setup.cfg "setup.cfg")| [setup.cfg](/dottxt-ai/outlines/blob/main/setup.cfg "setup.cfg")  
View all files  
  
## Repository files navigation

  * [README](#)
  * [Apache-2.0 license](#)



[![Outlines Logo](/dottxt-ai/outlines/raw/main/docs/assets/images/logo.png)](/dottxt-ai/outlines/blob/main/docs/assets/images/logo.png)

üóíÔ∏è _Make LLMs speak the language of every application._ üóíÔ∏è

Made with ‚ù§üë∑Ô∏è by the team at [.txt](https://dottxt.co).

[![Documentation](https://camo.githubusercontent.com/499a9db83be7dabab071235ffea8709129acf4568c201d6031ee4103b2f9b5e6/68747470733a2f2f696d672e736869656c64732e696f2f72656164746865646f63732f6f75746c696e6573)](https://dottxt-ai.github.io/outlines/latest/welcome/) [![Contributors](https://camo.githubusercontent.com/35942007797e41137baa0e828b241c6edf5f40b40bf817856005e4c5ff60ccca/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f646f747478742d61692f6f75746c696e65733f7374796c653d666c61742d737175617265266c6f676f3d676974687562266c6f676f436f6c6f723d776869746526636f6c6f723d454345464634)](https://github.com/dottxt-ai/outlines/graphs/contributors) [![Downloads](https://camo.githubusercontent.com/6418dba5532d571c1f0d73b9528988c8b1249ec2542779dff024b398ecef5084/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6f75746c696e65733f636f6c6f723d383941433642266c6f676f3d707974686f6e266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265)](https://pypistats.org/packages/outlines) [![Discord](https://camo.githubusercontent.com/ff249d8f05f8a37d82860d11f4af860563511909b5844670741a6ebec7e6195a/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f313138323331363232353238343535343739333f636f6c6f723d383141314331266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465267374796c653d666c61742d737175617265)](https://discord.gg/R9DSu34mGd)

[Youtube channel](https://www.youtube.com/@dottxt-ai) | [.txt blog](https://blog.dottxt.co/) | [Twitter](https://twitter.com/dottxtai)

```
pip install outlines
```

First time here? Go to our [setup guide](https://dottxt-ai.github.io/outlines/latest/welcome/)

## Features

[](#features)

  * ü§ñ [Multiple model integrations](https://dottxt-ai.github.io/outlines/latest/installation): OpenAI, transformers, llama.cpp, exllama2, mamba
  * üñçÔ∏è Simple and powerful prompting primitives based on the [Jinja templating engine](https://jinja.palletsprojects.com/)
  * üöÑ [Multiple choices](#multiple-choices), [type constraints](#type-constraint) and dynamic stopping
  * ‚ö° Fast [regex-structured generation](#efficient-regex-structured-generation)
  * üî• Fast [JSON generation](#efficient-json-generation-following-a-pydantic-model) following a JSON schema or a Pydantic model
  * üìù [Grammar-structured generation](#using-context-free-grammars-to-guide-generation)
  * üêç Interleave completions with loops, conditionals, and custom Python functions
  * üíæ Caching of generations
  * üóÇÔ∏è Batch inference
  * üé≤ Sample with the greedy, multinomial and beam search algorithms (and more to come!)
  * üöÄ [Serve with vLLM](https://dottxt-ai.github.io/outlines/latest/reference/serve/vllm), with official Docker image, [`outlinesdev/outlines`](https://hub.docker.com/r/outlinesdev/outlines)!



Outlines has new releases and features coming every week. Make sure to ‚≠ê star and üëÄ watch this repository, follow [@dottxtai](https://twitter.com/dottxtai) to stay up to date!

## Why should I use structured generation?

[](#why-should-i-use-structured-generation)

  * It doesn't add any overhead during inference (cost-free)
  * It allows Open Source models to beat closed source models ([Mistral](https://x.com/dottxtai/status/1797692104023363765), [GPT-4](https://x.com/dottxtai/status/1798443290913853770))
  * [It speeds up inference](http://blog.dottxt.co/coalescence.html)
  * [It improves the performance of base models (GSM8K)](http://blog.dottxt.co/performance-gsm8k.html)
  * [It improves the performance of finetuned models (CoNNL)](https://predibase.com/blog/lorax-outlines-better-json-extraction-with-structured-generation-and-lora)
  * [It improves model efficiency (less examples needed)](https://huggingface.co/blog/evaluation-structured-outputs)



## .txt company

[](#txt-company)

[![Outlines Logo](/dottxt-ai/outlines/raw/main/docs/assets/images/dottxt.png)](/dottxt-ai/outlines/blob/main/docs/assets/images/dottxt.png)

We started a company to keep pushing the boundaries of structured generation. Learn more about [.txt](https://twitter.com/dottxtai), and [give our .json API a try](https://h1xbpbfsf0w.typeform.com/to/ZgBCvJHF) if you need a hosted solution ‚ú®

## Structured generation

[](#structured-generation)

The first step towards reliability of systems that include large language models is to ensure that there is a well-defined interface between their output and user-defined code. **Outlines** provides ways to control the generation of language models to make their output more predictable.

### Multiple choices

[](#multiple-choices)

You can reduce the completion to a choice between multiple possibilities:

```
import outlines model = outlines.models.transformers("microsoft/Phi-3-mini-4k-instruct") prompt = """You are a sentiment-labelling assistant. Is the following review positive or negative? Review: This restaurant is just awesome! """ generator = outlines.generate.choice(model, ["Positive", "Negative"]) answer = generator(prompt)
```

You can also pass these choices through en enum:

```
from enum import Enum import outlines class Sentiment(str, Enum): positive = "Positive" negative = "Negative" model = outlines.models.transformers("microsoft/Phi-3-mini-4k-instruct") prompt = """You are a sentiment-labelling assistant. Is the following review positive or negative? Review: This restaurant is just awesome! """ generator = outlines.generate.choice(model, Sentiment) answer = generator(prompt)
```

### Type constraint

[](#type-constraint)

You can instruct the model to only return integers or floats:

```
import outlines model = outlines.models.transformers("WizardLM/WizardMath-7B-V1.1") prompt = "<s>result of 9 + 9 = 18</s><s>result of 1 + 2 = " answer = outlines.generate.format(model, int)(prompt) print(answer) # 3 prompt = "sqrt(2)=" generator = outlines.generate.format(model, float) answer = generator(prompt, max_tokens=10) print(answer) # 1.41421356
```

### Efficient regex-structured generation

[](#efficient-regex-structured-generation)

Outlines also comes with fast regex-structured generation. In fact, the `choice` and `format` functions above all use regex-structured generation under the hood:

```
import outlines model = outlines.models.transformers("microsoft/Phi-3-mini-4k-instruct") prompt = "What is the IP address of the Google DNS servers? " generator = outlines.generate.text(model) unstructured = generator(prompt, max_tokens=30) generator = outlines.generate.regex( model, r"((25[0-5]|2[0-4]\d|[01]?\d\d?)\\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)", ) structured = generator(prompt, max_tokens=30) print(unstructured) # What is the IP address of the Google DNS servers? # # Passive DNS servers are at DNS servers that are private. # In other words, both IP servers are private. The database # does not contain Chelsea Manning print(structured) # What is the IP address of the Google DNS servers? # 2.2.6.1
```

Unlike other libraries, regex-structured generation in Outlines is almost as fast as non-structured generation.

### Efficient JSON generation following a Pydantic model

[](#efficient-json-generation-following-a-pydantic-model)

Outlines allows to guide the generation process so the output is _guaranteed_ to follow a [JSON schema](https://json-schema.org/) or [Pydantic model](https://docs.pydantic.dev/latest/):

```
from enum import Enum from pydantic import BaseModel, constr import outlines import torch class Weapon(str, Enum): sword = "sword" axe = "axe" mace = "mace" spear = "spear" bow = "bow" crossbow = "crossbow" class Armor(str, Enum): leather = "leather" chainmail = "chainmail" plate = "plate" class Character(BaseModel): name: constr(max_length=10) age: int armor: Armor weapon: Weapon strength: int model = outlines.models.transformers("microsoft/Phi-3-mini-4k-instruct") # Construct structured sequence generator generator = outlines.generate.json(model, Character) # Draw a sample seed = 789001 character = generator("Give me a character description", seed=seed) print(repr(character)) # Character(name='Anderson', age=28, armor=<Armor.chainmail: 'chainmail'>, weapon=<Weapon.sword: 'sword'>, strength=8) character = generator("Give me an interesting character description") print(repr(character)) # Character(name='Vivian Thr', age=44, armor=<Armor.plate: 'plate'>, weapon=<Weapon.crossbow: 'crossbow'>, strength=125)
```

The method works with union types, optional types, arrays, nested schemas, etc. Some field constraints are [not supported yet](https://github.com/dottxt-ai/outlines/issues/215), but everything else should work.

### Efficient JSON generation following a JSON Schema

[](#efficient-json-generation-following-a-json-schema)

Sometimes you just want to be able to pass a JSON Schema instead of a Pydantic model. We've got you covered:

```
import outlines schema = '''{ "title": "Character", "type": "object", "properties": { "name": { "title": "Name", "maxLength": 10, "type": "string" }, "age": { "title": "Age", "type": "integer" }, "armor": {"$ref": "#/definitions/Armor"}, "weapon": {"$ref": "#/definitions/Weapon"}, "strength": { "title": "Strength", "type": "integer" } }, "required": ["name", "age", "armor", "weapon", "strength"], "definitions": { "Armor": { "title": "Armor", "description": "An enumeration.", "enum": ["leather", "chainmail", "plate"], "type": "string" }, "Weapon": { "title": "Weapon", "description": "An enumeration.", "enum": ["sword", "axe", "mace", "spear", "bow", "crossbow"], "type": "string" } } }''' model = outlines.models.transformers("microsoft/Phi-3-mini-4k-instruct") generator = outlines.generate.json(model, schema) character = generator("Give me a character description")
```

### Using context-free grammars to guide generation

[](#using-context-free-grammars-to-guide-generation)

Formal grammars rule the world, and Outlines makes them rule LLMs too. You can pass any context-free grammar in the EBNF format and Outlines will generate an output that is valid to this grammar:

```
import outlines arithmetic_grammar = """ ?start: expression ?expression: term (("+" | "-") term)* ?term: factor (("*" | "/") factor)* ?factor: NUMBER | "-" factor | "(" expression ")" %import common.NUMBER """ model = outlines.models.transformers("WizardLM/WizardMath-7B-V1.1") generator = outlines.generate.cfg(model, arithmetic_grammar) sequence = generator("Alice had 4 apples and Bob ate 2. Write an expression for Alice's apples:") print(sequence) # (8-2)
```

This was a very simple grammar, and you can use `outlines.generate.cfg` to generate syntactically valid Python, SQL, and much more than this. Any kind of structured text, really. All you have to do is search for "X EBNF grammar" on the web, and take a look at the [Outlines `grammars` module](https://github.com/dottxt-ai/outlines/tree/main/outlines/grammars).

### Open functions

[](#open-functions)

Outlines can infer the structure of the output from the signature of a function. The result is a dictionary, and can be passed directly to the function using the usual dictionary expansion syntax `**`:

```
import outlines def add(a: int, b: int): return a + b model = outlines.models.transformers("WizardLM/WizardMath-7B-V1.1") generator = outlines.generate.json(model, add) result = generator("Return json with two integers named a and b respectively. a is odd and b even.") print(add(**result)) # 3
```

A great advantage of passing functions directly to specify the structure is that the structure of the LLM will change with the function's definition. No need to change the code at several places!

You can also embed various functions into an enum to generate params:

```
from enum import Enum from functools import partial import outlines def add(a: int, b: int) -> int: return a + b def mul(c: float, d: float) -> float: return c * d class Operation(Enum): add = partial(add) mul = partial(mul) model = outlines.models.transformers("WizardLM/WizardMath-7B-V1.1") generator = outlines.generate.json(model, Operation) result = generator("Return json with two float named c and d respectively. c is negative and d greater than 1.0.") print(result) # {'c': -3.14, 'd': 1.5}
```

## Prompting

[](#prompting)

Building prompts can get messy. **Outlines** makes it easier to write and manage prompts by encapsulating templates inside "template functions".

These functions make it possible to neatly separate the prompt logic from the general program logic; they can be imported from other modules and libraries.

Template functions require no superfluous abstraction, they use the Jinja2 templating engine to help build complex prompts in a concise manner:

```
import outlines examples = [ ("The food was disgusting", "Negative"), ("We had a fantastic night", "Positive"), ("Recommended", "Positive"), ("The waiter was rude", "Negative") ] @outlines.prompt def labelling(to_label, examples): """You are a sentiment-labelling assistant. {% for example in examples %} {{ example[0] }} // {{ example[1] }} {% endfor %} {{ to_label }} // """ model = outlines.models.transformers("microsoft/Phi-3-mini-4k-instruct") prompt = labelling("Just awesome", examples) answer = outlines.generate.text(model)(prompt, max_tokens=100)
```

## Join us

[](#join-us)

  * üí° **Have an idea?** Come chat with us on [Discord](https://discord.gg/R9DSu34mGd)
  * üî® **Want to contribute?** Consult our [contribution guide](https://dottxt-ai.github.io/outlines/latest/community/contribute/).
  * üêû **Found a bug?** Open an [issue](https://github.com/dottxt-ai/outlines/issues)



## Cite Outlines

[](#cite-outlines)

```
`@article{willard2023efficient, title={Efficient Guided Generation for LLMs}, author={Willard, Brandon T and Louf, R{\'e}mi}, journal={arXiv preprint arXiv:2307.09702}, year={2023} } `
```

## About

Structured Text Generation 

[dottxt-ai.github.io/outlines/](https://dottxt-ai.github.io/outlines/ "https://dottxt-ai.github.io/outlines/")

### Topics

[ json ](/topics/json "Topic: json") [ regex ](/topics/regex "Topic: regex") [ cfg ](/topics/cfg "Topic: cfg") [ symbolic-ai ](/topics/symbolic-ai "Topic: symbolic-ai") [ prompt-engineering ](/topics/prompt-engineering "Topic: prompt-engineering") [ llms ](/topics/llms "Topic: llms") [ generative-ai ](/topics/generative-ai "Topic: generative-ai") [ structured-generation ](/topics/structured-generation "Topic: structured-generation")

### Resources

[ Readme ](#readme-ov-file)

### License

[ Apache-2.0 license ](#Apache-2.0-1-ov-file)

[ Activity](/dottxt-ai/outlines/activity)

[ Custom properties](/dottxt-ai/outlines/custom-properties)

### Stars

[ **10.4k** stars](/dottxt-ai/outlines/stargazers)

### Watchers

[ **51** watching](/dottxt-ai/outlines/watchers)

### Forks

[ **545** forks](/dottxt-ai/outlines/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fdottxt-ai%2Foutlines&report=dottxt-ai+%28user%29)

##  [Releases 60](/dottxt-ai/outlines/releases)

[ Outlines v0.1.13 Latest  Jan 15, 2025 ](/dottxt-ai/outlines/releases/tag/0.1.13)

[+ 59 releases](/dottxt-ai/outlines/releases)

##  [Used by 1.1k](/dottxt-ai/outlines/network/dependents)

[

  * ![@eingrid](https://avatars.githubusercontent.com/u/17329902?s=64&v=4)
  * ![@Wang-Haining](https://avatars.githubusercontent.com/u/54771420?s=64&v=4)
  * ![@iRaduS](https://avatars.githubusercontent.com/u/21007741?s=64&v=4)
  * ![@QFOI](https://avatars.githubusercontent.com/u/43920293?s=64&v=4)
  * ![@MagnusS0](https://avatars.githubusercontent.com/u/97634880?s=64&v=4)
  * ![@prhbrt](https://avatars.githubusercontent.com/u/7011110?s=64&v=4)
  * ![@UpstageAI](https://avatars.githubusercontent.com/u/13376165?s=64&v=4)
  * ![@DarioushK1](https://avatars.githubusercontent.com/u/28906512?s=64&v=4)

+ 1,067  ](/dottxt-ai/outlines/network/dependents)

##  [Contributors 129](/dottxt-ai/outlines/graphs/contributors)

  * [ ![@rlouf](https://avatars.githubusercontent.com/u/3885044?s=64&v=4) ](https://github.com/rlouf)
  * [ ![@brandonwillard](https://avatars.githubusercontent.com/u/971601?s=64&v=4) ](https://github.com/brandonwillard)
  * [ ![@lapp0](https://avatars.githubusercontent.com/u/2560255?s=64&v=4) ](https://github.com/lapp0)
  * [ ![@cpfiffer](https://avatars.githubusercontent.com/u/422990?s=64&v=4) ](https://github.com/cpfiffer)
  * [ ![@benlipkin](https://avatars.githubusercontent.com/u/38060297?s=64&v=4) ](https://github.com/benlipkin)
  * [ ![@RobinPicard](https://avatars.githubusercontent.com/u/83579270?s=64&v=4) ](https://github.com/RobinPicard)
  * [ ![@alonsosilvaallende](https://avatars.githubusercontent.com/u/30263736?s=64&v=4) ](https://github.com/alonsosilvaallende)
  * [ ![@parkervg](https://avatars.githubusercontent.com/u/44219290?s=64&v=4) ](https://github.com/parkervg)
  * [ ![@eitanturok](https://avatars.githubusercontent.com/u/150733043?s=64&v=4) ](https://github.com/eitanturok)
  * [ ![@yvan-sraka](https://avatars.githubusercontent.com/u/705213?s=64&v=4) ](https://github.com/yvan-sraka)
  * [ ![@leloykun](https://avatars.githubusercontent.com/u/14250344?s=64&v=4) ](https://github.com/leloykun)
  * [ ![@saattrupdan](https://avatars.githubusercontent.com/u/47701536?s=64&v=4) ](https://github.com/saattrupdan)
  * [ ![@jrysana](https://avatars.githubusercontent.com/u/51100181?s=64&v=4) ](https://github.com/jrysana)
  * [ ![@jqueguiner](https://avatars.githubusercontent.com/u/690878?s=64&v=4) ](https://github.com/jqueguiner)



[+ 115 contributors](/dottxt-ai/outlines/graphs/contributors)

## Languages

  * [ Python 99.9% ](/dottxt-ai/outlines/search?l=python)
  * [ Dockerfile 0.1% ](/dottxt-ai/outlines/search?l=dockerfile)



## Footer

[ ](https://github.com "GitHub") ¬© 2025 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You can‚Äôt perform that action at this time. 
