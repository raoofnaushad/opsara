{
    "id": "bf28c9fb11acb1c916eee4c2f5cb8bd1",
    "metadata": {
        "id": "bf28c9fb11acb1c916eee4c2f5cb8bd1",
        "url": "https://duckdb.org/",
        "title": "DuckDB â€“ An in-process SQL OLAP database management system",
        "properties": {
            "description": "DuckDB is an in-process SQL OLAP database management system. Simple, feature-rich, fast & open source.",
            "keywords": null,
            "author": "GitHub User",
            "og:title": "An in-process SQL OLAP database management system",
            "og:locale": "en_US",
            "og:description": "DuckDB is an in-process SQL OLAP database management system. Simple, feature-rich, fast & open source.",
            "og:url": "https://duckdb.org/",
            "og:site_name": "DuckDB",
            "og:image": "https://duckdb.org/images/sharingduckdb.jpg",
            "og:type": "website",
            "twitter:card": "summary",
            "twitter:site": "@DuckDB",
            "twitter:creator": "@GitHub User"
        }
    },
    "parent_metadata": {
        "id": "bfc462a051071cb54c047cc2dea06ca5",
        "url": "https://www.notion.so/Databases-bfc462a051071cb54c047cc2dea06ca5",
        "title": "ðŸ“™Â Databases",
        "properties": {
            "Type": "Node"
        }
    },
    "content": "[![DuckDB Logo for Download](/images/logo-dl/DuckDB_Logo-horizontal.svg)](https://duckdb.org/)\n\n[Documentation](/docs/)\n\n  * [Getting Started](/docs)\n  * [Installation](/docs/installation/)\n  * [Guides](/docs/guides/index)\n  * [Data Import](/docs/data/overview)\n  * [Client APIs](/docs/api/overview)\n  * [SQL Introduction](/docs/sql/introduction)\n  * [Why DuckDB](/why_duckdb)\n  * [FAQ](/faq)\n\n\n\n[Resources](#)\n\n  * [Blog](/news/)\n  * [Media](/media/)\n  * [Events](/events/)\n  * [Webshop](https://shop.duckdb.org/)\n\n\n\n[GitHub 25.9k](https://github.com/duckdb/duckdb)\n\n[Support](https://duckdblabs.com/#support)\n\n[Support](https://duckdblabs.com/#support)\n\nSearch Shortcut cmd + k | ctrl + k\n\n#  DuckDB is a fast \n\n|\n\ndatabase system \n\nQuery and transform your data anywhere using DuckDB's feature-rich SQL dialect\n\n[Installation](#quickinstall) [Documentation](/docs/)\n\n  * SQL\n  * Python\n  * R\n  * Java\n  * Node.js\n\n\n\n12345678\n\n```\n`-- Get the top-3 busiest train stations SELECT station_name, count(*) AS num_services FROM train_services GROUP BY ALL ORDER BY num_services DESC LIMIT 3;`\n```\n\nAggregation query Join query Read remote CSV files Read remote Parquet files Spatial extension\n\nAggregation query\n\n  * Aggregation query\n  * Join query\n  * Read remote CSV files\n  * Read remote Parquet files\n  * Spatial extension\n\n\n\n[Live demo](https://shell.duckdb.org/#queries=v0,%20%20-Create-table-from-Parquet-file%0ACREATE-TABLE-train_services-AS%0A----FROM-'s3%3A%2F%2Fduckdb%20blobs%2Ftrain_services.parquet'~,%20%20-Get-the-top%203-busiest-train-stations%0ASELECT-station_name%2C-count\\(*\\)-AS-num_services%0AFROM-train_services%0AGROUP-BY-ALL%0AORDER-BY-num_services-DESC%0ALIMIT-3~)\n\n#  DuckDB at a glance \n\n###  Simple \n\nDuckDB is easy to install and deploy. It has zero external dependencies and runs in-process in its host application or as a single binary.\n\n[Read more](why_duckdb#simple)\n\n###  Portable \n\nDuckDB runs on Linux, macOS, Windows, and all popular hardware architectures. It has idiomatic client APIs for major programming languages.\n\n[Read more](why_duckdb#portable)\n\n###  Feature-rich \n\nDuckDB offers a rich SQL dialect. It can read and write file formats such as CSV, Parquet, and JSON, to and from the local file system and remote endpoints such as S3 buckets.\n\n[Read more](why_duckdb#feature-rich)\n\n###  Fast \n\nDuckDB runs analytical queries at blazing speed thanks to its columnar engine, which supports parallel execution and can process larger-than-memory workloads.\n\n[Read more](why_duckdb#fast)\n\n###  Extensible \n\nDuckDB is extensible by third-party features such as new data types, functions, file formats and new SQL syntax.\n\n[Read more](why_duckdb#extensible)\n\n###  Free \n\nDuckDB and its core extensions are open-source under the permissive MIT License.\n\n[Read more](why_duckdb#free)\n\n#  Installation \n\nDuckDB is seamlessly integrated with major programming languages. It can be installed in less than 20 seconds on most platforms.\n\n[More installation options](/docs/installation/)\n\n  * Command line\n  * Python\n  * R\n  * Java\n  * Node.js\n  * ODBC\n  * Rust\n  * Go\n\n\n\nCommand Line Python R Java Node.js ODBC Rust Go\n\nCommand Line\n\n  * Command Line\n  * Python\n  * R\n  * Java\n  * Node.js\n  * ODBC\n  * Rust\n  * Go\n\n\n\n```\n`brew install duckdb`\n```\n\nLatest release: DuckDB 1.1.3 |  System detected: Windows\n\n```\n`pip install duckdb`\n```\n\n```\n`install.packages(\"duckdb\")`\n```\n\n```\n`<dependency> <groupId>org.duckdb</groupId> <artifactId>duckdb_jdbc</artifactId> <version>1.1.3</version> </dependency>`\n```\n\n```\n`npm install @duckdb/node-api`\n```\n\n```\n`brew install duckdb`\n```\n\n[https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip](https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip)\n\n```\n`winget install DuckDB.cli`\n```\n\n[duckdb_odbc-osx-universal.zip](https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_odbc-osx-universal.zip)\n\n[https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_odbc-linux-amd64.zip](https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_odbc-linux-amd64.zip)\n\n[https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_odbc-windows-amd64.zip](https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_odbc-windows-amd64.zip)\n\n```\n`cargo add duckdb --features bundled`\n```\n\n```\n`go get github.com/marcboeker/go-duckdb`\n```\n\n#  Blog \n\n[](/2025/01/17/raspberryi-pi-tpch.html \"TPC-H SF300 on a Raspberry Pi\")\n\n![TPC-H SF300 on a Raspberry Pi](/images/blog/thumbs/raspberry-pi.svg)\n\nbenchmark\n\n###  TPC-H SF300 on a Raspberry Pi \n\n2025-01-17\n\nGÃ¡bor SzÃ¡rnyas\n\n[](/2025/01/10/union-by-name.html \"Vertical Stacking as the Relational Model Intended: UNION ALL BY NAME\")\n\n![Vertical Stacking as the Relational Model Intended: UNION ALL BY NAME](/images/blog/thumbs/union-all-by-name.svg)\n\nusing DuckDB\n\n###  Vertical Stacking as the Relational Model Intended: UNION ALL BY NAME \n\n2025-01-10\n\nAlex Monahan\n\n[ All blog posts ](https://duckdb.org/news)\n\n#  Upcoming events \n\n[](/events/2025/01/31/duckcon6/ \"DuckCon #6 in Amsterdam\")\n\n![DuckCon #6 in Amsterdam](/images/blog/thumbs/duckcon-6-amsterdam.svg)\n\n2025-01-31 DuckCon\n\n###  DuckCon #6 in Amsterdam \n\nPakhuis de Zwijger, Amsterdam\n\nMark Raasveldt, Hannes MÃ¼hleisen, Gabor Szarnyas, Kelly de Smit\n\n[](/events/2025/02/20/duckdb-amsterdam-meetup-2/ \"DuckDB Amsterdam Meetup #2\")\n\n![DuckDB Amsterdam Meetup #2](/images/blog/thumbs/duckdb-amsterdam-meetup-2.svg)\n\n2025-02-20 meetup\n\n###  DuckDB Amsterdam Meetup #2 \n\nXebia, Amsterdam\n\nDuckDB meetup organizers\n\n[ All events ](/events)\n\nAggregation query Join query Read CSV files Read Parquet files from S3 Spatial extension\n\nSQL query Pandas integration Custom UDFs\n\nSQL query dplyr integration\n\nSQL query Appender\n\nSQL query Web service integration\n\n```\n`-- Get the top-3 busiest train stations SELECT station_name, count(*) AS num_services FROM train_services GROUP BY ALL ORDER BY num_services DESC LIMIT 3;`\n```\n\n```\n`-- Load CSV file to a table. DuckDB auto-detects -- the CSV's format, column name and types CREATE TABLE stations AS FROM 's3://duckdb-blobs/stations.csv';`\n```\n\n```\n`-- Directly query Parquet file in S3 SELECT station_name, count(*) AS num_services FROM 's3://duckdb-blobs/train_services.parquet' GROUP BY ALL ORDER BY num_services DESC LIMIT 10;`\n```\n\n```\n`-- Find the top-3 longest domestic train routes SELECT s1.name_short, s2.name_short, distances.distance FROM distances JOIN stations s1 ON distances.station1 = s1.code JOIN stations s2 ON distances.station2 = s2.code WHERE s1.country = s2.country AND s1.code < s2.code ORDER BY distance DESC LIMIT 3;`\n```\n\n```\n`-- What are the top-3 closest Intercity stations -- using aerial distance? SELECT s1.name_long AS station1, s2.name_long AS station2, ST_Distance( ST_Point(s1.geo_lng, s1.geo_lat), ST_Point(s2.geo_lng, s2.geo_lat) ) * 111_139 AS distance FROM stations s1, stations s2 WHERE s1.type LIKE '%Intercity%' AND s2.type LIKE '%Intercity%' AND s1.id < s2.id ORDER BY distance ASC LIMIT 3;`\n```\n\n```\n`# Get the top-3 busiest train stations import duckdb duckdb.sql(\"\"\" SELECT station, count(*) AS num_services FROM train_services GROUP BY ALL ORDER BY num_services DESC LIMIT 3; \"\"\")`\n```\n\n```\n`# Reading and writing Pandas dataframes import pandas as pd import duckdb df_in = pd.DataFrame({ 'station': ['Delft', 'Delft', 'Gouda', 'Gouda'], 'day': ['Mon', 'Tue', 'Mon', 'Tue'], 'num_services' : [22, 20, 27, 25]}) # Run query on a dataframe and return a dataframe df_out = duckdb.sql(\"\"\" SELECT station, sum(num_services) FROM df_in GROUP BY station \"\"\").to_df()`\n```\n\n```\n`# Create custom user-defined function import duckdb def add_plus_one(x): return x + 1 con = duckdb.connect() con.create_function('add_plus_one', add_plus_one, ['BIGINT'], 'BIGINT', type='native') con.sql(\"\"\" SELECT sum(add_plus_one(i)) FROM range(10) tbl(i); \"\"\")`\n```\n\n```\n`# Find the largest sepals & petals in the Iris data setlibrary(duckdb)con<-dbConnect(duckdb())duckdb_register(con,\"iris\",iris)query<-r'( SELECT count(*) AS num_observations, max(\"Sepal.Width\") AS max_width, max(\"Petal.Length\") AS max_petal_length FROM iris WHERE \"Sepal.Length\" > 5 GROUP BY ALL )'dbGetQuery(con,query)`\n```\n\n```\n`# Integration with dplyr# Find the largest sepals and petals in the Iris data setlibrary(\"duckdb\")library(\"dplyr\")con<-dbConnect(duckdb())duckdb_register(con,\"iris\",iris)tbl(con,\"iris\")|>filter(Sepal.Length>5)|>group_by(Species)|>summarize(num_observations=count(),max_width=max(Sepal.Width),max_petal_length=max(Petal.Length),na.rm=TRUE)|>collect()`\n```\n\n```\n`// Get a list of train stations by traffic Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement st = conn.createStatement(); ResultSet rs = st.executeQuery( \"SELECT station_name, count(*) AS num_services\\n\" + \"FROM train_services\\n\" + \"GROUP BY ALL\\n\" + \"ORDER BY num_services DESC;\"); System.out.println(rs.next());`\n```\n\n```\n`// Perform bulk inserts using the Appender API DuckDBConnection conn = (DuckDBConnection) DriverManager.getConnection(\"jdbc:duckdb:\"); Statement st = conn.createStatement(); st.execute(\"CREATE TABLE person (name VARCHAR, age INT)\"); var appender = conn.createAppender( DuckDBConnection.DEFAULT_SCHEMA, \"person\"); appender.beginRow(); appender.append(\"MC Ducky\"); appender.append(49); appender.endRow(); appender.close();`\n```\n\n```\n`// Get the top-3 busiest train stations in May import { DuckDBInstance } from '@duckdb/node-api'; const instance = await DuckDBInstance.create(); const connection = await instance.connect(); const reader = await connection.runAndReadAll( `SELECT station_name, count(*) AS num_services FROM 'http://blobs.duckdb.org/train_services.parquet' WHERE monthname(date) = 'May' GROUP BY ALL ORDER BY num_services DESC LIMIT 3;` ); console.table(reader.getRows());`\n```\n\n```\n`// Web Service Integration: // create endpoint to generate numbers import express from \"express\"; import { DuckDBInstance } from '@duckdb/node-api'; const app = express(); const instance = await DuckDBInstance.create(); const connection = await instance.connect(); app.get(\"/getnumbers\", async (req, res) => { const reader = await connection.runAndReadAll(\"SELECT random() AS num FROM range(10)\"); res.end(JSON.stringify(reader.getRows())); }); app.listen(8082, () => console.log(\"Go to: http://localhost:8082/getnumbers\"));`\n```\n\n###### Documentation\n\n[Getting Started](https://duckdb.org/docs) [Installation](https://duckdb.org/docs/installation/) [Guides](https://duckdb.org/docs/guides/overview) [Data Import](https://duckdb.org/docs/data/overview) [Client APIs](https://duckdb.org/docs/api/overview) [SQL Introduction](https://duckdb.org/docs/sql/introduction) [Why DuckDB](https://duckdb.org/why_duckdb) [FAQ](https://duckdb.org/faq)\n\n###### Resources\n\n[Blog](https://duckdb.org/news) [Media](https://duckdb.org/media) [Events](https://duckdb.org/events) [Webshop](https://shop.duckdb.org/) [Code of Conduct](https://duckdb.org/code_of_conduct) [Trademark Use](https://duckdb.org/trademark_guidelines) [Status Page](https://stats.uptimerobot.com/YLuLbtq2gR) [RSS Feed](https://duckdb.org/feed.xml)\n\n###### Organizations\n\n[DuckDB Foundation](https://duckdb.org/foundation/) [DuckDB Labs](https://duckdblabs.com/)\n\n###### Community\n\n[Community Extensions](https://duckdb.org/community_extensions/) [Bluesky](https://bsky.app/profile/duckdb.org) [LinkedIn](https://www.linkedin.com/company/duckdb/posts) [X (Twitter)](https://twitter.com/duckdb) [Discord](https://discord.duckdb.org) [Stack Overflow](https://stackoverflow.com/questions/tagged/duckdb)\n\nÂ© 2025 DuckDB Foundation, Amsterdam NL\n",
    "content_quality_score": 0.8,
    "summary": null,
    "child_urls": [
        "https://duckdb.org/",
        "https://duckdb.org/docs/",
        "https://duckdb.org/docs",
        "https://duckdb.org/docs/installation/",
        "https://duckdb.org/docs/guides/index",
        "https://duckdb.org/docs/data/overview",
        "https://duckdb.org/docs/api/overview",
        "https://duckdb.org/docs/sql/introduction",
        "https://duckdb.org/why_duckdb",
        "https://duckdb.org/faq",
        "https://duckdb.org/news/",
        "https://duckdb.org/media/",
        "https://duckdb.org/events/",
        "https://shop.duckdb.org/",
        "https://duckdb.org/#quickinstall",
        "https://shell.duckdb.org/#queries=v0,%20%20-Create-table-from-Parquet-file%0ACREATE-TABLE-train_services-AS%0A----FROM-'s3%3A%2F%2Fduckdb%20blobs%2Ftrain_services.parquet'~,%20%20-Get-the-top%203-busiest-train-stations%0ASELECT-station_name%2C-count(*)-AS-num_services%0AFROM-train_services%0AGROUP-BY-ALL%0AORDER-BY-num_services-DESC%0ALIMIT-3~",
        "https://duckdb.org/why_duckdb#simple",
        "https://duckdb.org/why_duckdb#portable",
        "https://duckdb.org/why_duckdb#feature-rich",
        "https://duckdb.org/why_duckdb#fast",
        "https://duckdb.org/why_duckdb#extensible",
        "https://duckdb.org/why_duckdb#free",
        "https://duckdb.org/2025/01/17/raspberryi-pi-tpch.html",
        "https://duckdb.org/2025/01/10/union-by-name.html",
        "https://duckdb.org/news",
        "https://duckdb.org/events/2025/01/31/duckcon6/",
        "https://duckdb.org/events/2025/02/20/duckdb-amsterdam-meetup-2/",
        "https://duckdb.org/events",
        "https://duckdb.org/docs/guides/overview",
        "https://duckdb.org/media",
        "https://duckdb.org/code_of_conduct",
        "https://duckdb.org/trademark_guidelines",
        "https://duckdb.org/feed.xml",
        "https://duckdb.org/foundation/",
        "https://duckdb.org/community_extensions/",
        "https://discord.duckdb.org",
        "https://github.com/duckdb/duckdb",
        "https://duckdblabs.com/#support",
        "https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip",
        "https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_odbc-osx-universal.zip",
        "https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_odbc-linux-amd64.zip",
        "https://github.com/duckdb/duckdb/releases/download/v1.1.0/duckdb_odbc-windows-amd64.zip",
        "https://stats.uptimerobot.com/YLuLbtq2gR",
        "https://duckdblabs.com/",
        "https://bsky.app/profile/duckdb.org",
        "https://www.linkedin.com/company/duckdb/posts",
        "https://twitter.com/duckdb",
        "https://stackoverflow.com/questions/tagged/duckdb"
    ]
}