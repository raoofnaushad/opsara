{
    "id": "a97dc6c6b4d5baef0e757d756f0e2e57",
    "metadata": {
        "id": "a97dc6c6b4d5baef0e757d756f0e2e57",
        "url": "https://www.tensorflow.org/recommenders/examples/basic_retrieval/",
        "title": "Recommending movies: retrieval  |  TensorFlow Recommenders",
        "properties": {
            "description": null,
            "keywords": null,
            "author": null,
            "og:site_name": "TensorFlow",
            "og:type": "website",
            "og:title": "Recommending movies: retrieval  |  TensorFlow Recommenders",
            "og:url": "https://www.tensorflow.org/recommenders/examples/basic_retrieval",
            "og:image": "https://www.tensorflow.org/static/site-assets/images/project-logos/tensorflow-recommenders-logo-social.png",
            "og:image:width": "1200",
            "og:image:height": "675",
            "og:locale": "en",
            "twitter:card": "summary_large_image"
        }
    },
    "parent_metadata": {
        "id": "f7d017a5acf054867a0a47d93f67a9a8",
        "url": "https://www.notion.so/RecSys-Two-tower-architecture-f7d017a5acf054867a0a47d93f67a9a8",
        "title": "RecSys: Two-tower architecture",
        "properties": {
            "Type": [
                "Leaf"
            ]
        }
    },
    "content": "[ ![TensorFlow](https://www.gstatic.com/devrel-devsite/prod/vda41147226ae308b24384f785d31d739107d2716272d99cd11c490ff3892954d/tensorflow/images/lockup.svg) ](/)\n\n[ Install ](https://www.tensorflow.org/install) [ Learn ](https://www.tensorflow.org/learn) [](#)\n\n  * [ Introduction  New to TensorFlow?  ](https://www.tensorflow.org/learn)\n  * [ Tutorials  Learn how to use TensorFlow with end-to-end examples  ](https://www.tensorflow.org/tutorials)\n  * [ Guide  Learn framework concepts and components  ](https://www.tensorflow.org/guide)\n  * [ Learn ML  Educational resources to master your path with TensorFlow  ](https://www.tensorflow.org/resources/learn-ml)\n\n\n\n[ API ](https://www.tensorflow.org/api) [](#)\n\n  * [ TensorFlow (v2.16.1)  ](https://www.tensorflow.org/api/stable)\n  * [ Versions…  ](https://www.tensorflow.org/versions)\n\n\n\n  * [ TensorFlow.js  ](https://js.tensorflow.org/api/latest/)\n  * [ TensorFlow Lite  ](https://www.tensorflow.org/lite/api_docs)\n  * [ TFX  ](https://www.tensorflow.org/tfx/api_docs)\n\n\n\n[ Resources ](https://www.tensorflow.org/resources) [](#)\n\n  * LIBRARIES\n  * [ TensorFlow.js  Develop web ML applications in JavaScript  ](https://www.tensorflow.org/js)\n  * [ TensorFlow Lite  Deploy ML on mobile, microcontrollers and other edge devices  ](https://www.tensorflow.org/lite)\n  * [ TFX  Build production ML pipelines  ](https://www.tensorflow.org/tfx)\n  * [ All libraries  Create advanced models and extend TensorFlow  ](https://www.tensorflow.org/resources/libraries-extensions)\n\n\n\n  * RESOURCES\n  * [ Models & datasets  Pre-trained models and datasets built by Google and the community  ](https://www.tensorflow.org/resources/models-datasets)\n  * [ Tools  Tools to support and accelerate TensorFlow workflows  ](https://www.tensorflow.org/resources/tools)\n  * [ Responsible AI  Resources for every stage of the ML workflow  ](https://www.tensorflow.org/responsible_ai)\n  * [ Recommendation systems  Build recommendation systems with open source tools  ](https://www.tensorflow.org/resources/recommendation-systems)\n\n\n\n[ Community ](https://www.tensorflow.org/community) [](#)\n\n  * [ Groups  User groups, interest groups and mailing lists  ](https://www.tensorflow.org/community/groups)\n  * [ Contribute  Guide for contributing to code and documentation  ](https://www.tensorflow.org/community/contribute)\n  * [ Blog  Stay up to date with all things TensorFlow  ](https://blog.tensorflow.org/)\n  * [ Forum  Discussion platform for the TensorFlow community  ](https://discuss.tensorflow.org)\n\n\n\n[ Why TensorFlow ](https://www.tensorflow.org/about) [](#)\n\n  * [ About  ](https://www.tensorflow.org/about)\n  * [ Case studies  ](https://www.tensorflow.org/about/case-studies)\n\n\n\n`/`\n\n  * English\n  * Español – América Latina\n  * Français\n  * Indonesia\n  * Italiano\n  * Polski\n  * Português – Brasil\n  * Tiếng Việt\n  * Türkçe\n  * Русский\n  * עברית\n  * العربيّة\n  * فارسی\n  * हिंदी\n  * বাংলা\n  * ภาษาไทย\n  * 中文 – 简体\n  * 日本語\n  * 한국어\n\n[ GitHub ](//github.com/tensorflow) Sign in\n\n  * [ Recommenders ](https://www.tensorflow.org/recommenders)\n\n\n\n[ Overview ](https://www.tensorflow.org/recommenders) [ Guide & Tutorials ](https://www.tensorflow.org/recommenders/examples/quickstart) [ API ](https://www.tensorflow.org/recommenders/api_docs/python/tfrs/all_symbols)\n\n[ ![TensorFlow](https://www.gstatic.com/devrel-devsite/prod/vda41147226ae308b24384f785d31d739107d2716272d99cd11c490ff3892954d/tensorflow/images/lockup.svg) ](/)\n\n  * [ Install  ](/install)\n  * [ Learn  ](/learn)\n    * More \n  * [ API  ](/api)\n    * More \n  * [ Resources  ](/resources)\n    * More \n    * [ Overview  ](/recommenders)\n    * [ Guide & Tutorials  ](/recommenders/examples/quickstart)\n    * [ API  ](/recommenders/api_docs/python/tfrs/all_symbols)\n  * [ Community  ](/community)\n    * More \n  * [ Why TensorFlow  ](/about)\n    * More \n  * [ GitHub  ](//github.com/tensorflow)\n\n\n\n  * [Quickstart](/recommenders/examples/quickstart)\n  * Beginner\n\n  * Recommender basics\n\n    * [Recommending movies: retrieval](/recommenders/examples/basic_retrieval)\n    * [Recommending movies: ranking](/recommenders/examples/basic_ranking)\n    * [Retrieval with distribution strategy](/recommenders/examples/diststrat_retrieval)\n    * [Retrieval with sequential model](/recommenders/examples/sequential_retrieval)\n    * [Retrieval with TFX](/tfx/tutorials/tfx/recommenders)\n    * [Ranking with TFX](/recommenders/examples/ranking_tfx)\n    * [Large Embeddings with TPU](/recommenders/examples/tpu_embedding_layer)\n\n  * Using rich features\n\n    * [Feature preprocessing](/recommenders/examples/featurization)\n    * [Leveraging context features](/recommenders/examples/context_features)\n    * [Building deep retrieval models](/recommenders/examples/deep_recommenders)\n\n  * Intermediate\n\n  * [Multitask recommenders](/recommenders/examples/multitask)\n  * [Cross networks](/recommenders/examples/dcn)\n  * [Efficient serving](/recommenders/examples/efficient_serving)\n  * [Listwise ranking](/recommenders/examples/listwise_ranking)\n\n\n  * [ Introduction  ](/learn)\n  * [ Tutorials  ](/tutorials)\n  * [ Guide  ](/guide)\n  * [ Learn ML  ](/resources/learn-ml)\n\n\n  * [ TensorFlow (v2.16.1)  ](/api/stable)\n  * [ Versions…  ](/versions)\n  * [ TensorFlow.js  ](https://js.tensorflow.org/api/latest/)\n  * [ TensorFlow Lite  ](/lite/api_docs)\n  * [ TFX  ](/tfx/api_docs)\n\n\n  * LIBRARIES \n  * [ TensorFlow.js  ](/js)\n  * [ TensorFlow Lite  ](/lite)\n  * [ TFX  ](/tfx)\n  * [ All libraries  ](/resources/libraries-extensions)\n  * RESOURCES \n  * [ Models & datasets  ](/resources/models-datasets)\n  * [ Tools  ](/resources/tools)\n  * [ Responsible AI  ](/responsible_ai)\n  * [ Recommendation systems  ](/resources/recommendation-systems)\n\n\n  * [ Groups  ](/community/groups)\n  * [ Contribute  ](/community/contribute)\n  * [ Blog  ](https://blog.tensorflow.org/)\n  * [ Forum  ](https://discuss.tensorflow.org)\n\n\n  * [ About  ](/about)\n  * [ Case studies  ](/about/case-studies)\n\n\n\n  * [ TensorFlow ](https://www.tensorflow.org/)\n  * [ Resources ](https://www.tensorflow.org/resources)\n  * [ Recommenders ](https://www.tensorflow.org/recommenders)\n  * [ Guide & Tutorials ](https://www.tensorflow.org/recommenders/examples/quickstart)\n\n\n\n#  Recommending movies: retrieval \n\nStay organized with collections  Save and categorize content based on your preferences. \n\n[![](https://www.tensorflow.org/images/tf_logo_32px.png)View on TensorFlow.org](https://www.tensorflow.org/recommenders/examples/basic_retrieval) |  [![](https://www.tensorflow.org/images/colab_logo_32px.png)Run in Google Colab](https://colab.research.google.com/github/tensorflow/recommenders/blob/main/docs/examples/basic_retrieval.ipynb) |  [![](https://www.tensorflow.org/images/GitHub-Mark-32px.png)View source on GitHub](https://github.com/tensorflow/recommenders/blob/main/docs/examples/basic_retrieval.ipynb) |  [![](https://www.tensorflow.org/images/download_logo_32px.png)Download notebook](https://storage.googleapis.com/tensorflow_docs/recommenders/docs/examples/basic_retrieval.ipynb)  \n---|---|---|---  \n  \nReal-world recommender systems are often composed of two stages:\n\n  1. The retrieval stage is responsible for selecting an initial set of hundreds of candidates from all possible candidates. The main objective of this model is to efficiently weed out all candidates that the user is not interested in. Because the retrieval model may be dealing with millions of candidates, it has to be computationally efficient.\n  2. The ranking stage takes the outputs of the retrieval model and fine-tunes them to select the best possible handful of recommendations. Its task is to narrow down the set of items the user may be interested in to a shortlist of likely candidates.\n\n\n\nIn this tutorial, we're going to focus on the first stage, retrieval. If you are interested in the ranking stage, have a look at our [ranking](/recommenders/examples/basic_ranking) tutorial.\n\nRetrieval models are often composed of two sub-models:\n\n  1. A query model computing the query representation (normally a fixed-dimensionality embedding vector) using query features.\n  2. A candidate model computing the candidate representation (an equally-sized vector) using the candidate features\n\n\n\nThe outputs of the two models are then multiplied together to give a query-candidate affinity score, with higher scores expressing a better match between the candidate and the query.\n\nIn this tutorial, we're going to build and train such a two-tower model using the Movielens dataset.\n\nWe're going to:\n\n  1. Get our data and split it into a training and test set.\n  2. Implement a retrieval model.\n  3. Fit and evaluate it.\n  4. Export it for efficient serving by building an approximate nearest neighbours (ANN) index.\n\n\n\n## The dataset\n\nThe Movielens dataset is a classic dataset from the [GroupLens](https://grouplens.org/datasets/movielens/) research group at the University of Minnesota. It contains a set of ratings given to movies by a set of users, and is a workhorse of recommender system research.\n\nThe data can be treated in two ways:\n\n  1. It can be interpreted as expressesing which movies the users watched (and rated), and which they did not. This is a form of implicit feedback, where users' watches tell us which things they prefer to see and which they'd rather not see.\n  2. It can also be seen as expressesing how much the users liked the movies they did watch. This is a form of explicit feedback: given that a user watched a movie, we can tell roughly how much they liked by looking at the rating they have given.\n\n\n\nIn this tutorial, we are focusing on a retrieval system: a model that predicts a set of movies from the catalogue that the user is likely to watch. Often, implicit data is more useful here, and so we are going to treat Movielens as an implicit system. This means that every movie a user watched is a positive example, and every movie they have not seen is an implicit negative example.\n\n## Imports\n\nLet's first get our imports out of the way.\n\n```\n`pipinstall-qtensorflow-recommenders` `pipinstall-q--upgradetensorflow-datasets` `pipinstall-qscann`\n``` ```\n`importos importpprint importtempfile fromtypingimport Dict, Text importnumpyasnp importtensorflowastf importtensorflow_datasetsastfds `\n``` ```\n2022-12-14 12:14:44.722984: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory 2022-12-14 12:14:44.723084: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory 2022-12-14 12:14:44.723093: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly. \n``` ```\n`importtensorflow_recommendersastfrs `\n```\n\n## Preparing the dataset\n\nLet's first have a look at the data.\n\nWe use the MovieLens dataset from [Tensorflow Datasets](https://www.tensorflow.org/datasets). Loading `movielens/100k_ratings` yields a `tf.data.Dataset` object containing the ratings data and loading `movielens/100k_movies` yields a `tf.data.Dataset` object containing only the movies data.\n\nNote that since the MovieLens dataset does not have predefined splits, all data are under `train` split.\n\n```\n`# Ratings data. ratings = tfds.load(\"movielens/100k-ratings\", split=\"train\") # Features of all the available movies. movies = tfds.load(\"movielens/100k-movies\", split=\"train\") `\n```\n\nThe ratings dataset returns a dictionary of movie id, user id, the assigned rating, timestamp, movie information, and user information:\n\n```\n`for x in ratings.take(1).as_numpy_iterator(): pprint.pprint(x) `\n``` ```\n{'bucketized_user_age': 45.0, 'movie_genres': array([7]), 'movie_id': b'357', 'movie_title': b\"One Flew Over the Cuckoo's Nest (1975)\", 'raw_user_age': 46.0, 'timestamp': 879024327, 'user_gender': True, 'user_id': b'138', 'user_occupation_label': 4, 'user_occupation_text': b'doctor', 'user_rating': 4.0, 'user_zip_code': b'53211'} 2022-12-14 12:14:51.221818: W tensorflow/core/kernels/data/cache_dataset_ops.cc:856] The calling iterator did not fully read the dataset being cached. In order to avoid unexpected truncation of the dataset, the partially cached contents of the dataset will be discarded. This can happen if you have an input pipeline similar to `dataset.cache().take(k).repeat()`. You should use `dataset.take(k).cache().repeat()` instead. \n```\n\nThe movies dataset contains the movie id, movie title, and data on what genres it belongs to. Note that the genres are encoded with integer labels.\n\n```\n`for x in movies.take(1).as_numpy_iterator(): pprint.pprint(x) `\n``` ```\n{'movie_genres': array([4]), 'movie_id': b'1681', 'movie_title': b'You So Crazy (1994)'} 2022-12-14 12:14:51.385630: W tensorflow/core/kernels/data/cache_dataset_ops.cc:856] The calling iterator did not fully read the dataset being cached. In order to avoid unexpected truncation of the dataset, the partially cached contents of the dataset will be discarded. This can happen if you have an input pipeline similar to `dataset.cache().take(k).repeat()`. You should use `dataset.take(k).cache().repeat()` instead. \n```\n\nIn this example, we're going to focus on the ratings data. Other tutorials explore how to use the movie information data as well to improve the model quality.\n\nWe keep only the `user_id`, and `movie_title` fields in the dataset.\n\n```\n`ratings = ratings.map(lambda x: { \"movie_title\": x[\"movie_title\"], \"user_id\": x[\"user_id\"], }) movies = movies.map(lambda x: x[\"movie_title\"]) `\n``` ```\nWARNING:tensorflow:From /tmpfs/src/tf_docs_env/lib/python3.9/site-packages/tensorflow/python/autograph/pyct/static_analysis/liveness.py:83: Analyzer.lamba_check (from tensorflow.python.autograph.pyct.static_analysis.liveness) is deprecated and will be removed after 2023-09-23. Instructions for updating: Lambda fuctions will be no more assumed to be used in the statement where they are used, or at least in the same block. https://github.com/tensorflow/tensorflow/issues/56089 WARNING:tensorflow:From /tmpfs/src/tf_docs_env/lib/python3.9/site-packages/tensorflow/python/autograph/pyct/static_analysis/liveness.py:83: Analyzer.lamba_check (from tensorflow.python.autograph.pyct.static_analysis.liveness) is deprecated and will be removed after 2023-09-23. Instructions for updating: Lambda fuctions will be no more assumed to be used in the statement where they are used, or at least in the same block. https://github.com/tensorflow/tensorflow/issues/56089 \n```\n\nTo fit and evaluate the model, we need to split it into a training and evaluation set. In an industrial recommender system, this would most likely be done by time: the data up to time \\\\(T\\\\) would be used to predict interactions after \\\\(T\\\\).\n\nIn this simple example, however, let's use a random split, putting 80% of the ratings in the train set, and 20% in the test set.\n\n```\n`tf.random.set_seed(42) shuffled = ratings.shuffle(100_000, seed=42, reshuffle_each_iteration=False) train = shuffled.take(80_000) test = shuffled.skip(80_000).take(20_000) `\n```\n\nLet's also figure out unique user ids and movie titles present in the data. \n\nThis is important because we need to be able to map the raw values of our categorical features to embedding vectors in our models. To do that, we need a vocabulary that maps a raw feature value to an integer in a contiguous range: this allows us to look up the corresponding embeddings in our embedding tables.\n\n```\n`movie_titles = movies.batch(1_000) user_ids = ratings.batch(1_000_000).map(lambda x: x[\"user_id\"]) unique_movie_titles = np.unique(np.concatenate(list(movie_titles))) unique_user_ids = np.unique(np.concatenate(list(user_ids))) unique_movie_titles[:10] `\n``` ```\narray([b\"'Til There Was You (1997)\", b'1-900 (1994)', b'101 Dalmatians (1996)', b'12 Angry Men (1957)', b'187 (1997)', b'2 Days in the Valley (1996)', b'20,000 Leagues Under the Sea (1954)', b'2001: A Space Odyssey (1968)', b'3 Ninjas: High Noon At Mega Mountain (1998)', b'39 Steps, The (1935)'], dtype=object) \n```\n\n## Implementing a model\n\nChoosing the architecture of our model is a key part of modelling.\n\nBecause we are building a two-tower retrieval model, we can build each tower separately and then combine them in the final model.\n\n### The query tower\n\nLet's start with the query tower.\n\nThe first step is to decide on the dimensionality of the query and candidate representations:\n\n```\n`embedding_dimension = 32 `\n```\n\nHigher values will correspond to models that may be more accurate, but will also be slower to fit and more prone to overfitting.\n\nThe second is to define the model itself. Here, we're going to use Keras preprocessing layers to first convert user ids to integers, and then convert those to user embeddings via an `Embedding` layer. Note that we use the list of unique user ids we computed earlier as a vocabulary:\n\n```\n`user_model = tf.keras.Sequential([ tf.keras.layers.StringLookup( vocabulary=unique_user_ids, mask_token=None), # We add an additional embedding to account for unknown tokens. tf.keras.layers.Embedding(len(unique_user_ids) + 1, embedding_dimension) ]) `\n```\n\nA simple model like this corresponds exactly to a classic [matrix factorization](https://ieeexplore.ieee.org/abstract/document/4781121) approach. While defining a subclass of [`tf.keras.Model`](https://www.tensorflow.org/api_docs/python/tf/keras/Model) for this simple model might be overkill, we can easily extend it to an arbitrarily complex model using standard Keras components, as long as we return an `embedding_dimension`-wide output at the end.\n\n### The candidate tower\n\nWe can do the same with the candidate tower.\n\n```\n`movie_model = tf.keras.Sequential([ tf.keras.layers.StringLookup( vocabulary=unique_movie_titles, mask_token=None), tf.keras.layers.Embedding(len(unique_movie_titles) + 1, embedding_dimension) ]) `\n```\n\n### Metrics\n\nIn our training data we have positive (user, movie) pairs. To figure out how good our model is, we need to compare the affinity score that the model calculates for this pair to the scores of all the other possible candidates: if the score for the positive pair is higher than for all other candidates, our model is highly accurate.\n\nTo do this, we can use the [`tfrs.metrics.FactorizedTopK`](https://www.tensorflow.org/recommenders/api_docs/python/tfrs/metrics/FactorizedTopK) metric. The metric has one required argument: the dataset of candidates that are used as implicit negatives for evaluation.\n\nIn our case, that's the `movies` dataset, converted into embeddings via our movie model:\n\n```\n`metrics = tfrs.metrics.FactorizedTopK( candidates=movies.batch(128).map(movie_model) ) `\n```\n\n### Loss\n\nThe next component is the loss used to train our model. TFRS has several loss layers and tasks to make this easy.\n\nIn this instance, we'll make use of the `Retrieval` task object: a convenience wrapper that bundles together the loss function and metric computation:\n\n```\n`task = tfrs.tasks.Retrieval( metrics=metrics ) `\n```\n\nThe task itself is a Keras layer that takes the query and candidate embeddings as arguments, and returns the computed loss: we'll use that to implement the model's training loop.\n\n### The full model\n\nWe can now put it all together into a model. TFRS exposes a base model class ([`tfrs.models.Model`](https://www.tensorflow.org/recommenders/api_docs/python/tfrs/models/Model)) which streamlines building models: all we need to do is to set up the components in the `__init__` method, and implement the `compute_loss` method, taking in the raw features and returning a loss value.\n\nThe base model will then take care of creating the appropriate training loop to fit our model.\n\n```\n`classMovielensModel(tfrs.Model): def__init__(self, user_model, movie_model): super().__init__() self.movie_model: tf.keras.Model = movie_model self.user_model: tf.keras.Model = user_model self.task: tf.keras.layers.Layer = task defcompute_loss(self, features: Dict[Text, tf.Tensor], training=False) -> tf.Tensor: # We pick out the user features and pass them into the user model. user_embeddings = self.user_model(features[\"user_id\"]) # And pick out the movie features and pass them into the movie model, # getting embeddings back. positive_movie_embeddings = self.movie_model(features[\"movie_title\"]) # The task computes the loss and the metrics. return self.task(user_embeddings, positive_movie_embeddings) `\n```\n\nThe [`tfrs.Model`](https://www.tensorflow.org/recommenders/api_docs/python/tfrs/models/Model) base class is a simply convenience class: it allows us to compute both training and test losses using the same method.\n\nUnder the hood, it's still a plain Keras model. You could achieve the same functionality by inheriting from [`tf.keras.Model`](https://www.tensorflow.org/api_docs/python/tf/keras/Model) and overriding the `train_step` and `test_step` functions (see [the guide](https://www.tensorflow.org/guide/keras/customizing_what_happens_in_fit) for details):\n\n```\n`classNoBaseClassMovielensModel(tf.keras.Model): def__init__(self, user_model, movie_model): super().__init__() self.movie_model: tf.keras.Model = movie_model self.user_model: tf.keras.Model = user_model self.task: tf.keras.layers.Layer = task deftrain_step(self, features: Dict[Text, tf.Tensor]) -> tf.Tensor: # Set up a gradient tape to record gradients. with tf.GradientTape() as tape: # Loss computation. user_embeddings = self.user_model(features[\"user_id\"]) positive_movie_embeddings = self.movie_model(features[\"movie_title\"]) loss = self.task(user_embeddings, positive_movie_embeddings) # Handle regularization losses as well. regularization_loss = sum(self.losses) total_loss = loss + regularization_loss gradients = tape.gradient(total_loss, self.trainable_variables) self.optimizer.apply_gradients(zip(gradients, self.trainable_variables)) metrics = {metric.name: metric.result() for metric in self.metrics} metrics[\"loss\"] = loss metrics[\"regularization_loss\"] = regularization_loss metrics[\"total_loss\"] = total_loss return metrics deftest_step(self, features: Dict[Text, tf.Tensor]) -> tf.Tensor: # Loss computation. user_embeddings = self.user_model(features[\"user_id\"]) positive_movie_embeddings = self.movie_model(features[\"movie_title\"]) loss = self.task(user_embeddings, positive_movie_embeddings) # Handle regularization losses as well. regularization_loss = sum(self.losses) total_loss = loss + regularization_loss metrics = {metric.name: metric.result() for metric in self.metrics} metrics[\"loss\"] = loss metrics[\"regularization_loss\"] = regularization_loss metrics[\"total_loss\"] = total_loss return metrics `\n```\n\nIn these tutorials, however, we stick to using the [`tfrs.Model`](https://www.tensorflow.org/recommenders/api_docs/python/tfrs/models/Model) base class to keep our focus on modelling and abstract away some of the boilerplate.\n\n## Fitting and evaluating\n\nAfter defining the model, we can use standard Keras fitting and evaluation routines to fit and evaluate the model.\n\nLet's first instantiate the model.\n\n```\n`model = MovielensModel(user_model, movie_model) model.compile(optimizer=tf.keras.optimizers.Adagrad(learning_rate=0.1)) `\n```\n\nThen shuffle, batch, and cache the training and evaluation data.\n\n```\n`cached_train = train.shuffle(100_000).batch(8192).cache() cached_test = test.batch(4096).cache() `\n```\n\nThen train the model:\n\n```\n`model.fit(cached_train, epochs=3) `\n``` ```\nEpoch 1/3 10/10 [==============================] - 6s 309ms/step - factorized_top_k/top_1_categorical_accuracy: 7.2500e-04 - factorized_top_k/top_5_categorical_accuracy: 0.0063 - factorized_top_k/top_10_categorical_accuracy: 0.0140 - factorized_top_k/top_50_categorical_accuracy: 0.0753 - factorized_top_k/top_100_categorical_accuracy: 0.1471 - loss: 69820.5881 - regularization_loss: 0.0000e+00 - total_loss: 69820.5881 Epoch 2/3 10/10 [==============================] - 3s 302ms/step - factorized_top_k/top_1_categorical_accuracy: 0.0011 - factorized_top_k/top_5_categorical_accuracy: 0.0119 - factorized_top_k/top_10_categorical_accuracy: 0.0260 - factorized_top_k/top_50_categorical_accuracy: 0.1403 - factorized_top_k/top_100_categorical_accuracy: 0.2616 - loss: 67457.6612 - regularization_loss: 0.0000e+00 - total_loss: 67457.6612 Epoch 3/3 10/10 [==============================] - 3s 301ms/step - factorized_top_k/top_1_categorical_accuracy: 0.0014 - factorized_top_k/top_5_categorical_accuracy: 0.0189 - factorized_top_k/top_10_categorical_accuracy: 0.0400 - factorized_top_k/top_50_categorical_accuracy: 0.1782 - factorized_top_k/top_100_categorical_accuracy: 0.3056 - loss: 66284.5682 - regularization_loss: 0.0000e+00 - total_loss: 66284.5682 <keras.callbacks.History at 0x7f6039c48160> \n```\n\nIf you want to monitor the training process with TensorBoard, you can add a TensorBoard callback to fit() function and then start TensorBoard using `%tensorboard --logdir logs/fit`. Please refer to [TensorBoard documentation](https://www.tensorflow.org/tensorboard/get_started) for more details.\n\nAs the model trains, the loss is falling and a set of top-k retrieval metrics is updated. These tell us whether the true positive is in the top-k retrieved items from the entire candidate set. For example, a top-5 categorical accuracy metric of 0.2 would tell us that, on average, the true positive is in the top 5 retrieved items 20% of the time.\n\nNote that, in this example, we evaluate the metrics during training as well as evaluation. Because this can be quite slow with large candidate sets, it may be prudent to turn metric calculation off in training, and only run it in evaluation.\n\nFinally, we can evaluate our model on the test set:\n\n```\n`model.evaluate(cached_test, return_dict=True) `\n``` ```\n5/5 [==============================] - 3s 191ms/step - factorized_top_k/top_1_categorical_accuracy: 0.0010 - factorized_top_k/top_5_categorical_accuracy: 0.0087 - factorized_top_k/top_10_categorical_accuracy: 0.0212 - factorized_top_k/top_50_categorical_accuracy: 0.1218 - factorized_top_k/top_100_categorical_accuracy: 0.2334 - loss: 31086.5010 - regularization_loss: 0.0000e+00 - total_loss: 31086.5010 {'factorized_top_k/top_1_categorical_accuracy': 0.0010000000474974513, 'factorized_top_k/top_5_categorical_accuracy': 0.008700000122189522, 'factorized_top_k/top_10_categorical_accuracy': 0.021150000393390656, 'factorized_top_k/top_50_categorical_accuracy': 0.121799997985363, 'factorized_top_k/top_100_categorical_accuracy': 0.23340000212192535, 'loss': 28256.8984375, 'regularization_loss': 0, 'total_loss': 28256.8984375} \n```\n\nTest set performance is much worse than training performance. This is due to two factors:\n\n  1. Our model is likely to perform better on the data that it has seen, simply because it can memorize it. This overfitting phenomenon is especially strong when models have many parameters. It can be mediated by model regularization and use of user and movie features that help the model generalize better to unseen data.\n  2. The model is re-recommending some of users' already watched movies. These known-positive watches can crowd out test movies out of top K recommendations.\n\n\n\nThe second phenomenon can be tackled by excluding previously seen movies from test recommendations. This approach is relatively common in the recommender systems literature, but we don't follow it in these tutorials. If not recommending past watches is important, we should expect appropriately specified models to learn this behaviour automatically from past user history and contextual information. Additionally, it is often appropriate to recommend the same item multiple times (say, an evergreen TV series or a regularly purchased item).\n\n## Making predictions\n\nNow that we have a model, we would like to be able to make predictions. We can use the [`tfrs.layers.factorized_top_k.BruteForce`](https://www.tensorflow.org/recommenders/api_docs/python/tfrs/layers/factorized_top_k/BruteForce) layer to do this.\n\n```\n`# Create a model that takes in raw query features, and index = tfrs.layers.factorized_top_k.BruteForce(model.user_model) # recommends movies out of the entire movies dataset. index.index_from_dataset( tf.data.Dataset.zip((movies.batch(100), movies.batch(100).map(model.movie_model))) ) # Get recommendations. _, titles = index(tf.constant([\"42\"])) print(f\"Recommendations for user 42: {titles[0,:3]}\") `\n``` ```\nRecommendations for user 42: [b'Christmas Carol, A (1938)' b'Rudy (1993)' b'Bridges of Madison County, The (1995)'] \n```\n\nOf course, the `BruteForce` layer is going to be too slow to serve a model with many possible candidates. The following sections shows how to speed this up by using an approximate retrieval index.\n\n## Model serving\n\nAfter the model is trained, we need a way to deploy it.\n\nIn a two-tower retrieval model, serving has two components:\n\n  * a serving query model, taking in features of the query and transforming them into a query embedding, and\n  * a serving candidate model. This most often takes the form of an approximate nearest neighbours (ANN) index which allows fast approximate lookup of candidates in response to a query produced by the query model.\n\n\n\nIn TFRS, both components can be packaged into a single exportable model, giving us a model that takes the raw user id and returns the titles of top movies for that user. This is done via exporting the model to a `SavedModel` format, which makes it possible to serve using [TensorFlow Serving](https://www.tensorflow.org/tfx/guide/serving).\n\nTo deploy a model like this, we simply export the `BruteForce` layer we created above:\n\n```\n`# Export the query model. with tempfile.TemporaryDirectory() as tmp: path = os.path.join(tmp, \"model\") # Save the index. tf.saved_model.save(index, path) # Load it back; can also be done in TensorFlow Serving. loaded = tf.saved_model.load(path) # Pass a user id in, get top predicted movie titles back. scores, titles = loaded([\"42\"]) print(f\"Recommendations: {titles[0][:3]}\") `\n``` ```\nWARNING:absl:Found untraced functions such as query_with_exclusions while saving (showing 1 of 1). These functions will not be directly callable after loading. INFO:tensorflow:Assets written to: /tmpfs/tmp/tmptfkkd57q/model/assets INFO:tensorflow:Assets written to: /tmpfs/tmp/tmptfkkd57q/model/assets Recommendations: [b'Christmas Carol, A (1938)' b'Rudy (1993)' b'Bridges of Madison County, The (1995)'] \n```\n\nWe can also export an approximate retrieval index to speed up predictions. This will make it possible to efficiently surface recommendations from sets of tens of millions of candidates.\n\nTo do so, we can use the `scann` package. This is an optional dependency of TFRS, and we installed it separately at the beginning of this tutorial by calling `!pip install -q scann`.\n\nOnce installed we can use the TFRS `ScaNN` layer:\n\n```\n`scann_index = tfrs.layers.factorized_top_k.ScaNN(model.user_model) scann_index.index_from_dataset( tf.data.Dataset.zip((movies.batch(100), movies.batch(100).map(model.movie_model))) ) `\n``` ```\n<tensorflow_recommenders.layers.factorized_top_k.ScaNN at 0x7f5fa01ff130> \n```\n\nThis layer will perform _approximate_ lookups: this makes retrieval slightly less accurate, but orders of magnitude faster on large candidate sets.\n\n```\n`# Get recommendations. _, titles = scann_index(tf.constant([\"42\"])) print(f\"Recommendations for user 42: {titles[0,:3]}\") `\n``` ```\nRecommendations for user 42: [b'Little Big League (1994)' b'Miracle on 34th Street (1994)' b'Cinderella (1950)'] \n```\n\nExporting it for serving is as easy as exporting the `BruteForce` layer:\n\n```\n`# Export the query model. with tempfile.TemporaryDirectory() as tmp: path = os.path.join(tmp, \"model\") # Save the index. tf.saved_model.save( scann_index, path, options=tf.saved_model.SaveOptions(namespace_whitelist=[\"Scann\"]) ) # Load it back; can also be done in TensorFlow Serving. loaded = tf.saved_model.load(path) # Pass a user id in, get top predicted movie titles back. scores, titles = loaded([\"42\"]) print(f\"Recommendations: {titles[0][:3]}\") `\n``` ```\nWARNING:absl:Found untraced functions such as query_with_exclusions while saving (showing 1 of 1). These functions will not be directly callable after loading. INFO:tensorflow:Assets written to: /tmpfs/tmp/tmpxpt22mi0/model/assets INFO:tensorflow:Assets written to: /tmpfs/tmp/tmpxpt22mi0/model/assets Recommendations: [b'Little Big League (1994)' b'Miracle on 34th Street (1994)' b'Cinderella (1950)'] \n```\n\nTo learn more about using and tuning fast approximate retrieval models, have a look at our [efficient serving](https://tensorflow.org/recommenders/examples/efficient_serving) tutorial.\n\n## Item-to-item recommendation\n\nIn this model, we created a user-movie model. However, for some applications (for example, product detail pages) it's common to perform item-to-item (for example, movie-to-movie or product-to-product) recommendations.\n\nTraining models like this would follow the same pattern as shown in this tutorial, but with different training data. Here, we had a user and a movie tower, and used (user, movie) pairs to train them. In an item-to-item model, we would have two item towers (for the query and candidate item), and train the model using (query item, candidate item) pairs. These could be constructed from clicks on product detail pages.\n\n## Next steps\n\nThis concludes the retrieval tutorial.\n\nTo expand on what is presented here, have a look at:\n\n  1. Learning multi-task models: jointly optimizing for ratings and clicks.\n  2. Using movie metadata: building a more complex movie model to alleviate cold-start.\n\n\n\nExcept as otherwise noted, the content of this page is licensed under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/), and code samples are licensed under the [Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For details, see the [Google Developers Site Policies](https://developers.google.com/site-policies). Java is a registered trademark of Oracle and/or its affiliates.\n\nLast updated 2023-05-27 UTC.\n\n[[[\"Easy to understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved my problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing the information I need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / too many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out of date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2023-05-27 UTC.\"],[],[]] \n\n  * ### Stay connected\n\n    * [ Blog ](//blog.tensorflow.org)\n    * [ Forum ](//discuss.tensorflow.org)\n    * [ GitHub ](//github.com/tensorflow/)\n    * [ Twitter ](//twitter.com/tensorflow)\n    * [ YouTube ](//youtube.com/tensorflow)\n  * ### Support\n\n    * [ Issue tracker ](//github.com/tensorflow/tensorflow/issues)\n    * [ Release notes ](//github.com/tensorflow/tensorflow/blob/master/RELEASE.md)\n    * [ Stack Overflow ](//stackoverflow.com/questions/tagged/tensorflow)\n    * [ Brand guidelines ](/extras/tensorflow_brand_guidelines.pdf)\n    * [ Cite TensorFlow ](/about/bib)\n\n\n\n  * [ Terms ](//policies.google.com/terms)\n  * [ Privacy ](//policies.google.com/privacy)\n  * [ Manage cookies ](#)\n  * Sign up for the TensorFlow newsletter [ Subscribe ](//www.tensorflow.org/subscribe)\n\n\n\n  * English\n  * Español – América Latina\n  * Français\n  * Indonesia\n  * Italiano\n  * Polski\n  * Português – Brasil\n  * Tiếng Việt\n  * Türkçe\n  * Русский\n  * עברית\n  * العربيّة\n  * فارسی\n  * हिंदी\n  * বাংলা\n  * ภาษาไทย\n  * 中文 – 简体\n  * 日本語\n  * 한국어\n\n\n",
    "content_quality_score": 0.5,
    "summary": null,
    "child_urls": [
        "https://www.tensorflow.org/",
        "https://www.tensorflow.org/install",
        "https://www.tensorflow.org/learn",
        "https://www.tensorflow.org/recommenders/examples/basic_retrieval/",
        "https://www.tensorflow.org/tutorials",
        "https://www.tensorflow.org/guide",
        "https://www.tensorflow.org/resources/learn-ml",
        "https://www.tensorflow.org/api",
        "https://www.tensorflow.org/api/stable",
        "https://www.tensorflow.org/versions",
        "https://www.tensorflow.org/lite/api_docs",
        "https://www.tensorflow.org/tfx/api_docs",
        "https://www.tensorflow.org/resources",
        "https://www.tensorflow.org/js",
        "https://www.tensorflow.org/lite",
        "https://www.tensorflow.org/tfx",
        "https://www.tensorflow.org/resources/libraries-extensions",
        "https://www.tensorflow.org/resources/models-datasets",
        "https://www.tensorflow.org/resources/tools",
        "https://www.tensorflow.org/responsible_ai",
        "https://www.tensorflow.org/resources/recommendation-systems",
        "https://www.tensorflow.org/community",
        "https://www.tensorflow.org/community/groups",
        "https://www.tensorflow.org/community/contribute",
        "https://www.tensorflow.org/about",
        "https://www.tensorflow.org/about/case-studies",
        "https://www.tensorflow.org/recommenders",
        "https://www.tensorflow.org/recommenders/examples/quickstart",
        "https://www.tensorflow.org/recommenders/api_docs/python/tfrs/all_symbols",
        "https://www.tensorflow.org/recommenders/examples/basic_retrieval",
        "https://www.tensorflow.org/recommenders/examples/basic_ranking",
        "https://www.tensorflow.org/recommenders/examples/diststrat_retrieval",
        "https://www.tensorflow.org/recommenders/examples/sequential_retrieval",
        "https://www.tensorflow.org/tfx/tutorials/tfx/recommenders",
        "https://www.tensorflow.org/recommenders/examples/ranking_tfx",
        "https://www.tensorflow.org/recommenders/examples/tpu_embedding_layer",
        "https://www.tensorflow.org/recommenders/examples/featurization",
        "https://www.tensorflow.org/recommenders/examples/context_features",
        "https://www.tensorflow.org/recommenders/examples/deep_recommenders",
        "https://www.tensorflow.org/recommenders/examples/multitask",
        "https://www.tensorflow.org/recommenders/examples/dcn",
        "https://www.tensorflow.org/recommenders/examples/efficient_serving",
        "https://www.tensorflow.org/recommenders/examples/listwise_ranking",
        "https://www.tensorflow.org/datasets",
        "https://www.tensorflow.org/api_docs/python/tf/keras/Model",
        "https://www.tensorflow.org/recommenders/api_docs/python/tfrs/metrics/FactorizedTopK",
        "https://www.tensorflow.org/recommenders/api_docs/python/tfrs/models/Model",
        "https://www.tensorflow.org/guide/keras/customizing_what_happens_in_fit",
        "https://www.tensorflow.org/tensorboard/get_started",
        "https://www.tensorflow.org/recommenders/api_docs/python/tfrs/layers/factorized_top_k/BruteForce",
        "https://www.tensorflow.org/tfx/guide/serving",
        "https://www.tensorflow.org/extras/tensorflow_brand_guidelines.pdf",
        "https://www.tensorflow.org/about/bib",
        "https://www.tensorflow.org/subscribe",
        "https://js.tensorflow.org/api/latest/",
        "https://blog.tensorflow.org/",
        "https://discuss.tensorflow.org",
        "https://github.com/tensorflow",
        "https://colab.research.google.com/github/tensorflow/recommenders/blob/main/docs/examples/basic_retrieval.ipynb",
        "https://github.com/tensorflow/recommenders/blob/main/docs/examples/basic_retrieval.ipynb",
        "https://storage.googleapis.com/tensorflow_docs/recommenders/docs/examples/basic_retrieval.ipynb",
        "https://grouplens.org/datasets/movielens/",
        "https://ieeexplore.ieee.org/abstract/document/4781121",
        "https://tensorflow.org/recommenders/examples/efficient_serving",
        "https://creativecommons.org/licenses/by/4.0/",
        "https://www.apache.org/licenses/LICENSE-2.0",
        "https://developers.google.com/site-policies",
        "https://blog.tensorflow.org",
        "https://github.com/tensorflow/",
        "https://twitter.com/tensorflow",
        "https://youtube.com/tensorflow",
        "https://github.com/tensorflow/tensorflow/issues",
        "https://github.com/tensorflow/tensorflow/blob/master/RELEASE.md",
        "https://stackoverflow.com/questions/tagged/tensorflow",
        "https://policies.google.com/terms",
        "https://policies.google.com/privacy"
    ]
}