[Skip to content](#start-of-content)

## Navigation Menu

Toggle navigation

[ ](/)

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Flangchain-ai%2Flanggraph-studio%2F)

  * Product 

    * [ GitHub Copilot Write better code with AI  ](https://github.com/features/copilot)
    * [ Security Find and fix vulnerabilities  ](https://github.com/features/security)
    * [ Actions Automate any workflow  ](https://github.com/features/actions)
    * [ Codespaces Instant dev environments  ](https://github.com/features/codespaces)
    * [ Issues Plan and track work  ](https://github.com/features/issues)
    * [ Code Review Manage code changes  ](https://github.com/features/code-review)
    * [ Discussions Collaborate outside of code  ](https://github.com/features/discussions)
    * [ Code Search Find more, search less  ](https://github.com/features/code-search)

Explore
    * [ All features ](https://github.com/features)
    * [ Documentation ](https://docs.github.com)
    * [ GitHub Skills ](https://skills.github.com)
    * [ Blog ](https://github.blog)

  * Solutions 

By company size
    * [ Enterprises ](https://github.com/enterprise)
    * [ Small and medium teams ](https://github.com/team)
    * [ Startups ](https://github.com/enterprise/startups)
    * [ Nonprofits ](/solutions/industry/nonprofits)

By use case
    * [ DevSecOps ](/solutions/use-case/devsecops)
    * [ DevOps ](/solutions/use-case/devops)
    * [ CI/CD ](/solutions/use-case/ci-cd)
    * [ View all use cases ](/solutions/use-case)

By industry
    * [ Healthcare ](/solutions/industry/healthcare)
    * [ Financial services ](/solutions/industry/financial-services)
    * [ Manufacturing ](/solutions/industry/manufacturing)
    * [ Government ](/solutions/industry/government)
    * [ View all industries ](/solutions/industry)

[ View all solutions ](/solutions)

  * Resources 

Topics
    * [ AI ](/resources/articles/ai)
    * [ DevOps ](/resources/articles/devops)
    * [ Security ](/resources/articles/security)
    * [ Software Development ](/resources/articles/software-development)
    * [ View all ](/resources/articles)

Explore
    * [ Learning Pathways ](https://resources.github.com/learn/pathways)
    * [ White papers, Ebooks, Webinars ](https://resources.github.com)
    * [ Customer Stories ](https://github.com/customer-stories)
    * [ Partners ](https://partner.github.com)
    * [ Executive Insights ](https://github.com/solutions/executive-insights)

  * Open Source 

    * [ GitHub Sponsors Fund open source developers  ](/sponsors)

    * [ The ReadME Project GitHub community articles  ](https://github.com/readme)

Repositories
    * [ Topics ](https://github.com/topics)
    * [ Trending ](https://github.com/trending)
    * [ Collections ](https://github.com/collections)

  * Enterprise 

    * [ Enterprise platform AI-powered developer platform  ](/enterprise)

Available add-ons
    * [ Advanced Security Enterprise-grade security features  ](https://github.com/enterprise/advanced-security)
    * [ GitHub Copilot Enterprise-grade AI features  ](/features/copilot#enterprise)
    * [ Premium Support Enterprise-grade 24/7 support  ](/premium-support)

  * [Pricing](https://github.com/pricing)



Search or jump to...

# Search code, repositories, users, issues, pull requests...

Search 

Clear

[Search syntax tips](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax)

#  Provide feedback 

We read every piece of feedback, and take your input very seriously.

Include my email address so I can be contacted

Cancel  Submit feedback 

#  Saved searches 

## Use saved searches to filter your results more quickly

Name

Query

To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). 

Cancel  Create saved search 

[ Sign in ](/login?return_to=https%3A%2F%2Fgithub.com%2Flangchain-ai%2Flanggraph-studio%2F)

[ Sign up ](/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&source=header-repo&source_repo=langchain-ai%2Flanggraph-studio) Reseting focus

You signed in with another tab or window. [Reload]() to refresh your session. You signed out in another tab or window. [Reload]() to refresh your session. You switched accounts on another tab or window. [Reload]() to refresh your session. Dismiss alert

{{ message }}

[ langchain-ai ](/langchain-ai) / **[langgraph-studio](/langchain-ai/langgraph-studio) ** Public

  * [ Notifications ](/login?return_to=%2Flangchain-ai%2Flanggraph-studio) You must be signed in to change notification settings
  * [ Fork 153 ](/login?return_to=%2Flangchain-ai%2Flanggraph-studio)
  * [ Star  2.3k ](/login?return_to=%2Flangchain-ai%2Flanggraph-studio)




Desktop app for prototyping and debugging LangGraph applications locally. 

[studio.langchain.com](https://studio.langchain.com "https://studio.langchain.com")

[ 2.3k stars ](/langchain-ai/langgraph-studio/stargazers) [ 153 forks ](/langchain-ai/langgraph-studio/forks) [ Branches ](/langchain-ai/langgraph-studio/branches) [ Tags ](/langchain-ai/langgraph-studio/tags) [ Activity ](/langchain-ai/langgraph-studio/activity)

[ Star  ](/login?return_to=%2Flangchain-ai%2Flanggraph-studio)

[ Notifications ](/login?return_to=%2Flangchain-ai%2Flanggraph-studio) You must be signed in to change notification settings

  * [ Code ](/langchain-ai/langgraph-studio)
  * [ Issues 54 ](/langchain-ai/langgraph-studio/issues)
  * [ Pull requests 0 ](/langchain-ai/langgraph-studio/pulls)
  * [ Discussions ](/langchain-ai/langgraph-studio/discussions)
  * [ Actions ](/langchain-ai/langgraph-studio/actions)
  * [ Security ](/langchain-ai/langgraph-studio/security)
  * [ Insights ](/langchain-ai/langgraph-studio/pulse)



Additional navigation options

  * [ Code  ](/langchain-ai/langgraph-studio)
  * [ Issues  ](/langchain-ai/langgraph-studio/issues)
  * [ Pull requests  ](/langchain-ai/langgraph-studio/pulls)
  * [ Discussions  ](/langchain-ai/langgraph-studio/discussions)
  * [ Actions  ](/langchain-ai/langgraph-studio/actions)
  * [ Security  ](/langchain-ai/langgraph-studio/security)
  * [ Insights  ](/langchain-ai/langgraph-studio/pulse)



# langchain-ai/langgraph-studio

main

[**3** Branches](/langchain-ai/langgraph-studio/branches)[**44** Tags](/langchain-ai/langgraph-studio/tags)

[](/langchain-ai/langgraph-studio/branches)[](/langchain-ai/langgraph-studio/tags)

Go to file

Code

## Folders and files

Name| Name| Last commit message| Last commit date  
---|---|---|---  
  
## Latest commit

[![dqbd](https://avatars.githubusercontent.com/u/1443449?v=4&size=40)](/dqbd)[dqbd](/langchain-ai/langgraph-studio/commits?author=dqbd)[Merge pull request](/langchain-ai/langgraph-studio/commit/5874680cdf4319d036c1021f18c119f069d3f115) [#209](https://github.com/langchain-ai/langgraph-studio/pull/209) [from gfortaine/main](/langchain-ai/langgraph-studio/commit/5874680cdf4319d036c1021f18c119f069d3f115)Jan 2, 2025[5874680](/langchain-ai/langgraph-studio/commit/5874680cdf4319d036c1021f18c119f069d3f115) Â· Jan 2, 2025

## History

[52 Commits](/langchain-ai/langgraph-studio/commits/main/)[](/langchain-ai/langgraph-studio/commits/main/)  
[img](/langchain-ai/langgraph-studio/tree/main/img "img")| [img](/langchain-ai/langgraph-studio/tree/main/img "img")| [add replay video](/langchain-ai/langgraph-studio/commit/0aa7aef808551dd16fec2d236e6b4ca37ac76d35 "add replay video")| Aug 1, 2024  
[README.md](/langchain-ai/langgraph-studio/blob/main/README.md "README.md")| [README.md](/langchain-ai/langgraph-studio/blob/main/README.md "README.md")| [update example for HITL](/langchain-ai/langgraph-studio/commit/96015c67c786120d32a1d5f47edd0715ecd41cb7 "update example for HITL")| Dec 23, 2024  
[cover.svg](/langchain-ai/langgraph-studio/blob/main/cover.svg "cover.svg")| [cover.svg](/langchain-ai/langgraph-studio/blob/main/cover.svg "cover.svg")| [Update to match Vadym's changes](/langchain-ai/langgraph-studio/commit/d26939aec4c53ce40fb694881f5a541ea6980091 "Update to match Vadym's changes")| Jul 31, 2024  
View all files  
  
## Repository files navigation

  * [README](#)



[![LangGraph Studio](/langchain-ai/langgraph-studio/raw/main/cover.svg)](/langchain-ai/langgraph-studio/blob/main/cover.svg)

# LangGraph Studio Desktop (Beta)

[](#langgraph-studio-desktop-beta)

LangGraph Studio offers a new way to develop LLM applications by providing a specialized agent IDE that enables visualization, interaction, and debugging of complex agentic applications

With visual graphs and the ability to edit state, you can better understand agent workflows and iterate faster. LangGraph Studio integrates with [LangSmith](https://smith.langchain.com/) so you can collaborate with teammates to debug failure modes.

While in Beta, LangGraph Studio is available for free to all LangSmith users on any plan tier. [Sign up for LangSmith here](http://smith.langchain.com/).

Note

We recommend that users [run a local LangGraph server and use the web version of LangGraph Studio](https://langchain-ai.github.io/langgraph/tutorials/langgraph-platform/local-server/) instead of using the LangGraph Studio Desktop application. This is a newer feature that improves the development experience, as it works without Docker, significantly shortens startup times, supports code hot-reloading, and works across all platforms.

[![](/langchain-ai/langgraph-studio/raw/main/img/intro.gif)](/langchain-ai/langgraph-studio/blob/main/img/intro.gif) [ ![intro.gif](https://github.com/langchain-ai/langgraph-studio/raw/main/img/intro.gif) ](https://github.com/langchain-ai/langgraph-studio/blob/main/img/intro.gif) [ ](https://github.com/langchain-ai/langgraph-studio/blob/main/img/intro.gif)

## Download

[](#download)

Download the latest `.dmg` file of LangGraph Studio by clicking [here](https://langgraph-studio.vercel.app/api/mac/latest) or by visiting the [releases page](https://github.com/langchain-ai/langgraph-studio/releases).

The desktop application only supports macOS. Other users can [run a local LangGraph server and use the web studio](https://langchain-ai.github.io/langgraph/tutorials/langgraph-platform/local-server/#langgraph-studio-web-ui). We also depend on Docker Engine to be running, currently we only support the following runtimes:

  * [Docker Desktop](https://docs.docker.com/engine/install/)
  * [Orbstack](https://orbstack.dev/)



## Setup

[](#setup)

LangGraph Studio requires docker-compose version 2.22.0+ or higher. Please make sure you have [Docker Desktop](https://docs.docker.com/engine/install/) or [Orbstack](https://orbstack.dev/) installed and running before continuing.

To use LangGraph Studio, make sure you have a [project with a LangGraph app](https://langchain-ai.github.io/langgraph/cloud/deployment/setup/) set up.

For this example, we will use this example repository [here](https://github.com/langchain-ai/langgraph-example) which uses a `requirements.txt` file for dependencies:

```
git clone https://github.com/langchain-ai/langgraph-example.git
```

If you would like to use a `pyproject.toml` file instead for managing dependencies, you can use [this](https://github.com/langchain-ai/langgraph-example-pyproject) example repository.

```
git clone https://github.com/langchain-ai/langgraph-example-pyproject.git
```

You will then want to create a `.env` file with the relevant environment variables:

```
cp .env.example .env
```

You should then open up the `.env` file and fill in with relevant OpenAI, Anthropic, and [Tavily](https://app.tavily.com/sign-in) API keys.

If you already have them set in your environment, you can save them to this .env file with the following commands:

```
echo "OPENAI_API_KEY=\"$OPENAI_API_KEY\"" > .env echo "ANTHROPIC_API_KEY=\"$ANTHROPIC_API_KEY\"" >> .env echo "TAVILY_API_KEY=\"$TAVILY_API_KEY\"" >> .env
```

**Note: do NOT add a LANGSMITH_API_KEY to the .env file.** We will do this automatically for you when you authenticate, and manually setting this may cause errors.

Once you've set up the project, you can use it in LangGraph Studio. Let's dive in!

## Open a project

[](#open-a-project)

When you open LangGraph Studio desktop app for the first time, you need to login via LangSmith.

[![Login Screen](/langchain-ai/langgraph-studio/raw/main/img/login_screen.png)](/langchain-ai/langgraph-studio/blob/main/img/login_screen.png)

Once you have successfully authenticated, you can choose the LangGraph application folder to use â you can either drag and drop or manually select it in the file picker. If you are using the example project, the folder would be `langgraph-example`.

Important

The application directory you select needs to contain correctly configured `langgraph.json` file. See more information on how to configure it [here](https://langchain-ai.github.io/langgraph/cloud/reference/cli/#configuration-file) and how to set up a LangGraph app [here](https://langchain-ai.github.io/langgraph/cloud/deployment/setup/).

[![Select Project Screen](/langchain-ai/langgraph-studio/raw/main/img/select_project_screen.png)](/langchain-ai/langgraph-studio/blob/main/img/select_project_screen.png)

Once you select a valid project, LangGraph Studio will start a LangGraph API server and you should see a UI with your graph rendered.

[![Graph Screen](/langchain-ai/langgraph-studio/raw/main/img/graph_screen.png)](/langchain-ai/langgraph-studio/blob/main/img/graph_screen.png)

## Invoke graph

[](#invoke-graph)

Now we can run the graph! LangGraph Studio lets you run your graph with different inputs and configurations.

### Start a new run

[](#start-a-new-run)

To start a new run:

  1. In the dropdown menu (top-left corner of the left-hand pane), select a graph. In our example the graph is called `agent`. The list of graphs corresponds to the `graphs` keys in your `langgraph.json` configuration.
  2. In the bottom of the left-hand pane, edit the `Input` section.
  3. Click `Submit` to invoke the selected graph.
  4. View output of the invocation in the right-hand pane.



The following video shows how to start a new run:

graph_invoke.mp4

### Configure graph run

[](#configure-graph-run)

To change configuration for a given graph run, press `Configurable` button in the `Input` section. Then click `Submit` to invoke the graph.

Important

In order for the `Configurable` menu to be visible, make sure to specify config schema when creating `StateGraph`. You can read more about how to add config schema to your graph [here](https://langchain-ai.github.io/langgraph/how-tos/configuration/#configure-the-graph).

The following video shows how to edit configuration and start a new run:

graph_config.mp4

## Create and edit threads

[](#create-and-edit-threads)

### Create a thread

[](#create-a-thread)

When you open LangGraph Studio, you will automatically be in a new thread window. If you have an existing thread open, follow these steps to create a new thread:

  1. In the top-right corner of the right-hand pane, press `+` to open a new thread menu.



The following video shows how to create a thread:

create_thread.mp4

### Select a thread

[](#select-a-thread)

To select a thread:

  1. Click on `New Thread` / `Thread <thread-id>` label at the top of the right-hand pane to open a thread list dropdown.
  2. Select a thread that you wish to view / edit.



The following video shows how to select a thread:

select_thread.mp4

### Edit thread state

[](#edit-thread-state)

LangGraph Studio allows you to edit the thread state and fork the threads to create alternative graph execution with the updated state. To do it:

  1. Select a thread you wish to edit.
  2. In the right-hand pane hover over the step you wish to edit and click on "pencil" icon to edit.
  3. Make your edits.
  4. Click `Fork` to update the state and create a new graph execution with the updated state.



The following video shows how to edit a thread in the studio:

fork_thread.mp4

## How to add interrupts to your graph

[](#how-to-add-interrupts-to-your-graph)

You might want to execute your graph step by step, or stop graph execution before/after a specific node executes. You can do so by adding interrupts. Interrupts can be set for all nodes (i.e. walk through the agent execution step by step) or for specific nodes. An interrupt in LangGraph Studio means that the graph execution will be interrupted both before and after a given node runs.

### Add interrupts to a list of nodes

[](#add-interrupts-to-a-list-of-nodes)

To walk through the agent execution step by step, you can add interrupts to a all or a subset of nodes in the graph:

  1. In the dropdown menu (top-right corner of the left-hand pane), click `Interrupt`.
  2. Select a subset of nodes to interrupt on, or click `Interrupt on all`.



The following video shows how to add interrupts to all nodes:

graph_interrupts_all.mp4

### Add interrupt to a specific node

[](#add-interrupt-to-a-specific-node)

  1. Navigate to the left-hand pane with the graph visualization.
  2. Hover over a node you want to add an interrupt to. You should see a `+` button show up on the left side of the node.
  3. Click `+` to invoke the selected graph.
  4. Run the graph by adding `Input` / configuration and clicking `Submit`



The following video shows how to add interrupts to a specific node:

graph_interrupts.mp4

To remove the interrupt, simply follow the same step and press `x` button on the left side of the node.

## Human-in-the-loop

[](#human-in-the-loop)

In addition to interrupting on a node and editing the graph state, you might want to support human-in-the-loop workflows with the ability to manually update state. Here is a modified version of `agent.py` with `agent` and `human` nodes, where the graph execution will be interrupted on `human` node. This will let you send input as part of the `human` node. This can be useful when you want the agent to get user input. This essentially replaces how you might use `input()` if you were running this from the command line.

```
from typing import Literal from langchain_openai import ChatOpenAI from langgraph.graph import MessagesState, StateGraph, END from langgraph.types import Command, interrupt model = ChatOpenAI(temperature=0, model_name="gpt-4o") def call_model(state: MessagesState) -> Command[Literal["human", END]]: messages = state["messages"] response = model.invoke(messages) return Command( goto="human", update={"messages": [response]}, ) def human_feedback(state: MessagesState) -> Command[Literal["agent"]]: """A node for collecting user input.""" print("Waiting for user input...") user_input = interrupt(value="Ready for user input.") print("user input:", user_input) return Command( goto="agent", update={ "messages": [ { "role": "human", "content": user_input, } ] }, ) workflow = StateGraph(MessagesState) workflow.set_entry_point("agent") workflow.add_node("agent", call_model) workflow.add_node("human", human_feedback) graph = workflow.compile()
```

The following video shows how to manually send state updates (i.e. messages in our example) when interrupted:

graph_hitl.mp4

## Edit project config

[](#edit-project-config)

LangGraph Studio allows you to modify your project config (`langgraph.json`) interactively.

To modify the config from the studio, follow these steps:

  1. Click `Configure` on the bottom right. This will open an interactive config menu with the values that correspond to the existing `langgraph.json`.
  2. Make your edits.
  3. Click `Save and Restart` to reload the LangGraph API server with the updated config.



The following video shows how to edit project config from the studio:

graph_edit_json.mp4

## Edit graph code

[](#edit-graph-code)

With LangGraph Studio you can modify your graph code and sync the changes live to the interactive graph.

To modify your graph from the studio, follow these steps:

  1. Click `Open in VS Code` on the bottom right. This will open the project that is currently opened in LangGraph studio.
  2. Make changes to the `.py` files where the compiled graph is defined or associated dependencies.
  3. LangGraph studio will automatically reload once the changes are saved in the project directory.



The following video shows how to open code editor from the studio:

graph_edit_code.mp4

After you modify the underlying code you can also replay a node in the graph. For example, if an agent responds poorly, you can update the agent node implementation in your code editor and rerun it. This can make it much easier to iterate on long-running agents.

replay.mp4

## Troubleshooting

[](#troubleshooting)

### How do I access local services and models such as Ollama, Chroma, etc?

[](#how-do-i-access-local-services-and-models-such-as-ollama-chroma-etc)

LangGraph Studio relies on Docker Compose to run the API, Redis and Postgres, which in turn creates its own network. Thus, to access local services you need to use `host.docker.internal` as the hostname instead of `localhost`. See [#112](https://github.com/langchain-ai/langgraph-studio/issues/112) for more details.

### Failing to install native dependencies during build

[](#failing-to-install-native-dependencies-during-build)

By default, we try to make the image as small as possible, thus some dependencies such as `gcc` or `build-essentials` are missing from the base image. If you need to install additional dependencies, you can do so by adding additional Dockerfile instructions in the `dockerfile_lines` section of your `langgraph.json` file:

```
`{ "dockerfile_lines": [ "RUN apt-get update && apt-get install -y gcc" ] } `
```

See [How to customize Dockerfile](https://langchain-ai.github.io/langgraph/cloud/deployment/custom_docker) for more details.

## About

Desktop app for prototyping and debugging LangGraph applications locally. 

[studio.langchain.com](https://studio.langchain.com "https://studio.langchain.com")

### Topics

[ ai ](/topics/ai "Topic: ai") [ desktop ](/topics/desktop "Topic: desktop") [ agents ](/topics/agents "Topic: agents") [ langgraph ](/topics/langgraph "Topic: langgraph")

### Resources

[ Readme ](#readme-ov-file)

[ Activity](/langchain-ai/langgraph-studio/activity)

[ Custom properties](/langchain-ai/langgraph-studio/custom-properties)

### Stars

[ **2.3k** stars](/langchain-ai/langgraph-studio/stargazers)

### Watchers

[ **31** watching](/langchain-ai/langgraph-studio/watchers)

### Forks

[ **153** forks](/langchain-ai/langgraph-studio/forks)

[ Report repository ](/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Flangchain-ai%2Flanggraph-studio&report=langchain-ai+%28user%29)

##  [Releases 29](/langchain-ai/langgraph-studio/releases)

[ 0.0.35 Latest  Jan 16, 2025 ](/langchain-ai/langgraph-studio/releases/tag/v0.0.35)

[+ 28 releases](/langchain-ai/langgraph-studio/releases)

##  [Contributors 9](/langchain-ai/langgraph-studio/graphs/contributors)

  * [ ![@dqbd](https://avatars.githubusercontent.com/u/1443449?s=64&v=4) ](https://github.com/dqbd)
  * [ ![@hwchase17](https://avatars.githubusercontent.com/u/11986836?s=64&v=4) ](https://github.com/hwchase17)
  * [ ![@vbarda](https://avatars.githubusercontent.com/u/19161700?s=64&v=4) ](https://github.com/vbarda)
  * [ ![@efriis](https://avatars.githubusercontent.com/u/9557659?s=64&v=4) ](https://github.com/efriis)
  * [ ![@Masstronaut](https://avatars.githubusercontent.com/u/9017393?s=64&v=4) ](https://github.com/Masstronaut)
  * [ ![@nfcampos](https://avatars.githubusercontent.com/u/56902?s=64&v=4) ](https://github.com/nfcampos)
  * [ ![@andrewnguonly](https://avatars.githubusercontent.com/u/7654246?s=64&v=4) ](https://github.com/andrewnguonly)
  * [ ![@gfortaine](https://avatars.githubusercontent.com/u/15104841?s=64&v=4) ](https://github.com/gfortaine)
  * [ ![@isahers1](https://avatars.githubusercontent.com/u/78627776?s=64&v=4) ](https://github.com/isahers1)



## Footer

[ ](https://github.com "GitHub") Â© 2025 GitHub, Inc. 

### Footer navigation

  * [Terms](https://docs.github.com/site-policy/github-terms/github-terms-of-service)
  * [Privacy](https://docs.github.com/site-policy/privacy-policies/github-privacy-statement)
  * [Security](https://github.com/security)
  * [Status](https://www.githubstatus.com/)
  * [Docs](https://docs.github.com/)
  * [Contact](https://support.github.com?tags=dotcom-footer)
  * Manage cookies 
  * Do not share my personal information 



You canât perform that action at this time. 
